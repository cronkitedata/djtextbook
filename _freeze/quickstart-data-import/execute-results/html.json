{
  "hash": "12da3b72d8f79b42d4d4a788ff21ed40",
  "result": {
    "markdown": "# Getting and saving data {#quickstart-data-import}\n\nBefore you start trying to program, remember that you're not alone when you encounter errors. Here, an accomplished data scientist, illustrates her own frustration. Watch the clock on this cartoon and on your own work: If you're getting nowhere after about 20 minutes, take a break. If you're still not getting anywhere, get an extra set of eyes. It's often as simple as a spelling or punctuation error.\n\n![](assets/images/r-dataframe-take-a-break.jpg){width=\"80%\"}\n\n## Billboard Hot 100\n\nChristian McDonald, a data journalism professor at the University of Texas, has compiled a list of Billboard's Hot 100 hits back to the 1950s, and made it available in his Github account. We'll be using the data on McDonald's Github repository at <https://raw.githubusercontent.com/utdata/rwd-billboard-data/main/data-out/hot100_assignment.csv>\n\nHere is how he has described it:\n\n> The Billboard [Hot 100](https://www.billboard.com/charts/hot-100/) singles chart has been the music industry's standard record chart since its inception on 8/2/1958. The rankings, published by Billboard Media, are currently based on sales (physical and digital), radio play, and online streaming. The methods and policies of the chart have changed over time.\n\n> The data we will use here is a combination of data collected by Kaggle user [Dhruvil Dave](https://www.kaggle.com/dhruvildave/billboard-the-hot-100-songs), along with some scraping and merging by Prof. McDonald. It is stored on the code sharing website Github for safe keeping.\n\n### The data dictionary\n\nAs of December 2023, this version of runs from its inception in August 1958 through mid-June 2023, before most of Taylor Swift's Eras tour sent her Hot 100 numbers even higher.\n\nHere is a *data dictionary* , sometimes called a *record layout* to go along with the data.\n\n| variable name | type      | description                                                                         |\n|-----------------|-----------------|--------------------------------------|\n| CHART WEEK    | date      | The release date of the chart in the form \"m/d/yyyy\"                                |\n| THIS WEEK     | number    | The rank (1 through 100) of the song that week                                      |\n| TITLE         | character | Song title                                                                          |\n| PERFORMER     | character | Performer, as published in the chart. There could be different spellings over time. |\n| LAST WEEK     | number    | Last week's ranking                                                                 |\n| PEAK POS.     | number    | Highest ranking ever on the Top 100 chart                                           |\n| WKS ON CHART  | number    | Number of weeks it has appeared on the chart, not necessarily consecutive.          |\n\nHere are some things to note about it:\n\n-   The names of columns are in upper case and contain spaces and punctuation. That makes our life a little more complicated, and we'll want to fix it.\n-   It provides the type of data -- number, date or text -- that should be contained in each column. \n-   Dates are shown in a way we normally read them in the U.S., such as \"12/3/2023\" \n-   Each row represents a song in the designated week. This means that there will be lots of rows for each week, and a row for each song every time it was on the hot 100.\n\n\n## Set up your Quarto program\n\nYou'll do this every time you start a new document or project in R.\n\n::: callout-dothis\n\n1.  Create an R project in your `maij-working` folder called `hot-100` .\n\n2.  Create a new Quarto document and delete everything. \n\n3. If you're not already there, switch to the Source view.\n\n4. [Copy and paste the top section from the Quarto lesson](quickstart-quarto.qmd#frontmatter) delete everything else. Try rendering it to check for errors before you go any further -- this part is really picky. \n\n5.  Copy and paste the code chunk below  into your document and press the \"Play\" button to run the code.\n\n::: \n\n[This assumes you  have installed the packages from the [Starting R](quickstart-startup.qmd#installing-packages-for-this-course) chapter. Go back and do that now if you skipped it. That step has to be done only once on each computer you use.]{.small}\n\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| label: setup\n#| message: false\n\nlibrary(tidyverse)              \nlibrary(janitor)                \nlibrary(lubridate)   \n```\n````\n:::\n\n\nThis is a common first code chunk. The first option at the top names it \"setup\", which tells it to run this code chunk before it does anything else. The second option suppresses some very annoying messages.\n\nThis code chunk activates three packages using the `library()` function. You have to invoke packages you want to use in each document, even though you only have to install them on your computer once.\n\nHere's what your page might look like after playing the first code chunk (visual mode):\n\n::: column-page-right\n![after running first chunk](assets/images/r-import-firstchunkrun.png){width=\"90%\"}\n::: \n\nDon't worry about any messages that came out after you ran the first chunk -- they simply show you some information about what is in the libraries you just loaded. They might even be [red]{style=\"color: red;\"}!\n\n## Import the Hot 100 data file\n\nTo \"import\" data means to pour outside data into an R data frame, which is an R object that contains columns and rows, just like a spreadsheet. \n\nSome people call this \"reading\" or \"loading\" data. This file is a CSV file, which stands for \"comma-separated values\". Some other forms are shown in [Appendix C: File Types in the Wild](appendix-filetypes.qmd)\n\nWhen you import the file, R will guess what each column is -- text (\"chr\"), numbers (\"num\" \"), and date or date/time (\"date\" or \"POSIX\" in R).\n\n(From now on, you'll just see the R code that goes inside a code chunk you create, not the part with the backticks and brackets.)\n\n::: callout-dothis\n1.  Create a new code chunk using the Insert Chunk button ![](assets/images/r-start-insert-chunk-button.png) at the top right of your document, or using the keyboard shortcut {{< kbd mac=command-option-I win=Control-Alt-I >}}.\n\n2.  Use the clipboard icon below to copy the code and paste into your code chunk. You might not be able to see the full name of the web address, but it's there.\n\n3.  Press the Play button or use the keyboard shortcut {{< kbd control-shift-Return  >}} to run the code chunk.\n:::\n\n\n\nClick on the numbers underneath the code chunk to highlight each row with an explanation of what it does:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntop100 <-    #<1>\n  read_csv(   #<2>\n    \"https://raw.githubusercontent.com/utdata/rwd-billboard-data/main/data-out/hot100_assignment.csv\"  #<3>\n    )         #<4>\n```\n:::\n\n\n1.  Create a new object in R called `top100` using the assignment operator `<-`\n2.  Start the function `read_csv()`...\n3.  to access a comma-separated data file stored in Prof.McDonald's Github site. Use just the name of the file, in quotes, if it's already saved in your projects folder.\n4.  Don't forget to close your parentheses.\n\n\nAfter running the code chunk, you should see something like this:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stderr}\n```\nRows: 341300 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): CHART WEEK, TITLE, PERFORMER\ndbl (4): THIS WEEK, LAST WEEK, PEAK POS., WKS ON CHART\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n\nSo R found:\n\n-   341,100 rows (or records, or observations).\n-   7 columns ,\n-   3 of which it thinks are character types, and 4 that it thinks should be numbers.\n-   It named the columns using the first row of the file.\n\nThis method of reading a file accepts the default options for importing. You may need to override some of them at times, especially when R guesses your data types incorrectly.\n\n::: standout\nStop a minute and think about what you just did in one second -- you imported a dataset with MORE THAN a quarter of a MILLION rows without any complaint!\n:::\n\nThere is now a new object in your Enviornment tab, under \"Data\", called `top100`, with \"341,100 obs. of 7 variables\".\n\n### Import tips {.unlisted}\n\n::: callout-tip\n### Posit cheat sheets\n\nThe [\"Data import with the Tidyverse\" cheat sheet](https://raw.githubusercontent.com/rstudio/cheatsheets/main/data-import.pdf) goes through the details of importing data. You may need some help deciphering it until you get used reading reference instructions.\n:::\n\n::: callout-tip\n### Spreadsheets\n\nYou have to use different functions to import spreadsheet files.\n\nFor Excel, you would use the `readxl` library, which you have to activate at the top of the program.\n\nFor Google Sheets, you'd use the `googlesheets4` library, which is a little harder to use because of Google Drive permissions. For the time being, consider downloading your Google Sheet to a csv in your project folder.\n:::\n\n::: callout-tip\n### Default to character columns\n\nIf you're not sure about the data types of each column, use an option to import them all as text, or `character`, columns. Then you can fix them one by one. Text will (almost) never be a problem. The option looks like this:\n\n`read_csv( \"your file name or URL\", col_types=c(.default=\"c\") )`\n:::\n\n## Look at the data you imported\n\nThere are several ways to examine the data you just imported.\n\n### Check it in the environment tab\n\nThere's now an object listed in your Environment tab with a blue arrow. Expand it, and you'll see the column names and what types it found.\n\n![](assets/images/r-import-envtab.png)\n\n### Click on it to scroll, filter and sort\n\nTo browse the data, click on its name in the environment panel.\n\nAny filters or sorts that you do here won't last -- they're just on while you're glancing at the data. But this is useful just to get a little preview of what columns look like and to search for things you know should be there. This search is NOT case-sensitive, which is helpful when you want to get a handle on what's in your data.\n\n::: {.content-visible when-format=\"html\"}\n![](https://cronkitedata.s3.amazonaws.com/images/r-import-scrolldata.gif)\n:::\n\n### Use functions to examine the rows and columns\n\nBut these methods are no better (and really a little worse) than just viewing your data and clicking around in Excel or Google sheets. To share your view of the data and describe it to others, you must use R code.\n\nThere are a few standard ways to get a quick view of what's in your data using functions. First, you can look at the top and bottom of it using the `head()` and `tail()` functions. Try to guess what these mean:\n\n\n::: {.cell .column-body-outset-right}\n\n```{.r .cell-code}\nhead(top100)               #<1>\n\ntail(top100, n=10)         #<2>\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"CHART WEEK\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"THIS WEEK\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"TITLE\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"PERFORMER\"],\"name\":[4],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"LAST WEEK\"],\"name\":[5],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"PEAK POS.\"],\"name\":[6],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"WKS ON CHART\"],\"name\":[7],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"1/1/2022\",\"2\":\"1\",\"3\":\"All I Want For Christmas Is You\",\"4\":\"Mariah Carey\",\"5\":\"1\",\"6\":\"1\",\"7\":\"50\"},{\"1\":\"1/1/2022\",\"2\":\"2\",\"3\":\"Rockin' Around The Christmas Tree\",\"4\":\"Brenda Lee\",\"5\":\"2\",\"6\":\"2\",\"7\":\"44\"},{\"1\":\"1/1/2022\",\"2\":\"3\",\"3\":\"Jingle Bell Rock\",\"4\":\"Bobby Helms\",\"5\":\"4\",\"6\":\"3\",\"7\":\"41\"},{\"1\":\"1/1/2022\",\"2\":\"4\",\"3\":\"A Holly Jolly Christmas\",\"4\":\"Burl Ives\",\"5\":\"5\",\"6\":\"4\",\"7\":\"25\"},{\"1\":\"1/1/2022\",\"2\":\"5\",\"3\":\"Easy On Me\",\"4\":\"Adele\",\"5\":\"3\",\"6\":\"1\",\"7\":\"11\"},{\"1\":\"1/1/2022\",\"2\":\"6\",\"3\":\"It's The Most Wonderful Time Of The Year\",\"4\":\"Andy Williams\",\"5\":\"7\",\"6\":\"5\",\"7\":\"26\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div><div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"CHART WEEK\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"THIS WEEK\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"TITLE\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"PERFORMER\"],\"name\":[4],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"LAST WEEK\"],\"name\":[5],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"PEAK POS.\"],\"name\":[6],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"WKS ON CHART\"],\"name\":[7],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"11/13/2021\",\"2\":\"91\",\"3\":\"Ya Superame (En Vivo Desde Culiacan, Sinaloa)\",\"4\":\"Grupo Firme\",\"5\":\"92\",\"6\":\"91\",\"7\":\"3\"},{\"1\":\"11/13/2021\",\"2\":\"92\",\"3\":\"Who's In Your Head\",\"4\":\"Jonas Brothers\",\"5\":\"93\",\"6\":\"92\",\"7\":\"4\"},{\"1\":\"11/13/2021\",\"2\":\"93\",\"3\":\"Money\",\"4\":\"Lisa\",\"5\":\"90\",\"6\":\"90\",\"7\":\"2\"},{\"1\":\"11/13/2021\",\"2\":\"94\",\"3\":\"Come Through\",\"4\":\"H.E.R. Featuring Chris Brown\",\"5\":\"99\",\"6\":\"64\",\"7\":\"17\"},{\"1\":\"11/13/2021\",\"2\":\"95\",\"3\":\"WFM\",\"4\":\"RealestK\",\"5\":\"78\",\"6\":\"67\",\"7\":\"4\"},{\"1\":\"11/13/2021\",\"2\":\"96\",\"3\":\"Lets Go Brandon\",\"4\":\"Loza Alexander\",\"5\":\"38\",\"6\":\"38\",\"7\":\"3\"},{\"1\":\"11/13/2021\",\"2\":\"97\",\"3\":\"Just About Over You\",\"4\":\"Priscilla Block\",\"5\":\"95\",\"6\":\"95\",\"7\":\"4\"},{\"1\":\"11/13/2021\",\"2\":\"98\",\"3\":\"To Be Loved By You\",\"4\":\"Parker McCollum\",\"5\":\"96\",\"6\":\"96\",\"7\":\"2\"},{\"1\":\"11/13/2021\",\"2\":\"99\",\"3\":\"Let's Go Brandon\",\"4\":\"Bryson Gray Featuring Tyson James & Chandler Crump\",\"5\":\"28\",\"6\":\"28\",\"7\":\"2\"},{\"1\":\"11/13/2021\",\"2\":\"100\",\"3\":\"Ghost Town\",\"4\":\"Benson Boone\",\"5\":\"NA\",\"6\":\"100\",\"7\":\"1\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\nUse the little arrow at the top right of the listing to look at columns that don't fit on the page.\n\nThis list isn't in chronological order-- it's just showing happened to be on the top and bottom of the original file.\n\nOr, you can look at a list of columns along with their types and a few examples from the top of the file using the `glimpse()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(top100)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 341,300\nColumns: 7\n$ `CHART WEEK`   <chr> \"1/1/2022\", \"1/1/2022\", \"1/1/2022\", \"1/1/2022\", \"1/1/20…\n$ `THIS WEEK`    <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, …\n$ TITLE          <chr> \"All I Want For Christmas Is You\", \"Rockin' Around The …\n$ PERFORMER      <chr> \"Mariah Carey\", \"Brenda Lee\", \"Bobby Helms\", \"Burl Ives…\n$ `LAST WEEK`    <dbl> 1, 2, 4, 5, 3, 7, 9, 11, 6, 13, 15, 17, 18, 0, 8, 25, 1…\n$ `PEAK POS.`    <dbl> 1, 2, 3, 4, 1, 5, 7, 6, 1, 10, 11, 8, 12, 14, 7, 16, 12…\n$ `WKS ON CHART` <dbl> 50, 44, 41, 25, 11, 26, 24, 19, 24, 15, 31, 18, 14, 1, …\n```\n:::\n:::\n\n\nHere, you might notice that the names of some of the columns have back-ticks around them. That's because they don't follow our rules for column names -- they should be lower case, with no spaces or special characters.\n\n\n## Introducing the pipe\n\nYou'll often use code in this format: \n\n```         \n  data_set_name |>\n     verb (  ) |>\n     verb (  ) |>\n     etc...\n```\n\nThat little symbol, `|>` is called the \"pipe\". It means \"Take what is on this line, and use it to do the next thing\"  You can use the shortcut keys {{< kbd Command-Shift-M >}} instead of typing it out.\n\n\n::: {.border .border-primary}\n![](assets/images/r-firstprog-pipenewbies.png){width=\"60%\"} ![](assets/images/r-firstprog-rladies.png){width=\"80%\"}\n::: \n\n[(The pipe character changed a little in recent years;  `%>%` is largely the same as `|>` )]{.small}\n\n\nUsing a pipe can help make your code easier to read and write by separating each step into its own command. \n\nFor example, `glimpse(top100)` does the same thing as `top100 |> glimpse()`. The second version tells R, \"Start with the top100 data frame **and then** glimpse it.  I try to separate as much as is reasonable into steps because I can then troubleshoot problems one line at a time.\n\n::: callout-dothis\n1. Add a code chunk that you'll edit to clean the column names and fix the dates the data.\n2. Copy and paste the code below\n\n::: \n\n\n::: {.cell}\n\n```{.r .cell-code}\ntop100 |>                 #<1>\n  clean_names()  |>       #<2>\n  glimpse()               #<3>\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 341,300\nColumns: 7\n$ chart_week   <chr> \"1/1/2022\", \"1/1/2022\", \"1/1/2022\", \"1/1/2022\", \"1/1/2022…\n$ this_week    <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17…\n$ title        <chr> \"All I Want For Christmas Is You\", \"Rockin' Around The Ch…\n$ performer    <chr> \"Mariah Carey\", \"Brenda Lee\", \"Bobby Helms\", \"Burl Ives\",…\n$ last_week    <dbl> 1, 2, 4, 5, 3, 7, 9, 11, 6, 13, 15, 17, 18, 0, 8, 25, 19,…\n$ peak_pos     <dbl> 1, 2, 3, 4, 1, 5, 7, 6, 1, 10, 11, 8, 12, 14, 7, 16, 12, …\n$ wks_on_chart <dbl> 50, 44, 41, 25, 11, 26, 24, 19, 24, 15, 31, 18, 14, 1, 49…\n```\n:::\n:::\n\n\n1. Start with the `top100` data frame that we saved earlier, and then\n2. Use a function called `clean_names()` to convert them to computer-friendly names that won't require special handling, and then\n3. Take a look at it!\n\n::: callout-warning\n###  `|>` not `<-` \nDon't confuse the pipe (`|>`) with the assignment operator (`<-`). The pipe says, \"keep going\". The assignment operator says, \"save this for later\" .\n:::\n\n## Cleaning up and save for later\n\nThis section gives you a little taste of the key verbs you'll be using throughout this class: \n\n-   `select`, which picks and rearranges columns  \n-   `mutate`, which lets you create new columns out of old ones.  \n\nThe code chunk also uses function called `mdy()`, which stands for \"month-day-year\", which in turn tells R that the character `chart_week` column starts out in that format, as opposed to year-month-day or something else.\n\n::: callout-dothis\n\nTry typing this code chunk into your document instead of copying and pasting. You won't see anything come out of this when you run it. Instead, it's saved as new object in your Environment tab. \n\n::: \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntop100_clean <-                                                #<1> \n  top100 |>\n  clean_names () |>  \n  mutate ( chart_date = mdy(chart_week)) |>                    #<2> \n  select ( chart_date, title, performer, this_week, last_week, #<3>\n           wks_on_chart, peak_pos)                             #<3>\n```\n:::\n\n1. Create a new data frame using the assignment operator out of what follows. Leave off this row until you know the rest works.\n2. Use the function `mdy`, which converts text in the form of month-day-year into true dates, to transform the chart week into a date variable called `chart_date`.\n3. Pick out the columns to save in the order you want to see them.\n\n\n## Check your work and save\n\n::: callout-dothis\n1. Check your data by \"glimpsing\" it:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntop100_clean |> \n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 341,300\nColumns: 7\n$ chart_date   <date> 2022-01-01, 2022-01-01, 2022-01-01, 2022-01-01, 2022-01-…\n$ title        <chr> \"All I Want For Christmas Is You\", \"Rockin' Around The Ch…\n$ performer    <chr> \"Mariah Carey\", \"Brenda Lee\", \"Bobby Helms\", \"Burl Ives\",…\n$ this_week    <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17…\n$ last_week    <dbl> 1, 2, 4, 5, 3, 7, 9, 11, 6, 13, 15, 17, 18, 0, 8, 25, 19,…\n$ wks_on_chart <dbl> 50, 44, 41, 25, 11, 26, 24, 19, 24, 15, 31, 18, 14, 1, 49…\n$ peak_pos     <dbl> 1, 2, 3, 4, 1, 5, 7, 6, 1, 10, 11, 8, 12, 14, 7, 16, 12, …\n```\n:::\n:::\n\n\nNote the new data type for the chart_date, and the order of the columns along with the clean names.\n\n2. Now save your data as an R data file (called an \"RDS\" file) like this: \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsaveRDS(top100_clean, file=\"hit100.RDS\")\n```\n:::\n\n\n\n3. Try to process your Quarto document into a self-contained HTML page by pressing the Render button at the top of the document.  You might get some errors -- that's ok for now. You've already done a lot.\n\n::: \n\nYou'll see how to load data that starts as an R data file in the next chapter.\n\n\n## What we did\n\n1.  Created a new Quarto document and added the packages (libraries) we plan to use.\n2.  Imported a comma-separated text file from the web into a data frame object called `top100`.\n3.  Took a look at it in several different ways.\n4.  Created a second data frame from the first, with names and dates fixed, with only some columns picked out and displayed in a new order.\n5.  Saved it into the project for use in another program.\n\n### What you should do next {.unnumbered}\n\nBefore you put away your Quarto file, remember the principles of scripted data and documentation. Take a few minutes to clean up and document your work by narrating each step, including: \n\n-   Sub-headings for each of the steps\n-   Introductory text describing what you are about to do\n-   Maybe: Some text after the chunks that describe meaningful output or things you notice about the result.\n\nIf you're stuck, you can [use the template I created](https://cronkitedata.s3.amazonaws.com/markdown_templates/01-top100.Rmd) as a starting point.\n\n\n\n## And breathe {.unnumbered}\n\nYou've now created a full, working R program in Quarto format that can serve as a model for everything you do in the future.  Congratulate yourself and take a break!\n\n![Max van den Oetelaar via Unsplash](assets/images/r-firstprog-breathe.jpg){width=\"80%\"}\n\n",
    "supporting": [
      "quickstart-data-import_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}