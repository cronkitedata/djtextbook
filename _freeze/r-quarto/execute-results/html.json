{
  "hash": "19715f9382d66e98420b107141edd175",
  "result": {
    "markdown": "---\nexecute: \n  echo: fenced\n  include: true\n---\n\n\n# Using Quarto {#r-quarto}\n\nAll of the work we do using R will be written using Quarto, the new implementation of what used to be called \"R Markdown\".\n\n::: {.alert .alert-secondary}\n::: {.alert-heading .font-weight-bolder .fs-3}\nIn this chapter:\n:::\n\n-   Create and use projects to hold all of your files in an organized way\n-   Understand the structure of a Quarto document\n-   Set the \"front matter\" or YAML for the page.\n-   Add an image to your page\n-   Insert your first code chunk and run some R code\n-   Render your document - you can do it as often as you want to see drafts.\n:::\n\nI suggest that, beginning with this chapter, you start collecting code examples that you can save in a document with a description of what they mean in your own words. This reference document can be anywhere -- a Google Doc, a Quarto doc, or anywhere else. You won't be running that code, but you'll have something you can copy and paste that exemplifies how you think of it.\n\n## R projects\n\nOne of the things that trips up new users of R is that it's hard to tell the program where to find things on your computer. The \"working directory\" can be confusing.\n\nWe'll be working entirely in projects in this course. Projects keep everything needed together so that they can run on almost any machine.\n\n::: {.alert .alert-success .alert-dothis}\nCreate a new project by hitting the second green + sign at the top left of your screen, or choose `File` -\\> `New Project`.\n\nWhen prompted, create a new directory **within** your course folder called `rlessons-01`[^r-quarto-1]\n:::\n\n[^r-quarto-1]: The image below has a different names for the folder and project. Use `rlessons-01` as your project folder within `maij-working`\n\n::: {.content-visible when-format=\"html\"}\n![new project](https://cronkitedata.s3.amazonaws.com/images/r-start-newproject.gif)\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n![new project](assets/images/r-start-newproject.png)\n:::\n\nThis creates a file with the extension `.RProj` in the folder you designate. From now on, you can open the project by double-clinking on that file, or by using the drop-down menu at the upper right of your RStudio screen.\n\n## Hello, Quarto[^r-quarto-2]\n\n[^r-quarto-2]: The title borrowed from Quarto's own documentation\n\n::: callout-warning\n### Make sure Quarto is installed!\n\nTo use Quarto, you must have it installed on your computer. One easy way to do that is to install the `quarto` and `rmarkdown` packages in R, which you did at the [end of the last chapter](r-start.qmd#packages). Do that now if you skipped that step.\n:::\n\nQuarto is a document format that lets you combine your writing, images, computer code and its results into complete documents. We'll only be using Quarto for R using RStudio, but it also works in other languages such as Python and Javascript. Once you know how to use it in one context, it will work in other contexts.\n\nCreating documents with Quarto lets you ditch those tiresome data diaries.\n\nGenerally, you write your document around chunks of R code, which integrates your analysis with your writing. Some news organizations do much of their internal work using Quarto and its predecessor, RMarkdown.\n\n\n```{=html}\n<!--- \n:::{.alert .alert-info .opacity-2}\nShannon Pileggi [created a series of gifs](https://www.pipinghotdata.com/posts/2020-09-07-introducing-the-rstudio-ide-and-r-quarto/) that illustrate some of the nuances of the RStudio interface -- look there for illustrations on customizing your windows and troubleshooting documents as we move forward. A lot of it has to do with R Markdown documents. \n::: \n-->\n```\n\n::: callout-note\n### Quarto is modern RMarkdown\n\nMany help pages and tutorials in R use the format called \"R Markdown\" instead of Quarto. Quarto was introduced in mid-2022 as a replacement for RMarkdown, and it seems silly to learn something that is already out of date.\n\nQuarto files end with the extension `.qmd`. RMarkdown end with the extension `.Rmd`. Both will work in RStudio, but the \"Render\" button becomes \"Knit\" in RMarkdown. The only substantive difference is in the part between the three dashes at the top.\n:::\n\n### The structure of a Quarto document\n\nThere are four parts to a Quarto document:\n\n1.  Narrative and document features using markdown, including headlines, subheads, images and other elements you'd normally see on a web page. You don't have to write in HTML --- Quarto writes it for you.\n2.  The \"front matter\", or YAML, instructions for the entire document.\n3.  Code chunks -- your R computer code. This is the part that would go inside the R Scripts that you learned about in the last chapter's video.\n4.  The results of code chunks - what you get back when you execute the code, including charts, graphs, tables and maps.\n\n### Markdown, an editing language {.unnumbered}\n\nQuarto is based on markdown[^r-quarto-3], which was invented as an easy way for early Wikepedia editors, who were used to text editors like Word, to write simple documents that would automatically be rendered into the more complicated HTML of the web.\n\n[^r-quarto-3]: <https://en.wikipedia.org/wiki/Markdown>\n\n::: {.alert .alert-success .alert-dothis}\nReview the first five sections of the [markdown basics](https://quarto.org/docs/authoring/markdown-basics.html) instructions from Quarto, paying attention to:\n\n-   [Text formatting](https://quarto.org/docs/authoring/markdown-basics.html#text-formatting), like bold and italic\n-   [Links](https://quarto.org/docs/authoring/markdown-basics.html#links-images)\n-   [Headings](https://quarto.org/docs/authoring/markdown-basics.html#headings)\n-   [Lists](https://quarto.org/docs/authoring/markdown-basics.html#lists) (ordered and unordered)\n-   Optional: [Tables](https://quarto.org/docs/authoring/markdown-basics.html#tables)\n\nWe probably won't use anything below the Tables section in this class.\n:::\n\n### Front matter / YAML at the top {#frontmatter .unnumbered}\n\nThe way the R knows how to process the page is by reading the very top of the file and looking at the section between three dashes. This is called \"front matter\", and it's extremely picky about indentations and the exact words you use.\n\nThe default setup is very basic. You can use options in this front matter to make it look a little more polished. Here is some code you can use instead of the default to make it look a little better, add a table of contents, and allow your readers to download the underlying code. It also embeds all of the images and data you use in your page in the final output so that you can share your html page through email without copying those external items.[^r-quarto-4]\n\n[^r-quarto-4]: Beware: This can result in large files, sometimes too large for email systems.\n\n``` yaml\n---\ntitle: \"A title for your page\"\nauthor: \"Your name\"\nformat: \n  html: \n    theme: cosmos\n    embed-resources: true\n    toc: true\n    code-tools: true\n    page-layout: full\n    df-print: paged\n---\n```\n\n### Including R code and its results\n\nSo far, nothing is different from a simple Google doc or Word document -- there is no computer code or data involved. But the value of Quarto is that it allows you to mix your analysis with your writing in one place.\n\nYou'll do that through `code chunks` -- little snippets of working code that you insert within your narrative which, when processed, will also include the results.\n\nTo insert a code chunk:\n\n-   Use the +C button on the top right of your screen. ( ![](assets/images/r-quarto-insertchunk.png){width=\"25\" height=\"16\"})\n-   Use the keyboard shortcut CMD/CTL-OPT/ALT-i\n\n::: {.content-visible when-format=\"html\"}\n![](https://cronkitedata.s3.amazonaws.com/images/r-quarto-insertcode.gif)\n:::\n\nThe following code chunk creates a new variable called `my_variable`, another called `my_name`, then prints out the value stored in the `my_name` one. Copying it into your document will create a code chunk for you.\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n# A hashtag here means the line is a \"comment\". R will ignore it.. \n# Anything between ```{r} at the beginning and ``` at the end is the code chunk. \n\n\n# create two new variables here\nmy_variable <- 13\nmy_name <- \"Sarah\"\n\n#now print out the one called my_name\nmy_name\n\n# this is the end of the code chunk\n```\n````\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Sarah\"\n```\n:::\n:::\n\n\nThis might not seem like much, but think about how it helps you do your analysis. You can write all of your notes right where you do the work. You don't have to copy and paste information from one place to another, or share out-of-date spreadsheets with your teammates.\n\n### Rendering a document\n\nThe document remains in markdown format until you render it. There are several ways to do that, most easily by pressing the \"Render\" button at the top of the page.\n\n::: grid\n::: g-col-8\nWhen that button is pushed, Quarto converts your document to an HTML document that can be shared or published. It will be listed as a new file in your project:\n:::\n\n::: g-col-4\n![rendered files](assets/images/r-quarto-firstquarto.png){width=\"3in\"}\n:::\n:::\n\n### Quarto starts from scratch {.unnumbered}\n\nYou may have worked in a document for a while and saved a bunch of items in your environment.\n\nQuarto doesn't care!\n\nEvery time it creates your document, it starts from a clean environment --- everything you use must be created in the program itself, either by loading a package, importing some data, or doing some analysis. We'll go through that later, but one good practice is to periodically clear your environment and run all of the code chunks from the top to make sure they don't depend on anything else. You'll do this in the walkthrough.\n\n### Source vs. Visual modes\n\nRStudio lets you use what it calls \"Visual\" mode to hide the markdown code for you, and present you with a draft of what your document may look like. It also uses point-and-click methods to insert images and headings and other elements. For now, we should use the \"Source\" mode, which may not be the default for your machine. Later on it will be fine to switch back and forth, but the visual mode doesn't work very well with the results of your commands so it's worth understanding a little about what is going on behind the scenes.\n\n::: callout-note\n### Switching to Source mode\n\nRStudio usually creates a Quarto document in \"Visual\" mode, which hides the underlying coding from you and allows you to use point-and-click menus to structure your document.\n\nThis tutorial will have you switch to \"Source\" mode so that you can see the underlying structure.\n\n![](assets/images/r-quarto-source-visual.png)\n\nIn practice, visual mode makes data tables look all squished and difficult to navigate until you've rendered them. This is something we do a lot, so I end up working in the source document pretty frequently.\n\nYou can set up RStudio to default to source mode by changing the global options under Tools -\\> Global Options , then look for R Markdown, and the Visual tab.\n:::\n\n## Walkthrough - your first document\n\n::: {.alert .alert-success .alert-dothis}\nPractice by creating a new document with three things about yourself in a list, a picture of an animal you love or some other image you like, and a code chunk.\n:::\n\nHere are the steps:\n\n-   Find an image of your favorite animal or another image you like, and save it in the project folder that you created above.\n-   Open RStudio, and open the project through the verty top right corner of your screen or through the file menu\n-   Create a new Quarto document.\n-   Switch to Source mode from Visual mode .\n-   Delete the entire default entry, including the front matter.\n-   Copy the [code above](#frontmatter) to the very top of the page. Don't leave any blank lines above it.\n-   Save the new Quarto document using the name `yourlastname-firstquarto`\n-   The area below the three dashes is your document. In it, create:\n    -   A subhed introducing a subtopic, called \"About me\"\n    -   Within that heading, a list of three things about yourself or about a topic you love, in an unordered (bulleted) list.\n    -   Another subhed , called \"An image I love\", with some text below it describing why you love it\n    -   The image that you saved into your project folder\n    -   Another subhed called \"Some R code\"\n    -   A code chunk, in which you create a variable , assign it a value, and then print it out.\n-   Save your work\n-   Render the document to a final html file. (Rendering automatically saves, but it's good practice to do it yourself.)\n\n### Example document\n\nYou can look at the [original Quarto code](https://cronkitedata.s3.amazonaws.com/markdown_templates/cohens-firstquarto.qmd) and the [rendered document](https://cronkitedata.s3.amazonaws.com/markdown_templates/cohens-firstquarto.html), but remember that if you were doing this yourself, you'd have to have the image saved in the same folder as your project.\n\n![](assets/images/r-quarto-first-moose.png){width=\"100%\"}\n\nThere are several reasons it might not work:\n\n1.  You haven't saved the document yet.\n2.  There is an error in that top YAML section. Copy the code above and try again. It's really picky.\n3.  There is an error in your R code.\n4.  Everything's too smushed together. Give your document room to breathe by inserting blank lines between elements. When you first get started, switching to Visual mode will help you figure out where you might have gone wrong.\n\n## Other resources {#quarto-resources}\n\n-   [Quarto's Getting Started guide](https://quarto.org/docs/get-started/hello/rstudio.html)\n-   [Heiss's video on R Markdown](https://youtu.be/fT5xI1cmE2c), which is very similar to Quarto. (13 minutes). It's great about showing you the glitches you might run into. The differences between Quarto and RMarkdown are :\n    -   The `output: html_document` line should be `format: html`\n    -   The name of the file ends with .qmd, not .Rmd\n    -   The \"knit\" button is really a \"render\" button.\n",
    "supporting": [
      "r-quarto_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}