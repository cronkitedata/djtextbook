{
  "hash": "1ab9d149a3a8b97a02addbf8f3b180e9",
  "result": {
    "markdown": "# Verbs in depth: New from old data with Mutate {#r-verb-mutate}\n\nThis continues the work using Arizona Paycheck Protection Program loans. Full documentation of the dataset is in the [Appendix](appendix-ppp.html).\n\n\n\n\n\n::: callout-dothis\nTo follow along, open your PPP project and create a new Quarto document with [the usual front matter and setup chunk](https://gist.github.com/sarahcnyt/e60ad2d7ccf65498fc88791f3bb683ae). \n\nLoad the data into your environment using this code chunk:\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nppp_orig <- \n  readRDS( \n   url ( \n     \"https://cronkitedata.s3.amazonaws.com/rdata/ppp_az_loans.RDS\"\n       )\n   )\n```\n:::\n\n\n## `mutate` to create new columns\n\nUse the verb `mutate` whenever you want to create or change existing columns in your data.\n\nExamples of this include:\n\n-   Computing difference between numbers in two columns\n-   Replacing `NA` values with \"Unknown\" or zero.\n-   Collapsing or creating categories for more meaningful analysis\n\nYou will often use a combination of filtering and mutating to create a new data frame using the `<-` assignment to use in future code chunks. That's because they can get complex, and you don't want to repeat code that you might have to change over and over.\n\n::: callout-warning\nThis chapter assumes you have gone through the [filtering](r-verb-filter.qmd) chapter. Many of the expressions and functions are the same, so if they don't look familiar to you, consider reviewing that chapter (again) first.\n:::\n\n`mutate` uses the syntax:\n\n        mutate ( new_column_name = function (arguments))\n\nThat's pretty abstract, so we'll do this using examples.\n\n## Math on columns\n\nHere's an example of computing the portion of the original amount that was forgiven. \n\nUse the single \"=\" sign to provide a name for the new column and create more than one new column using a comma between them:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nppp_orig |>\n    select ( borrower_name, borrower_city, amount, forgiveness_amount) |>   #<1>\n    mutate ( forgiven_pct = \n               ( forgiveness_amount  /  amount )  * 100              #<2> \n            )   |>                   \n  sample_n (50)                                                                #<3> \n```\n:::\n\n1. Pick out a few columns to work with\n2. Compute a new column using math\n3. Print out a random sample of 50 rows \n\n::: callout-note\nA value over 100 means that the government also waived fees and interest; a value under 100 means that less than all of the loan was forgiven.\n::: \n\n::: {.content-visible when-format=\"html\"}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"reactable html-widget html-fill-item\" id=\"htmlwidget-0706d2f34ec79048f543\" style=\"width:auto;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-0706d2f34ec79048f543\">{\"x\":{\"tag\":{\"name\":\"Reactable\",\"attribs\":{\"data\":{\"borrower_name\":[\"SKMC LLC\",\"DOWNTOWN TEMPE AUTHORITY INC\",\"SU VINO WINERY SCOTTSDALE INC\",\"KAREN KAMM\",\"DCS CONCRETE LLC\",\"QUINCY DAVIS\",\"EAST VALLEY PHYSICIANS GROUP PLLC DBA S OUTHWEST CHIROMED\",\"FERNANDO BECERRA\",\"DYNAMIC DIESEL REPAIR INC\",\"RAINFALL ENTERPRISES LLC\",\"KAREN L CLEM\",\"ALYCIA STARK\",\"MADDEN INDUSTRIES INC\",\"YULIET ELIZAGARAY GELABERT\",\"YEN THI PHAN\",\"FORESIGHT PICTURES LLC\",\"IAN DEGRASSE\",\"RESTORATION MEDICINE LLC\",\"MENDOZA MENDOZA LTD\",\"LUMENTECH WINDOW DOOR SYSTEMS LTD\",\"ZAYTUNI LLC\",\"MARK W LISCHWE PC\",\"SEVILLE CLEANERS INCORPORATED\",\"GENTLE DENTAL ARTS LLC\",\"AZ ICE PEORIA LLC\",\"AUDIO VIDEO NETWORKS\",\"ERWIS BRITO CORDERO\",\"AESTHETIC FAMILY DENTAL CARE PLC\",\"BM COMPUTERTYPEWRITER INC\",\"STOR STARK FILMWORKS INC\",\"RENCO LLC\",\"STAY OFF THE ROOF PHOENIX LLC\",\"STACEY GAST\",\"DONALD HUNSAKER\",\"EDWIN HUDSON\",\"JOSHUA MURANY\",\"VERNON JOHNSON\",\"JACOB NAVARRO\",\"ISABEL BELLOT MD PEDIATRICTION\",\"RYDER REFRIGERATION SERVICES LLC\",\"ROCHELLE ROMERO\",\"RANDOLPH TURNER\",\"CREATIVE IMPACT INC\",\"LIDIA POLLATO HERNANDEZ\",\"MINGS PAGODA\",\"DYNAMITE TOY HAULERS DBA DUNE SPORT\",\"DEVON NGUYEN\",\"JOHN ZACHER\",\"DUNG TA\",\"INTERWEALTH MANAGEMENT\"],\"borrower_city\":[\"Benson\",\"Tempe\",\"Scottsdale\",\"Mesa\",\"Chandler\",\"Phoenix\",\"Mesa\",\"Tucson\",\"Phoenix\",\"Phoenix\",\"Willcox\",\"Gilbert\",\"Anthem\",\"Glendale\",\"Surprise\",\"Glendale\",\"Gilbert\",\"Phoenix\",\"Phoenix\",\"Phoenix\",\"Phoenix\",\"Mesa\",\"Scottsdale\",\"Phoenix\",\"Peoria\",\"Phoenix\",\"Phoenix\",\"Mesa\",\"Tempe\",\"Scottsdale\",\"Phoenix\",\"Phoenix\",\"Mesa\",\"Phoenix\",\"Gold Canyon\",\"Sahuarita\",\"Stanfield\",\"Phoenix\",\"Yuma\",\"San Tan Valley\",\"Gilbert\",\"Phoenix\",\"Phoenix\",\"Phoenix\",\"Phoenix\",\"Mesa\",\"Chandler\",\"Lakeside\",\"Phoenix\",\"Scottsdale\"],\"amount\":[188345,317193,15620,10855,156000,20416,150000,20832,182675,62500,8436,20407,9500,20344,5652,777,2695.21,14250,46152,20602,218300,8619,132900,50437,142700,18979,11100,185500,3657,20700,1015376,35100,11462,4405,1825,3834.68,20833,7708,32800,21893.99,1513,20207,96238.85,20388,17291.9,101267,7926.23,6800,17317,47082],\"forgiveness_amount\":[189496,318549.88,15784.01,10881.23,157248,20484.8,151625.17,21000.37,183811.64,\"NA\",8493.18,20496.46,9581.21,20399.95,5719.67,779.68,2713.52,\"NA\",46526.34,20767.38,220331.4,8674.31,133941.94,50932.66,144004.12,18942.12,11135.58,187344.84,\"NA\",21042.7,1023193,35354.47,11515.81,4440,1842.75,3862.73,20940.3,7737.35,28964.8,\"NA\",1531.45,\"NA\",97364.71,\"NA\",17472.98,102038.29,7953.16,6892.41,17426.12,47711.07],\"forgiven_pct\":[1.00611112585946,1.00427777409968,1.0105,1.00241639797328,1.008,1.00336990595611,1.01083446666667,1.00808227726574,1.00622219789243,\"NA\",1.00677809388336,1.00438378987602,1.00854842105263,1.00275019661817,1.01197275300778,1.00344916344916,1.00679353371351,\"NA\",1.00811102444098,1.00802737598291,1.00930554283097,1.00641721777468,1.00784003009782,1.00982730931657,1.00913889278206,0.998056799620633,1.00320540540541,1.00994522911051,\"NA\",1.01655555555556,1.00769862592774,1.00724985754986,1.00469464316873,1.00794551645857,1.00972602739726,1.00731482157572,1.00515048240772,1.00380773222626,0.883073170731707,\"NA\",1.01219431592862,\"NA\",1.01169860196792,\"NA\",1.01047195507723,1.00761640020935,1.00339757993397,1.01358970588235,1.00630132239995,1.01336115713011]},\"columns\":[{\"id\":\"borrower_name\",\"name\":\"borrower_name\",\"type\":\"character\",\"format\":{\"cell\":{\"digits\":0,\"separators\":true,\"currency\":\"USD\"},\"aggregated\":{\"digits\":0,\"separators\":true,\"currency\":\"USD\"}},\"na\":\"NA\"},{\"id\":\"borrower_city\",\"name\":\"borrower_city\",\"type\":\"character\",\"format\":{\"cell\":{\"digits\":0,\"separators\":true,\"currency\":\"USD\"},\"aggregated\":{\"digits\":0,\"separators\":true,\"currency\":\"USD\"}},\"na\":\"NA\"},{\"id\":\"amount\",\"name\":\"amount\",\"type\":\"numeric\",\"format\":{\"cell\":{\"digits\":0,\"separators\":true,\"currency\":\"USD\"},\"aggregated\":{\"digits\":0,\"separators\":true,\"currency\":\"USD\"}},\"na\":\"NA\"},{\"id\":\"forgiveness_amount\",\"name\":\"forgiveness_amount\",\"type\":\"numeric\",\"format\":{\"cell\":{\"digits\":0,\"separators\":true,\"currency\":\"USD\"},\"aggregated\":{\"digits\":0,\"separators\":true,\"currency\":\"USD\"}},\"na\":\"NA\"},{\"id\":\"forgiven_pct\",\"name\":\"forgiven_pct\",\"type\":\"numeric\",\"format\":{\"cell\":{\"digits\":1,\"percent\":true},\"aggregated\":{\"digits\":1,\"percent\":true}},\"na\":\"NA\"}],\"defaultPageSize\":5,\"dataKey\":\"6f25ed08a22cd361830f9ca2f7bb7b9e\"},\"children\":[]},\"class\":\"reactR_markup\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n(I did some fancy formatting so you could read the results more clearly. We'll come back to that in a later lesson.)\n\n::: \n\n\n\n\n### Converting NA to 0\n\nIf you look through the pages, you'll realize that there are a lot of rows with `NA` instead of a value. That's because whenever you do anything with a missing value, the result is missing. Missing values infect everything they touch. You often have to deal with them before you can do anything else.\n\nWe would like to convert the forgiven amount from a missing value to zero, under the idea that if they have not filled it out, nothing has (yet) been forgiven. Of course, we'd have to check that with the SBA before publication.\n\nThere is a specific function used for that: `replace_na()`, with two arguments: The column you want to check for missing values, and the value you want to use instead. This isn't limited to numbers -- you can do the same thing with words, often replacing NA with \"Unknown\".\n\n\n::: {.cell}\n\n```{.r .cell-code}\nppp_forgiven_fixed <- \n  ppp_orig |>\n  mutate (amount_forgiven = replace_na(forgiveness_amount, 0))\n```\n:::\n\n\n(Note that nothing came out in this code chunk because the result was saved into a new data frame)\n\n### Detail and total with summary statistics\n\nYou can use `mutate` to put summary statistics next to your values so you can see whether or not they are similar to the average or median.^[If you skipped converting the `NA` values above, the answers will always come out as `NA`. ]\n\n\n::: {.cell}\n\n```{.r .cell-code}\nppp_forgiven_fixed |> \n  mutate ( avg_forgiven = mean(amount_forgiven), \n           median_forgiven = median(amount_forgiven)) |> \n  select (borrower_name, amount_forgiven, avg_forgiven, median_forgiven ) |> \n  head()\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"borrower_name\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"amount_forgiven\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"avg_forgiven\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"median_forgiven\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"SFE HOLDINGS LLC\",\"2\":\"10108219\",\"3\":\"69429.99\",\"4\":\"19631.99\"},{\"1\":\"NAVAJO TRIBAL UTILITY AUTHORITY\",\"2\":\"9882528\",\"3\":\"69429.99\",\"4\":\"19631.99\"},{\"1\":\"HOME HEALTH AGENCY ARIZONA LLC\",\"2\":\"10133389\",\"3\":\"69429.99\",\"4\":\"19631.99\"},{\"1\":\"ARIZONA COMMUNITY PHYSICIANS PC\",\"2\":\"10131667\",\"3\":\"69429.99\",\"4\":\"19631.99\"},{\"1\":\"NEXTIVA INC\",\"2\":\"10126027\",\"3\":\"69429.99\",\"4\":\"19631.99\"},{\"1\":\"MOUNTAIN PARK HEALTH CENTER\",\"2\":\"10142917\",\"3\":\"69429.99\",\"4\":\"19631.99\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n## Creating categories for easier analysis\n\nVery often, you'll want to categorize entries in a database in order to make it simpler to count and sum the values in a meaningful way. For example, the `business_type` column has 24 different values, including `NA` . Here's a list with the number of loans in each category:\n\n\n\n\n::: {.cell rows.print='25'}\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"business_type\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"# of rows\"],\"name\":[2],\"type\":[\"int\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"Limited  Liability Company(LLC)\",\"2\":\"57744\"},{\"1\":\"Sole Proprietorship\",\"2\":\"38726\"},{\"1\":\"Corporation\",\"2\":\"27871\"},{\"1\":\"Subchapter S Corporation\",\"2\":\"13777\"},{\"1\":\"Independent Contractors\",\"2\":\"13504\"},{\"1\":\"Self-Employed Individuals\",\"2\":\"10364\"},{\"1\":\"Non-Profit Organization\",\"2\":\"2673\"},{\"1\":\"Single Member LLC\",\"2\":\"1300\"},{\"1\":\"Partnership\",\"2\":\"1190\"},{\"1\":\"Limited Liability Partnership\",\"2\":\"1075\"},{\"1\":\"Professional Association\",\"2\":\"570\"},{\"1\":\"501(c)3 – Non Profit\",\"2\":\"155\"},{\"1\":\"501(c)6 – Non Profit Membership\",\"2\":\"62\"},{\"1\":\"NA\",\"2\":\"42\"},{\"1\":\"Cooperative\",\"2\":\"35\"},{\"1\":\"Trust\",\"2\":\"34\"},{\"1\":\"Qualified Joint-Venture (spouses)\",\"2\":\"32\"},{\"1\":\"Tenant in Common\",\"2\":\"32\"},{\"1\":\"Non-Profit Childcare Center\",\"2\":\"29\"},{\"1\":\"Joint Venture\",\"2\":\"21\"},{\"1\":\"Tribal Concerns\",\"2\":\"15\"},{\"1\":\"Employee Stock Ownership Plan(ESOP)\",\"2\":\"6\"},{\"1\":\"501(c)19 – Non Profit Veterans\",\"2\":\"1\"},{\"1\":\"Rollover as Business Start-Ups (ROB\",\"2\":\"1\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[25],\"max\":[25]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n### Yes-No categories using `if_else()`\n\nOne way to work with these is to create new columns with yes-no indicators for certain types of businesses like non-profits or individuals vs. companies.\n\nThe function to do this is `if_else()` , which tests a condition exactly the same way `filter` did, but then assigns a value based on whether it's met or not. You list the condition first, then a comma , then what should happen if the condition is true, and then what should happen if it's false.\n\nThe condition is done the same way you did it in a filter, but instead of picking out the rows that match, `mutate` acts on them separately from the rows that don't match.\n\nThere's no \"maybe\", except for NA's in the original value. Here's the general form of what it looks like:\n\n``` markdown\n\nnew_column_name = if_else ( test the old column for something as in a a filter,\n                         give it a value if it's true,\n                         give it another value if it's not true)\n```\n\nSo here is a way to do this with the business_type using the same %in% operator you used in the `filter` lesson, saving it to new data frame in your Environment, then displaying the first 10 types of businesses using `count()`\n\n#### Example 1: Two categories using exact conditions\n\n\n\n::: {.cell rows.print='10'}\n\n```{.r .cell-code}\nppp_category_indiv <- \n  ppp_forgiven_fixed |>\n  mutate ( is_individual = \n              if_else ( business_type %in% \n                          c(\"Independent Contractors\", \n                            \"Sole Proprietorship\", \n                            \"Self-Employed Individuals\", \n                            \"Single Member LLC\"), \n                 \"Individual\", \n                 \"Organization\")\n  )  \n```\n:::\n\n\n\n\n::: {.content-visible when-format=\"html\"}\nNow print off a sampling of a some of the rows to take a look:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nppp_category_indiv |> \n  select ( is_individual, business_type) |> \n  sample_n (50) \n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"is_individual\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"business_type\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"Individual\",\"2\":\"Independent Contractors\"},{\"1\":\"Organization\",\"2\":\"Limited  Liability Company(LLC)\"},{\"1\":\"Organization\",\"2\":\"Corporation\"},{\"1\":\"Organization\",\"2\":\"Limited  Liability Company(LLC)\"},{\"1\":\"Organization\",\"2\":\"Limited  Liability Company(LLC)\"},{\"1\":\"Organization\",\"2\":\"Non-Profit Organization\"},{\"1\":\"Individual\",\"2\":\"Sole Proprietorship\"},{\"1\":\"Organization\",\"2\":\"Limited  Liability Company(LLC)\"},{\"1\":\"Organization\",\"2\":\"Corporation\"},{\"1\":\"Individual\",\"2\":\"Sole Proprietorship\"},{\"1\":\"Organization\",\"2\":\"Limited  Liability Company(LLC)\"},{\"1\":\"Individual\",\"2\":\"Sole Proprietorship\"},{\"1\":\"Organization\",\"2\":\"Corporation\"},{\"1\":\"Organization\",\"2\":\"Limited  Liability Company(LLC)\"},{\"1\":\"Organization\",\"2\":\"Limited  Liability Company(LLC)\"},{\"1\":\"Organization\",\"2\":\"Limited Liability Partnership\"},{\"1\":\"Individual\",\"2\":\"Single Member LLC\"},{\"1\":\"Organization\",\"2\":\"Corporation\"},{\"1\":\"Individual\",\"2\":\"Independent Contractors\"},{\"1\":\"Individual\",\"2\":\"Sole Proprietorship\"},{\"1\":\"Individual\",\"2\":\"Sole Proprietorship\"},{\"1\":\"Individual\",\"2\":\"Sole Proprietorship\"},{\"1\":\"Organization\",\"2\":\"Limited  Liability Company(LLC)\"},{\"1\":\"Organization\",\"2\":\"Corporation\"},{\"1\":\"Individual\",\"2\":\"Sole Proprietorship\"},{\"1\":\"Individual\",\"2\":\"Sole Proprietorship\"},{\"1\":\"Organization\",\"2\":\"Corporation\"},{\"1\":\"Organization\",\"2\":\"Corporation\"},{\"1\":\"Organization\",\"2\":\"Limited  Liability Company(LLC)\"},{\"1\":\"Organization\",\"2\":\"Limited  Liability Company(LLC)\"},{\"1\":\"Organization\",\"2\":\"Subchapter S Corporation\"},{\"1\":\"Individual\",\"2\":\"Sole Proprietorship\"},{\"1\":\"Organization\",\"2\":\"Limited  Liability Company(LLC)\"},{\"1\":\"Individual\",\"2\":\"Independent Contractors\"},{\"1\":\"Individual\",\"2\":\"Independent Contractors\"},{\"1\":\"Organization\",\"2\":\"Limited  Liability Company(LLC)\"},{\"1\":\"Organization\",\"2\":\"Limited  Liability Company(LLC)\"},{\"1\":\"Individual\",\"2\":\"Sole Proprietorship\"},{\"1\":\"Individual\",\"2\":\"Sole Proprietorship\"},{\"1\":\"Organization\",\"2\":\"Corporation\"},{\"1\":\"Organization\",\"2\":\"Subchapter S Corporation\"},{\"1\":\"Organization\",\"2\":\"Limited  Liability Company(LLC)\"},{\"1\":\"Organization\",\"2\":\"Limited  Liability Company(LLC)\"},{\"1\":\"Organization\",\"2\":\"Corporation\"},{\"1\":\"Organization\",\"2\":\"Limited  Liability Company(LLC)\"},{\"1\":\"Individual\",\"2\":\"Sole Proprietorship\"},{\"1\":\"Individual\",\"2\":\"Sole Proprietorship\"},{\"1\":\"Organization\",\"2\":\"Limited  Liability Company(LLC)\"},{\"1\":\"Organization\",\"2\":\"Limited  Liability Company(LLC)\"},{\"1\":\"Individual\",\"2\":\"Sole Proprietorship\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n::: \n\n#### Example 2: Two categories using  wildcards\n\nYou can also use the same `str_like()` function you used in filtering. Here, it sets whether or not the borrower was a non-profit. Remember, a `%` means \"anything or nothing, and a `_` means\"any single character but it must be present\". In our case, the word is shown as \"Non Profit\" and \"Non-Profit\". Once. you've set it to your new words, you can just filter on the new value:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nppp_category_nonprofit <-\n  ppp_forgiven_fixed |> \n  mutate ( is_nonprofit = \n             if_else ( str_like(business_type, \"%Non_Profit%\") , \n                       \"Is nonprofit\", \n                       \"Not nonprofit\"))  \n```\n:::\n\n\nYou can check it using a new verb, `count()`, to check the number of items by category: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nppp_category_nonprofit |> \n  filter ( is_nonprofit == \"Is nonprofit\") |> \n  count ( is_nonprofit, business_type)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"is_nonprofit\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"business_type\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"n\"],\"name\":[3],\"type\":[\"int\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"Is nonprofit\",\"2\":\"501(c)19 – Non Profit Veterans\",\"3\":\"1\"},{\"1\":\"Is nonprofit\",\"2\":\"501(c)3 – Non Profit\",\"3\":\"155\"},{\"1\":\"Is nonprofit\",\"2\":\"501(c)6 – Non Profit Membership\",\"3\":\"62\"},{\"1\":\"Is nonprofit\",\"2\":\"Non-Profit Childcare Center\",\"3\":\"29\"},{\"1\":\"Is nonprofit\",\"2\":\"Non-Profit Organization\",\"3\":\"2673\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n(The profit categorization is unclear for some of the original types, such as professional associations , tribal concerns and cooperatives.)\n\n### More than two categories using `case_when()`\n\nSometimes you will want more than one outcome, such as setting a value for \"High\", \"Medium\" and \"Low\". Instead of `if_then`, use the function `case_when`, which lets you string along conditions and their outcomes. The tilde (`~`) is used to show what happens if it's true. At the end, you can add an argument `.default=\"Other\"` to say \"everything else\". \n\n[^r-verb-mutate-1]: This will change in future versions, which have a much more intuitive \"Other\" alternative.\n\n::: small\n    original data |> \n      case_when ( first condition ~ what if it's true,\n                  second condition ~ what if  it's true, \n                  third condition  ~ what if it's true, \n                  .default =  what to do with everything that's left\n                  )\n:::\n\n## Putting it all together\n\nHere is how you could set a column to with five types of borrowers instead of three. Once you put it together, you have a much more manageable list of five instead of 25 categories:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nppp_business_categories <- \n  ppp_forgiven_fixed |>\n  mutate (  new_business_type = \n              \n          case_when (  str_like(business_type, \"%non_profit%\") \n                         ~ \"Non-profit\",  #<1>\n                       \n                      business_type %in% \n                         c(\"Independent Contractors\", \n                            \"Sole Proprietorship\", \n                            \"Self-Employed Individuals\", \n                            \"Single Member LLC\")  \n                        ~ \"Individual\",    #<2>\n                      \n                       business_type == \"Tribal Concerns\" \n                        ~ \"Tribal concerns\",    #<3>\n                      \n                       str_detect (business_type, \n                                   \"LLC|Company|Corporation|Partnership\") \n                         ~ \"Companies\",  #<4>\n                      \n                       .default = \"Other\"         #<5>\n            )\n)\n```\n:::\n\n\n1. The same code you used for non-profits, but with a ~ instead of a comma.\n2. The same code you used for individuals\n3. A new type, for Tribal concerns, \n4. and another new type for traditional companies, and\n5. finally, what you want it to say when none of the conditions are true.\n\n\n::: callout-tip\nThis code chunk uses a function you haven't seen yet, called `str_detect()`, which is a powerful way to streamline the conditions. Instead of using `str_like()`, with its limited wildcards, this is based on [regular expressions](advanced-regex.qmd), which we'll look at later. But the way it's used here is to separate words that might be in the description with \"\\|\", for \"OR\".\n:::\n\nTake a look at how the categories are distributed now: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nppp_business_categories |>      #<6>\n  count ( new_business_type)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"new_business_type\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"n\"],\"name\":[2],\"type\":[\"int\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"Companies\",\"2\":\"101657\"},{\"1\":\"Individual\",\"2\":\"63894\"},{\"1\":\"Non-profit\",\"2\":\"2920\"},{\"1\":\"Other\",\"2\":\"773\"},{\"1\":\"Tribal concerns\",\"2\":\"15\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n### Save it for use in another program {.unnumbered}\n\nSaving this for future use means you don't have to worry anymore about some of the missing values, and you can filter and group by the simpler new business type instead of the original. This saves a data file called `ppp_edited.RDS` in your project folder.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsaveRDS(ppp_business_categories, file=\"ppp_edited.RDS\")\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"site_libs/core-js-2.5.3/shim.min.js\"></script>\n<script src=\"site_libs/react-18.2.0/react.min.js\"></script>\n<script src=\"site_libs/react-18.2.0/react-dom.min.js\"></script>\n<script src=\"site_libs/reactwidget-1.0.0/react-tools.js\"></script>\n<script src=\"site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<link href=\"site_libs/reactable-0.4.4/reactable.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/reactable-binding-0.4.4/reactable.js\"></script>\n<link href=\"site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}