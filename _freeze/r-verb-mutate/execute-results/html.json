{
  "hash": "c88c63b9f69fc4bb4db1f819fae85e63",
  "result": {
    "markdown": "# Verbs in depth: New from old data with Mutate {#r-verb-mutate}\n\n::: {.alert .alert-secondary}\n::: {.alert-heading .font-weight-bolder .fs-3}\nIn this chapter\n:::\n\n-   Creating new columns with `mutate()`\n-   Combine summary and detail into one data frame\n-   Replacing `NA` values\n-   Using conditional commands `if_else()` and `case_when()` to create categories\n:::\n\nThis continues the work using Arizona Paycheck Protection Program loans. Full documentation of the dataset is in the [Appendix](appendix-ppp.html).\n\n\n\n\n\n::: {.alert-success .alert-dothis .p-3}\nTo follow along, open your PPP project and create a new markdown the usual way, including the usual setup chunk.\n\nAdd this command `options(scipen=999)` to the bottom of your setup chunk to avoid looking at scientific notation for large and small numbers.\n\nLoad the data into your environment using this code chunk:\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nppp_orig <- \n  readRDS( \n   url ( \n     \"https://cronkitedata.s3.amazonaws.com/rdata/ppp_az_loans.RDS\"\n       )\n   )\n```\n:::\n\n\n## `mutate` to create new columns\n\nUse the verb `mutate` whenever you want to create or change existing columns in your data.\n\nExamples of this include:\n\n-   Computing difference or percent difference\n-   Replacing `NA` values with \"Unknown\" or zero.\n-   Collapsing or creating categories for more meaningful analysis\n\nYou will often use a combination of filtering and mutating to create a new data frame using the `<-` assignment to use in future code chunks. That's because they can get complex, and you don't want to repeat code that you might have to change over and over.\n\n::: callout-warning\nThis chapter assumes you have gone through the [filtering](r-verb-filter.qmd) chapter. Many of the expressions and functions are the same, so if they don't look familiar to you, consider reviewing that chapter (again) first.\n:::\n\n`mutate` uses the syntax:\n\n        mutate ( new_column_name = function (arguments))\n\nThat's pretty abstract, so we'll do this using examples.\n\n### Math on columns: compute difference and percent difference\n\nHere's an example of computing the difference and percent difference between the amount received and the amount forgiven. Before you run this, try to think of why a reporter might be interested in this list.\n\nUse the single \"=\" sign to provide a name for the new column and create more than one new column using a comma between them:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nppp_orig |>\n  mutate ( amt_diff =  forgiveness_amount-amount, \n           amt_pct_diff = amt_diff / amount  * 100 ) |>                   # compute new columns\n  select ( borrower_name, borrower_city, amount, forgiveness_amount) |>   # pick out a few columns\n  head(5).                                                                # show the first five rows\n```\n:::\n\n\nIf you look hard enough, you'll realize that there are a lot of rows with `NA` instead of a value. That's because whenever you do anything with a missing value, the result is missing. Missing values infect everything they touch. You often have to deal with them before you can do anything else.\n\n### Converting NA to 0\n\nWe would like to convert the forgiven amount from a missing value to zero, under the idea that if they have not filled it out, nothing has (yet) been forgiven. Of course, we'd have to check that with the SBA before publication.\n\nThere is a specific function used for that: `replace_na()`, with two arguments: The column you want to check for missing values, and the value you want to use instead. This isn't limited to numbers -- you can do the same thing with words, often replacing NA with \"Unknown\".\n\n\n::: {.cell}\n\n```{.r .cell-code}\nppp_forgiven_fixed <- \n  ppp_orig |>\n  mutate (amount_forgiven = replace_na(forgiveness_amount, 0))\n```\n:::\n\n\n(Note that nothing came out in this code chunk because the result was saved into a new data frame variable.)\n\n### Detail and total with summary statistics\n\nYou can use `mutate` to put summary statistics next to your values so you can see whether or not they are similar to the average or median. (If you skipped converting the `NA` values above, the answers will always come out as `NA`, because they infect everything they touch. )\n\nˆ\n\n\n::: {.cell}\n\n```{.r .cell-code}\nppp_forgiven_fixed |> \n  mutate ( avg_forgiven = mean(amount_forgiven), \n           median_forgiven = median(amount_forgiven)) |> \n  select (borrower_name, amount_forgiven, avg_forgiven, median_forgiven ) |> \n  head()\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"borrower_name\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"amount_forgiven\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"avg_forgiven\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"median_forgiven\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"SFE HOLDINGS LLC\",\"2\":\"10108219\",\"3\":\"69429.99\",\"4\":\"19631.99\"},{\"1\":\"NAVAJO TRIBAL UTILITY AUTHORITY\",\"2\":\"9882528\",\"3\":\"69429.99\",\"4\":\"19631.99\"},{\"1\":\"HOME HEALTH AGENCY ARIZONA LLC\",\"2\":\"10133389\",\"3\":\"69429.99\",\"4\":\"19631.99\"},{\"1\":\"ARIZONA COMMUNITY PHYSICIANS PC\",\"2\":\"10131667\",\"3\":\"69429.99\",\"4\":\"19631.99\"},{\"1\":\"NEXTIVA INC\",\"2\":\"10126027\",\"3\":\"69429.99\",\"4\":\"19631.99\"},{\"1\":\"MOUNTAIN PARK HEALTH CENTER\",\"2\":\"10142917\",\"3\":\"69429.99\",\"4\":\"19631.99\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n## Categorizing text using conditional statements\n\nVery often, you'll want to categorize entries in a database in order to make it simpler to count and sum the values in a meaningful way. For example, the `business_type` column has 24 different values, including `NA` . Here's a list with the number of loans in each category:\n\n\n\n\n::: {.cell rows.print='25'}\n\n```{.r .cell-code}\n#| label: print-forgiven\n#| eval: true\n#| echo: false \n\nppp_forgiven_fixed  |>\n   count ( business_type, sort=TRUE, name=\"# of rows\") \n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"business_type\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"# of rows\"],\"name\":[2],\"type\":[\"int\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"Limited  Liability Company(LLC)\",\"2\":\"57744\"},{\"1\":\"Sole Proprietorship\",\"2\":\"38726\"},{\"1\":\"Corporation\",\"2\":\"27871\"},{\"1\":\"Subchapter S Corporation\",\"2\":\"13777\"},{\"1\":\"Independent Contractors\",\"2\":\"13504\"},{\"1\":\"Self-Employed Individuals\",\"2\":\"10364\"},{\"1\":\"Non-Profit Organization\",\"2\":\"2673\"},{\"1\":\"Single Member LLC\",\"2\":\"1300\"},{\"1\":\"Partnership\",\"2\":\"1190\"},{\"1\":\"Limited Liability Partnership\",\"2\":\"1075\"},{\"1\":\"Professional Association\",\"2\":\"570\"},{\"1\":\"501(c)3 – Non Profit\",\"2\":\"155\"},{\"1\":\"501(c)6 – Non Profit Membership\",\"2\":\"62\"},{\"1\":\"NA\",\"2\":\"42\"},{\"1\":\"Cooperative\",\"2\":\"35\"},{\"1\":\"Trust\",\"2\":\"34\"},{\"1\":\"Qualified Joint-Venture (spouses)\",\"2\":\"32\"},{\"1\":\"Tenant in Common\",\"2\":\"32\"},{\"1\":\"Non-Profit Childcare Center\",\"2\":\"29\"},{\"1\":\"Joint Venture\",\"2\":\"21\"},{\"1\":\"Tribal Concerns\",\"2\":\"15\"},{\"1\":\"Employee Stock Ownership Plan(ESOP)\",\"2\":\"6\"},{\"1\":\"501(c)19 – Non Profit Veterans\",\"2\":\"1\"},{\"1\":\"Rollover as Business Start-Ups (ROB\",\"2\":\"1\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[25],\"max\":[25]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\nOne way to work with these is to create new columns with yes-no indicators for certain types of businesses like non-profits or individuals vs. companies.\n\n### Two categories using `if_else`\n\nThe function to do this is `if_else()` , which tests a condition exactly the same way `filter` did, but then assigns a value based on whether it's met or not. You list the condition first, then a comma , then what should happen if the condition is true, and then what should happen if it's false.\n\nThe condition is done the same way you did it in a filter, but instead of picking out the rows that match, `mutate` acts on them separately from the rows that don't match.\n\nThere's no \"maybe\", except for NA's in the original value. Here's the general form of what it looks like:\n\n``` markdown\n\nnew_column_name = if_else ( test the old column for something as in a a filter,\n                         give it a value if it's true,\n                         give it another value if it's not true)\n```\n\nSo here is a way to do this with the business_type using the same %in% operator you used in the `filter` lesson, saving it to new data frame in your Environment, then displaying the first 10 types of businesses using `count()`\n\n::: callout-note\nThis code chunk uses a verb called `count()` to count up the number of rows in each category. We'll get into this in much more detail in the next chapter, but it's helpful to use it now to show you the results of creating new categories from old data.\n:::\n\n\n::: {.cell rows.print='10'}\n\n```{.r .cell-code}\n#| label: m-category-indiv \n#| eval: true \n#| echo: true\n\nppp_category_indiv <- \n  ppp_forgiven_fixed |>\n  mutate ( is_individual = \n              if_else ( business_type %in% \n                          c(\"Independent Contractors\", \n                            \"Sole Proprietorship\", \n                            \"Self-Employed Individuals\", \n                            \"Single Member LLC\"), \n                        \"Individual\", \n                        \"Organization\")\n  )  \n\nppp_category_indiv |> \n  count (is_individual, business_type) |> \n  head(10)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"is_individual\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"business_type\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"n\"],\"name\":[3],\"type\":[\"int\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"Individual\",\"2\":\"Independent Contractors\",\"3\":\"13504\"},{\"1\":\"Individual\",\"2\":\"Self-Employed Individuals\",\"3\":\"10364\"},{\"1\":\"Individual\",\"2\":\"Single Member LLC\",\"3\":\"1300\"},{\"1\":\"Individual\",\"2\":\"Sole Proprietorship\",\"3\":\"38726\"},{\"1\":\"Organization\",\"2\":\"501(c)19 – Non Profit Veterans\",\"3\":\"1\"},{\"1\":\"Organization\",\"2\":\"501(c)3 – Non Profit\",\"3\":\"155\"},{\"1\":\"Organization\",\"2\":\"501(c)6 – Non Profit Membership\",\"3\":\"62\"},{\"1\":\"Organization\",\"2\":\"Cooperative\",\"3\":\"35\"},{\"1\":\"Organization\",\"2\":\"Corporation\",\"3\":\"27871\"},{\"1\":\"Organization\",\"2\":\"Employee Stock Ownership Plan(ESOP)\",\"3\":\"6\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n### Two categories using fuzzy matching\n\nYou can also use the same `str_like()` function you used in filtering. Here, it sets whether or not the borrower was a non-profit. Remember, a `%` means \"anything or nothing, and a `_` means\"any single character but it must be present\". In our case, the word is shown as \"Non Profit\" and \"Non-Profit\". Once. you've set it to your new words, you can just filter on the new value:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nppp_category_nonprofit <-\n  ppp_category_indiv |>\n  mutate ( is_nonprofit = \n             if_else ( str_like(business_type, \"%Non_Profit%\") , \n                       \"Is nonprofit\", \n                       \"Not nonprofit\"))  \n\n\n\nppp_category_nonprofit |>\n  count ( business_type, is_nonprofit) |>\n  filter ( is_nonprofit == \"Is nonprofit\")\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"business_type\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"is_nonprofit\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"n\"],\"name\":[3],\"type\":[\"int\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"501(c)19 – Non Profit Veterans\",\"2\":\"Is nonprofit\",\"3\":\"1\"},{\"1\":\"501(c)3 – Non Profit\",\"2\":\"Is nonprofit\",\"3\":\"155\"},{\"1\":\"501(c)6 – Non Profit Membership\",\"2\":\"Is nonprofit\",\"3\":\"62\"},{\"1\":\"Non-Profit Childcare Center\",\"2\":\"Is nonprofit\",\"3\":\"29\"},{\"1\":\"Non-Profit Organization\",\"2\":\"Is nonprofit\",\"3\":\"2673\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n(The profit categorization is unclear for some of these types, such as professional associations , tribal concerns and cooperatives.)\n\n### More than two categories using `case_when()`\n\nSometimes you will want more than one outcome, such as setting a value for \"High\", \"Medium\" and \"Low\". Instead of `if_then`, use the function `case_when`, which lets you string along conditions and their outcomes. The tilde (`~`) is used to show what happens if it's true, and a TRUE at the end lets you say \"everthing else\"[^r-verb-mutate-1]\n\n[^r-verb-mutate-1]: This will change in future versions, which have a much more intuitive \"Other\" alternative.\n\n::: small\n    original data |> \n      case_when ( first condition ~ what if it's true,\n                  second condition ~ what if  it's true, \n                  third condition  ~ what if it's true, \n                  TRUE ~ what to do with everything that's left\n                  )\n:::\n\n## Putting it all together\n\nHere is how you could set a column to with five types of borrowers instead of three. Once you put it together, you have a much more manageable list of five instead of 25 categories:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nppp_business_categories <- \n  ppp_category_nonprofit |>\n  mutate (  new_business_type = \n                case_when (  str_like(business_type, \"%non_profit%\") ~ \"Non-profit\",    #1st category\n\n                             business_type %in% \n                               c(\"Independent Contractors\", \n                                \"Sole Proprietorship\", \n                                \"Self-Employed Individuals\", \n                                  \"Single Member LLC\")              ~ \"Individual\",    # 2nd category\n                             \n                             business_type == \"Tribal Concerns\"     ~ \"Tribal concerns\",    #3rd category\n                             \n                             str_detect (business_type, \"LLC|Company|Corporation|Partnership\") ~ \"Companies\",  #4th category\n                             \n                             TRUE ~ \"Other\")         #catchall 5th category\n            )\n\n\n# Now take a look at what you got\n\nppp_business_categories |>\n  count ( new_business_type)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"new_business_type\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"n\"],\"name\":[2],\"type\":[\"int\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"Companies\",\"2\":\"101657\"},{\"1\":\"Individual\",\"2\":\"63894\"},{\"1\":\"Non-profit\",\"2\":\"2920\"},{\"1\":\"Other\",\"2\":\"773\"},{\"1\":\"Tribal concerns\",\"2\":\"15\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n::: callout-tip\nThis code chunk uses a function you haven't seen yet, called `str_detect()`, which is a powerful way to streamline the conditions. Instead of using `str_like()`, with its limited wildcards, this is based on [regular expressions](advanced-regex.qmd), which we'll look at later. But the way it's used here is to separate words that might be in the description with \"\\|\", for \"OR\".\n:::\n\n### Save it for use in another program {.unnumbered}\n\nSaving this for future use means you don't have to worry anymore about some of the missing values, and you can filter and group by the simpler new business type instead of the original. This saves a data file called `ppp_edited.RDS` in your project folder.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsaveRDS(ppp_business_categories, file=\"ppp_edited.RDS\")\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}