{
  "hash": "4a618ff1dbc32eb5af431bc8952a0748",
  "result": {
    "markdown": "# Using Quarto {#quickstart-quarto}\n\n::: callout-tip\n## Pro tip\nStart collecting code examples that you can save in a document with a description of what they mean in your own words. This reference document can be anywhere -- a Google Doc, a Quarto doc, or anywhere else. You won't be running that code, but you'll have something you can copy and paste that exemplifies how you think of it.\n::: \n\n\n\n\n## Quarto documents\n\nQuarto is a document format that lets you combine your writing, images, computer code and its results into complete documents. We'll only be using Quarto for R using RStudio, but it also works in other languages such as Python and Javascript. Some news organizations do much of their internal work using Quarto and its predecessor, RMarkdown.\n\nThis entire book is written as a series of Quarto documents!\n\n::: callout-note\n### Quarto is modern RMarkdown\n\nMany help pages and tutorials in R use the format called *RMarkdown* (.Rmd) instead of *Quarto* (.qmd), which was introduced in mid-2022. There are very few substantive differences.\n:::\n\n### The structure of a Quarto document\n\nThere are four parts to a Quarto document:\n\n1.  Narrative and document features, including headlines, subheads, images and other elements that you'd normally put in any document.\n\n2.  The \"front matter\", or YAML^[Literally, \"Yet Another Markup Language\". Sigh], instructions for the entire document, such as a title or the output format. You will often copy and paste this part rather than trying to get it right freehand.\n\n3.  Little portions of your R programs in code chunks, similar to the lines you entered in the Console in the last chapter.\n\n4.  The results of code chunks - what you get back when you execute the code, including charts, graphs, tables and maps.\n\n### Markdown, an editing language  \n\nIn Quarto, your narration is written using Markdown, which was invented as an easy way for early Wikepedia editors to write simple documents that would automatically be rendered into the more complicated HTML of the web. Once you get used to Markdown, you may never go back to Google Docs or Word.\n\n\n::: callout-dothis\nReview the first five sections of the [markdown basics](https://quarto.org/docs/authoring/markdown-basics.html) instructions from Quarto, paying attention to:\n\n-   [Text formatting](https://quarto.org/docs/authoring/markdown-basics.html#text-formatting), like bold and italic\n-   [Links](https://quarto.org/docs/authoring/markdown-basics.html#links-images)\n-   [Headings](https://quarto.org/docs/authoring/markdown-basics.html#headings)\n-   [Lists](https://quarto.org/docs/authoring/markdown-basics.html#lists) (ordered and unordered)\n-   Optional: [Tables](https://quarto.org/docs/authoring/markdown-basics.html#tables)\n\nWe probably won't use anything below the Tables section in this class.\n:::\n\n### Front matter / YAML at the top {#frontmatter .unnumbered}\n\nThe way the R knows how to process the page is by reading the very top of the file and looking at the section between three dashes. This is called \"front matter\", and it's extremely picky about indentations and the exact words you use.\n\nThe default setup is very basic. For this class, I'll ask you to use the following options, and edit them to correct the title and author each day. This will already be filled out for you in some of the early assignments.^[Three key things it does: Make better-looking printouts; allow me to download all of your code; and keep any data or images embedded into the document so you don't have to send me all of the supporting files.]  \n\n\n``` yaml\n---\ntitle: \"A title for your page\"\nauthor: \"Your name\"\nformat: \n  html: \n    theme: cosmos\n    embed-resources: true\n    toc: true\n    code-tools: true\n    page-layout: full\n    df-print: paged\n---\n```\n\n### Including R code and its results\n\nSo far, nothing is different from a simple Google doc or Word document -- there is no computer code or data involved. But the value of Quarto is that it allows you to mix your analysis with your writing in one place.\n\nYou'll do that through `code chunks` -- little snippets of working code that you insert within your narrative which, when processed, will also include the results. Each code chunk has a Play button in its upper-right corner. Once you're done typing, you'll press that button to run just that code chunk. \n\nTo insert a code chunk:\n\n-   Use the +C button on the top right of your screen. ( ![](assets/images/r-quarto-insertchunk.png){width=\"25\" height=\"16\"})\n-   Use the keyboard shortcut {{< kbd win=Control-Alt-i  mac=Command-option-i >}}  (Cmd-Opt-i)\n\n::: {.content-visible when-format=\"html\"}\n![](https://cronkitedata.s3.amazonaws.com/images/r-quarto-insertcode.gif)\n:::\n\n\n\nThe following code chunk creates a new variable called `my_variable`, another called `my_name`. \n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n# Anything between ```{r} at the beginning and ``` at the end is the code chunk.   \n# A hashtag within an R program or code chunk means the line is a \"comment\". \n# R will ignore it.\n\n\nmy_variable <- 13   #<1> \nmy_name <- \"Sarah\"  #<2>\n```\n````\n:::\n\n\nWhen you press the Play button, nothing comes out. That's because you saved your variables. Once they're saved, you can print them by just typing their names: \n\n\n::: {.cell code-copy='false'}\n\n```{.r .cell-code}\nmy_name  # <1>\n\nmy_variable #<1>\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Sarah\"\n[1] 13\n```\n:::\n:::\n\n1. Print the value that's stored in the variable called `my_name`, then print the value that's stored in `my_variable`\n\nThis might not seem like much, but think about how it helps you do your analysis. You can write all of your notes right where you do the work. You don't have to copy and paste information from one place to another, or share out-of-date spreadsheets with your teammates.\n\n### Rendering a document\n\n\n![](assets/images/r-quarto-firstquarto.png){.float-sm-end .img-fluid .m3 width=\"3in\"}\nThe document remains in markdown format until you process it by pressing the \"Render\" button at the top of the page.Quarto converts your document to a web page and saves it into your project.  \n\n### Switch to Source mode\n\nRStudio usually creates a Quarto document in \"Visual\" mode, which hides the underlying coding from you and allows you to use point-and-click menus to structure your document. \n\nThis tutorial will have you switch to \"Source\" mode so that you can see the underlying structure.\n\n![](assets/images/r-quarto-source-visual.png)\n\nIn practice, visual mode makes data tables look all squished and difficult to navigate until you've rendered them.  You can set up RStudio to default to source mode by changing the global options under Tools -\\> Global Options , then look for R Markdown, and the Visual tab.\n\n\n## Your first project\n\nOne of the things that trips up new users of R is that it's hard to tell the program where to find things on your computer. In RStudio, projects are used to isolate all of  your work to one folder in your computer. \n\nWe'll be working entirely in projects in this course. This means you will **never double-click on your Quarto document to open RStudio**. Instead, you'll open RStudio and then choose or create a project.\n\n::: callout-dothis\n1. Create a new project by hitting the second green + sign at the top left of your screen, or choose `File` > `New Project`.\n\n2. When prompted, create a project in a New Directory. Make sure that you save it WITHIN your `maij-working` folder.  Name it `rlessons-01`. This creates a file with the extension `.RProj` in a folder with the name of your project. \n\n3. Once  you've created it, shut down RStudio. \n\n::: \n\n::: {.content-visible when-format=\"html\"}\n:::: {.column-screen-right .pe-5 }\n![](https://cronkitedata.s3.amazonaws.com/images/r-start-newproject.gif){width=\"100%\"}\n::::\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n![new project](assets/images/r-start-newproject.png)\n:::\n\n\n\n## Your first document\n\n::: callout-dothis\n\n1. Open the RStudio project you just created by first opening the app, then choosing the project from the drop-down menu at the top right. Get in the habit of opening your projects this way. \n\n2. Create a new document (File -> New -> Quarto document) with three things about yourself in a list, a picture of an animal you love or some other image you like, and a code chunk.\n:::\n\n#### Step by step\n\n-   Find an image of your favorite animal or another image you like, and save it in the project folder that you created above.\n-   Open RStudio first, then open the project  using the drop-down at the top right of  your screen (or through the File -> Open project menu item). \n-   Create a new Quarto document.\n-   Switch to Source mode from Visual mode .\n-   Delete the entire default entry, including the stuff at the very top.\n-   Copy the [code above](#frontmatter) to the very top of the page. Don't leave any blank lines above it.\n-   Change your name and the title in that top section.\n-   Save the new Quarto document using the name `yourlastname-firstquarto`\n-   The area below the three dashes is your document. In it, create:\n    -   A subhed introducing a subtopic, called \"About me\"\n    -   Within that heading, a list of three things about yourself or about a topic you love, in an unordered (bulleted) list.\n    -   Another subhed , called \"An image I love\", with some text below it describing why you love it\n    -   The image that you saved into your project folder\n    -   Another subhed called \"Some R code\"\n    -   A code chunk, in which you create a variable , assign it a value, and then print it out.\n-   Save your work\n-   Render the document to a final html file. (Rendering automatically saves, but it's good practice to do it yourself.)\n\n#### Common problems \n\n-  You haven't saved the document yet.\n-  There is an error in that top YAML section. Copy the code above and try again. It's really picky.\n-  There is an error in your R code. Look for a visual hint that shows you what's wrong. \n-  You deleted the ending back-ticks at the end of the code chunk. Your whole screen turned gray and there's no Play button. Add three back-ticks after your code to get back on track.\n-  Everything's too smushed together. The subheds, for example, have to have  a space after the hashtag, and the lists have to have a blank line above them. Give your document room to breathe by inserting blank lines between elements. If you're having trouble, switch back to visual mode and fix it there, then look at it again in Source mode.\n\n### Example document\n\nYou can look at the [original Quarto code](https://cronkitedata.s3.amazonaws.com/markdown_templates/cohens-firstquarto.qmd) and the [rendered document](https://cronkitedata.s3.amazonaws.com/markdown_templates/cohens-firstquarto.html), but remember that if you were doing this yourself, you'd have to have the image saved in the same folder as your project. I changed the theme so you could see some of the variations.\n\n::: {.column-screen-right .pe-5}\n![](assets/images/r-quarto-first-moose.png){width=\"100%\"}\n\n::: \n\n## Other resources {#quarto-resources}\n\n-   [Quarto's Getting Started guide](https://quarto.org/docs/get-started/hello/rstudio.html)\n-   [Heiss's video on R Markdown](https://youtu.be/fT5xI1cmE2c), which is very similar to Quarto. (13 minutes). It's great about showing you the glitches you might run into. The differences between Quarto and RMarkdown are :\n    -   The `output: html_document` line should be `format: html`\n    -   The name of the file ends with .qmd, not .Rmd\n    -   The \"knit\" button is really a \"render\" button.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}