[
  {
    "objectID": "index.html#preface",
    "href": "index.html#preface",
    "title": "Data Reporting",
    "section": "Preface",
    "text": "Preface\nThis book serves as a compilation of of handouts, websites and tutorials that I have created in my data reporting class at ASU’s Cronkite School of Journalism and Mass Communication, IRE and NICAR conferences, and as an adjunct at the Columbia University Graduate School of Journalism. Some of the material will be useful in other courses or for self-study, but it is primarily aimed at the investigative journalism masters’ students at Cronkite.\nIt covers:\n\nReporting and replication in data journalism\nTable stakes: Spreadsheets in the newsroom\nAnalyzing data for stories using R and R Markdown\n\nIt doesn’t cover:\n\nData visualization for publication\nWorking with non-tabular data such as images, sound or document collections\nCreating news applications\nFreedom of Information and public records techniques\nData science. This is a journalism book, not a programming or statistics book.\n\nA note on language: I’ll use the words “read” and “write” in a generic sense. I intend them to cover the range of journalistic media, including listening, watching, and news applications or graphics.\n\nNavigation\nEach major section on the left can be expanded to see the chapters included. There is a table of contents for the current page at underneath that index.\n\n\nConventions used in this book\nThis book is written using a Mac desktop keyboard, meaning there may be key combinations you don’t have. I’ll try to keep them to a minimum. I’ll try to use the convention CMD/CTL and OPT/ALT , with the part before the / for Mac users and part after the / for Windows users.\n\nConventions in the R Study Guide chapters\n\n\n\n\n\n\nTip\n\n\n\nPro tips!\n\n\n\n\n\n\n\n\nNote\n\n\n\nAn aside.\n\n\n\n\n\n\n\n\nWarning\n\n\n\nSomething you should be careful about - you might have trouble running the code or get very unexpected results if you ignore it.\n\n\n\nThis background is used for instructions for anyone trying to follow along."
  },
  {
    "objectID": "index.html#credits",
    "href": "index.html#credits",
    "title": "Data Reporting",
    "section": "Credits",
    "text": "Credits\nI’m grateful to all of the trainers, experts and collaborators who have made their training materials open to the world, and they are linked prominently throughout this book. Any errors or omissions are my own.\nThis book was written in quarto version 1.2 using RStudio and version 4.2 or R. . The complete source is available on Github.\n\n\n\n– Sarah Cohen, Winter 2022-23 sarah.h.cohen@asu.edu"
  },
  {
    "objectID": "start.html",
    "href": "start.html",
    "title": "Reporting with data",
    "section": "",
    "text": "Data reporting has come to mean many things. One of the best descriptions that fits this course is the moniker, “Empirical Journalism”. For us, that means taking a systematic approach to finding, acquiring, evaluating and analyzing all kinds of data for the purpose of uncovering information that was hidden or otherwise ill-understood by the general public. It will teach you to use documents and data as sources like any other, with flaws and motivations that might thwart or help you report a story.\nThis introductory section gives you some of the basic skills you need to begin thinking about data and digitally stored documents as sources for your stories.\nSome of the skill comes from recognizing opportunities when they arise. The chapters on defining, finding and creating data should get you thinking about the many ways information is stored, and how difficult it might be to wrangle it for your story idea.\nThe section on reading and viewing investigations teaches you how to critically look at stories that attempt to use data, and also to learn from imaginative or effective use of it. There are also sections on the bread and butter of working with data: checking your math-phobia at the door and learning to document your work so that it can be published."
  },
  {
    "objectID": "start-story.html#read-like-a-reporter",
    "href": "start-story.html#read-like-a-reporter",
    "title": "1  Learn a new way to read",
    "section": "1.1 Read like a reporter",
    "text": "1.1 Read like a reporter\nTry to approach data or empirical reporting as a reporter first, and a consumer second. The goal is to triangulate how the story was discovered, reported and constructed. You’ll want to think about why this story, told this way, at this time, was considered newsworthy enough to publish when another approach on the same topic might not have been.\n\nWhat were the questions?\nIn data journalism, we often start with a tip, or a hypothesis. Sometimes it’s a simple question. Walt Bogdanich of The New York Times is renowned for seeing stories around every corner. Bogdanich has said that the prize-winning story “A Disability Epidemic Among a Railroad’s Retirees” came from a simple question he had when railway workers went on strike over pension benefits – how much were they worth? The story led to an FBI investigation and arrests, along with pension reform at the largest commuter rail in the country. 1\nThe hypothesis for some stories might be more directed. In 2021, the Howard Center for Investigative Journalism at ASU published “Little victims everywhere”, a set of stories on the lack of justice for survivors of child sexual assault on Native American reservations. That story came after previous reporters for the center analyzed data from the Justice Department showing that the FBI dropped most of the cases it investigated, and the Justice Department then only prosecuted about half of the matters referred to it by investigators. The hypothesis was that they were rarely pursued because federal prosecutors – usually focused on immigration, white collar crime and drugs – weren’t as prepared to pursue violent crime in Indian Country.\nWhen studying a data-driven investigation, try to imagine what the reporters were trying to prove or disprove, and what they used to do it. In journalism, we rely on a mixture of quantitative and qualitative methods. It’s not enough to prove the “numbers” or have the statistical evidence. That is just the beginning of the story. We are supposed to ground-truth them with the stories of actual people and places.\n\n\nGo beyond the numbers\nIt’s easy to focus on the numbers or statistics that make up the key findings, or the reason for the story. Some reporters make the mistake of thinking all of the numbers came from the same place – a rarity in most long-form investigations. Instead, the sources have been woven together and are a mix of original research and research done by others. Try to pay attention to any sourcing done in the piece. Sometimes, it will tell you that the analysis was original. Other times it’s more subtle.\nBut don’t just look at the statistics being reported in the story. In many (most?) investigations, some of the key people, places or time elements come directly from a database.\nWhen I was analyzing some housing court data for The New York Times, one fact hit me as I was looking at a timeline of eviction cases: The most cases ever filed in one of the city’s courts happened during a Thanksgiving week one year. It was the kind of detail that could have been compelling in a story if it had been more recent.\nOften, the place that a reporter visits is determined by examples found in data. In this story on rural development funds, all of the examples came from an analysis of the database. Once the data gave us a good lead, we examined press releases and other easy-to-get sources before calling and visiting the recipients or towns."
  },
  {
    "objectID": "start-story.html#reading-tips",
    "href": "start-story.html#reading-tips",
    "title": "1  Learn a new way to read",
    "section": "1.2 Reading tips",
    "text": "1.2 Reading tips\nYou’ll get better at reading investigations and data-driven work over time, but for now, remember to go beyond the obvious:\n\nWhere might the reporters have found their key examples, and what made them good characters or illustrations of the larger issue? Could they have come from the data?\nWhat do you think came first – a narrative single example that was broadened by data , or a big idea that was illustrated with characters ?\nWhat records were used? Were they public records, leaks, or proprietary data?\nWhat methods did they use? Did they do their own testing, use statistical analysis, or geographic methods? You won’t always know, but look for a methodology section or a description alongside each story.\nHow might you localize or adapt these methods to find your own stories?\nPick out the key findings (usually in the nut graf or in a series of bullets after the opening chapter): are they controvesial? How might they have been derived? What might have been the investigative hypothesis? Have they given critics their due and tried to falsify their own work?\nHow effective is the writing and presentation of the story? What makes it compelling journalism rather than a dry study? How might you have done it differently? Is a video story better told in text, or would a text story have made a good documentary? Are the visual elements well integrated? Does the writing draw you in and keep you reading? Think about structure, story length, entry points and graphics all working together.\nAre you convinced? Are there holes or questions that didn’t get addressed?"
  },
  {
    "objectID": "start-story.html#analyze-data-for-story-not-study",
    "href": "start-story.html#analyze-data-for-story-not-study",
    "title": "1  Learn a new way to read",
    "section": "1.3 Analyze data for story, not study",
    "text": "1.3 Analyze data for story, not study\nAs journalists we’ll often be using data, social science methods and even interviewing differently than true experts. We’re seeking stories, not studies. Recognizing news in data is one of the hardest skills for less experienced reporters new to data journalism. This list of potential newsworthy data points is adapted from Paul Bradshaw’s “Data Journalism Heist”.\n\n\n\n\nCompare the claims of powerful people and institutions against facts – the classic investigative approach.\nReport on unexpected highs and lows (of change, or of some other characteristic)\nLook for outliers – individual values that buck a trend seen in the rest\nVerify or bust some myths\nFind signs of distress, happiness or dishonesty or any other emotion.\nUncover new or under-reported long-term trends.\nFind data suggesting your area is the same or different than most others of its kind.\n\nBradshaw also did a recent study of data journalism pieces: “Here are the angles journalists use most often to tell the stories in data”, in Online Journalism Blog. I’m not sure I agree, only because he’s looking mainly at visualizations rather than stories, but they’re worth considering."
  },
  {
    "objectID": "start-story.html#exercises",
    "href": "start-story.html#exercises",
    "title": "1  Learn a new way to read",
    "section": "1.4 Exercises",
    "text": "1.4 Exercises\n\nIf you’re a member of Investigative Reporters and Editors, go to the site and find a recent prize-winning entry (usually text rather than broadcast). Get a copy of the IRE contest entry from the Resources page. Try to match up what the reporters said they did and how they did it with key portions of the story.\nThe next time you find a good data source, try to find a story that references it. If your data is local, you might look for a story that used similar data elsewhere, such as 911 response times or overdose deaths. But many stories use federal datasets that can easily be localized. Look at a description of the dataset and then the story to see how the data might have been used."
  },
  {
    "objectID": "start-story.html#footnotes",
    "href": "start-story.html#footnotes",
    "title": "1  Learn a new way to read",
    "section": "",
    "text": "Note to self: check this with Walt. It’s how I remember it, but I’m not positive.↩︎"
  },
  {
    "objectID": "start-math.html#why-numbers",
    "href": "start-math.html#why-numbers",
    "title": "2  Newsroom math",
    "section": "2.1 Why numbers?",
    "text": "2.1 Why numbers?\nUsing averages, percentages and percent change is the bread and butter of data journalism, leading to stories ranging from home price comparisons to school reports and crime trends. It may have been charming at one time for reporters to announce that they didn’t “do” math, but no longer. Instead, it is now an announcement that the reporter can only do some of the job. You will never be able to tackle complicated, in-depth stories without reviewing basic math.\nThe good news is that most of the math and statistics you need in a newsroom isn’t nearly as difficult as high school algebra. You learned it somewhere around the 4th grade. You then had a decade to forget it before deciding you didn’t like math. But mastering this most basic arithmetic again is a requirement in the modern age.\nIn working with typical newsroom math, you will need to learn how to:\n\nOvercome your fear of numbers\nIntegrate numbers into your reporting\nRoutinely compute averages, differences and rates\nSimplify and select the right numbers for your story\n\nWhile this chapter covers general tips, you can find specific instructions for typical newsroom math in this Appendix A"
  },
  {
    "objectID": "start-math.html#overcoming-your-fear-of-math",
    "href": "start-math.html#overcoming-your-fear-of-math",
    "title": "2  Newsroom math",
    "section": "2.2 Overcoming your fear of math",
    "text": "2.2 Overcoming your fear of math\nWhen we learned to read, we got used to the idea that 26 letters in American English could be assembled into units that we understand without thinking – words, sentences, paragraphs and books. We never got the same comfort level with 10 digits, and neither did our audience.\nThink of your own reaction to seeing a page of words. Now imagine it as a page of numbers.\nInstead, picture the number “five”. It’s easy. It might be fingers or it might be a team on a basketball court. But it’s simple to understand.\nNow picture the number 275 million. It’s hard. Unfortunately, 275 billion isn’t much harder, even though it’s magnitudes larger. (A million seconds goes by in about 11 days but you may not have been alive for a billion seconds – about 36 years.)\nThe easiest way to get used to some numbers is to learn ways to cut them down to size by calculating rates, ratios or percentages. In your analysis, keep an eye out for the simplest accurate way to characterize the numbers you want to use. “Characterize” is the important word here – it’s not usually necessary to be overly precise so long as your story doesn’t hinge on a nuanced reading of small differences. (And is anything that depends on that news? It may not be.)\nHere’s one example of putting huge numbers in perspective. Pay attention to what you really can picture - it’s probably the $21 equivalent.\n\nThe Chicago hedge fund billionaire Kenneth C. Griffin, for example, earns about $68.5 million a month after taxes, according to court filings made by his wife in their divorce. He has given a total of $300,000 to groups backing Republican presidential candidates. That is a huge sum on its face, yet is the equivalent of only $21.17 for a typical American household, according to Congressional Budget Office data on after-tax income.  “Buying Power”, Nicholas Confessore, Sarah Cohen and Karen Yourish, The New York Times, October 2015\n\nI had written it a even more simply, but editors found the facts so unbelievable that they wanted give readers a chance to do the math themselves. That’s reasonable, but here’s an even simpler way to say it: “earned nearly $1 billion after taxes…He has given $300,000 to groups backing candidates, the equivalent of a dinner at Olive Garden for the typical American family , based on Congressional Budget Office income data.” (And yes, I checked the price for an Olive Garden meal at the time for four people.)"
  },
  {
    "objectID": "start-math.html#put-math-in-its-place",
    "href": "start-math.html#put-math-in-its-place",
    "title": "2  Newsroom math",
    "section": "2.3 Put math in its place",
    "text": "2.3 Put math in its place\nFor journalists, numbers – or facts – make up the third leg of a stool supported by human stories or anecdotes , and insightful comment from experts. They serve us in three ways:\n\nAs summaries. Almost by definition, a number counts something, averages something, or otherwise summarizes something. Sometimes, it does a good job, as in the average height of Americans. Sometimes it does a terrible job, as in the average income of Americans. Try to find summaries that accurately characterize the real world.\nAs opinions. Sometimes it’s an opinion derived after years of impartial study. Sometimes it’s an opinion tinged with partisan or selective choices of facts. Use them accordingly.\nAs guesses. Sometimes it’s a good guess, sometimes it’s an off-the-cuff guess. And sometimes it’s a hopeful guess. Even when everything is presumably counted many times, it’s still a (very nearly accurate) guess. Yes, the “audits” of presidential election results in several states in 2021 found a handful of errors – not a meaningful number, but a few just the same.\n\nOnce you find the humanity in your numbers, by cutting them down to size and relegating them to their proper role, you’ll find yourself less fearful. You’ll be able to characterize what you’ve learned rather than numb your readers with every number in your notebook. You may even find that finding facts on your own is fun."
  },
  {
    "objectID": "start-math.html#going-further",
    "href": "start-math.html#going-further",
    "title": "2  Newsroom math",
    "section": "2.4 Going further",
    "text": "2.4 Going further\n\nTipsheets\n\nSteve Doig’s “Math Crib Sheet”\nAppendix A: Common newsroom math, adapted from drafts of the book Numbers in the Newsroom, by Sarah Cohen.\n\n\n\nReading and viewing\n\n“Avoiding Numeric Novcain: Writing Well with Numbers,” by Chip Scanlan, Poynter.com\nT. Christian Miller’s “Writing the data-driven story”\nA viral Twitter thread:\n\n\n\nWhat happens in your head when you do 27+48?\n\n— Gene Belcher (@Wparks91) June 25, 2019"
  },
  {
    "objectID": "start-math.html#exercises",
    "href": "start-math.html#exercises",
    "title": "2  Newsroom math",
    "section": "2.5 Exercises",
    "text": "2.5 Exercises\n\nImagine that someone gave you $1 million and you could spend it on anything you want. Write down a list of things that would add up to about that amount. That should be easy. Now, imagine someone gave you $1 billion and you could spend it on whatever you want, but anything left over after a year had to be returned. How would you spend it? (You can give away money, but it can’t be more than 50% of a charity’s annual revenues. So you can’t give 10 $100 million gifts!) See how far you get trying to spend it. A few homes, a few yachts, student loan repayments for all of your friends? You’ve hardly gotten started.\nImagine it is Jan. 1, 2020 and you are tasked with writing the annual weather story, summarizing the high and low points of the previous year. Using this daily summary of temperatures, rain and wind for Phoenix, try to find three interesting facts for your story. If you want to download your own data from NOAA, choose “Local Climatalogical Data,” and keep only the rows that refer to “SOD,” or “Summary of Day”."
  },
  {
    "objectID": "start-data-def.html#the-birth-of-a-dataset",
    "href": "start-data-def.html#the-birth-of-a-dataset",
    "title": "3  Defining “Data”",
    "section": "3.1 The birth of a dataset",
    "text": "3.1 The birth of a dataset\nIn “The Art of Access”, David Cuillier and Charles N. Davis describe a process of tracking down the life and times of a dataset. Their purpose is to make sure they know how to request it from a government agency. The same idea applies to using data that we acquire elsewhere.\nUnderstanding how and why data exists is crucial to understanding what you, as a reporter, might do with it.\nAs reporters, we usually deal with data that was created in the process of doing something else – conducting an inspection or paying a parking ticket. These “adminsitrative” datasets are created in government as part of administering government functions or programs. They form the basis of much investigative reporting and they are often the subject of public records and FOIA requests. They were born as part of the government doing its job, without any thought given to how it might be used in another way. In the sciences, those are often called “administrative records”.\nAnother type of data might be considered “digital trace” data, which often refers to social media posts, online publications and other items that are born in electronic form and posted publicly for anyone to view and use.\nAnother kind of data is that which is compiled or collected specifically for the purpose of studying something. It might collected in the form of a survey or a poll, or it might be a system of sampling to measure pollution or weather. But it’s there because the information has intrinsic value AS information. It is usually tabular information used for decision-making."
  },
  {
    "objectID": "start-data-def.html#granular-and-aggregated-data",
    "href": "start-data-def.html#granular-and-aggregated-data",
    "title": "3  Defining “Data”",
    "section": "3.2 Granular and aggregated data",
    "text": "3.2 Granular and aggregated data\nOne of the hardest concepts for a lot of new data journalists is the idea of granularity of your data source. There are a lot of ways to think about this: individual items in a list vs. figures in a table; original records vs. compilations; granular data vs. statistics.\nGenerally, an investigative reporter is interested in getting data that is as close as possible to the most granular information that exists, at least on computer files. Here’s an example , which might give you a little intuition about why it’s so important to think this way:\n\n3.2.1 Example: Death certificates\nWhen someone dies in the US, a standard death certificate is filled out by a series of officials - the attending physician, the institution where they died and even the funeral direcor.\n\n\n\ndeath certificate\n\n\nHere is a blank version of the standard US death certificate form – notice the detail and the detailed instructions on how it is supposed to be filled out. You should try to find a form or set of forms and instructions like this whenever you start working with a dataset.\nA good reporter could imagine many stories coming out of these little boxes. Limiting yourself to just to COVID-19-related stories: You could profile the local doctor who signed the most COVID-19-related death certificates in their city, or examine the number of deaths that had COVID as a contributing, but not underlying or immediate, cause of death. Or maybe you would want to map the deaths to find the block in your town most devastated by the virus.\nEarly in the pandemic, Coulter Jones and Jon Kamp of the Wall Street Journal examined the records from one of the few states that makes them public, and concluded that “Coronavirus Deaths were Likely Missed in Michigan, Death Certificates Suggest”\nBut you probably can’t do that. The reason is that, in most states, death certificates are not public records and are treated as secrets. 2. Instead, state and local governments provide limited statistics related to the deaths, usually by county, with no detail. Here’s an example from Arizona — note that we can only see statistics in the way the data source has decided we want to examine them, without access to the underlying information. There’s no way to look at age and race and gender combined for each county, just the generalized statistics for each category alone.\n\nThat’s the difference between granular data and aggregate data. Here are some of the typical (not universal) characteristics of each:\n\n\n\n\n\n\n\nGranular\nAggregate\n\n\n\n\nIntended for some purpose other than your work\nIntended to be presented as is to the public\n\n\nMany rows (records), few columns (variables)\nMany columns (variables), few rows (records)\n\n\nRequires a good understanding of the source\nExplanatory notes usually come with the data\n\n\nEasy to cross-reference and compile\nOften impossible to repurpose\n\n\nHas few numeric columns\nMay be almost entirely numerical\n\n\nIs intended for use in a database\nIs intended for use in a spreadsheet\n\n\n\nWe often have to consider the trade-offs. Granular data with the detail we need - especially when it involves personally identifiable information like names and addresses - can take months or years of negotiation over public records requests, even when the law allows it. It’s often much easier to convince an agency to provide summarized or incomplete data. Don’t balk at using it if it works for you. But understand that in the vast majority of cases, it’s been summarized in a way that’s lost information that could be important to your story."
  },
  {
    "objectID": "start-data-def.html#nouns",
    "href": "start-data-def.html#nouns",
    "title": "3  Defining “Data”",
    "section": "3.3 Nouns",
    "text": "3.3 Nouns\nThat brings us to one of the most important things you must find out about any data you begin to analyze: What “noun” does each row in a tabular dataset represent? In statistics, they might be called observations or cases. In data science, they’re usually called records. Either way, every row must represent the same thing – a person, a place, a year, a water sample or a school. And you can’t really do anything with it until you figure out what that is.\nIn 2015, we did a story at The New York Times called “More Deportation Follow Minor Crimes, Records Show” . The government had claimed it was only removing hardened criminals from the country, but our analysis of the data suggested that many of them were for minor infractions.\nIn writing the piece, we had to work around a problem in our data: the agency refused to provide us anything that would help us distinguish one individual from another. All we knew was that each row represented one deportation, not a person. Without a column that uniquely identified people – say, name and date of birth, or some scrambled version of an their DHS number – we had no way to even estimate how often people were deported multiple times. If you read the story, you’ll see the very careful wording, except when we had reported out and spoken to people on the ground."
  },
  {
    "objectID": "start-data-def.html#further-reading",
    "href": "start-data-def.html#further-reading",
    "title": "3  Defining “Data”",
    "section": "3.4 Further reading",
    "text": "3.4 Further reading\n\n“Basic steps in working with data”, the Data Journalism Handbook, Steve Doig, ASU Professor. He describes in this piece the problem of not knowing exactly how the data was compiled.\n“Counting the Infected” , Rob Gebellof on The Daily, July 8, 2020.\n“Spreadsheet thinking vs. Database thinking”, by Robert Kosara, gets at the idea that looking at individual items is often a “database”, and statistical compilations are often “spreadsheets”.\n“Tidy Data”, in the Journal of Statistical Software (linked here in a pre-print) by Hadley Wickham , is the quintessential article on describing what we think of as “clean” data. For our purposes, much of what he describes as “tidy” comes when we have individual, granular records – not statistical compilations. It’s an academic article, but it has the underlying concepts that we’ll be working with all year."
  },
  {
    "objectID": "start-data-def.html#exercises",
    "href": "start-data-def.html#exercises",
    "title": "3  Defining “Data”",
    "section": "3.5 Exercises",
    "text": "3.5 Exercises\n\nGet a copy of a parking ticket from your local government, and try to imagine what a database of those would look like. What would every row represent? What would every column represent? What’s missing that you would expect to find, and what is included that surprises you?\nThe next time you get a government statistical report, scour all of the footnotes to find some explanation of where the data came from. You’ll be surprised how often they are compilations of administrative records - the government version of trace data."
  },
  {
    "objectID": "start-data-def.html#footnotes",
    "href": "start-data-def.html#footnotes",
    "title": "3  Defining “Data”",
    "section": "",
    "text": "I flipped the order of these two definitions!↩︎\nSee “Secrecy in Death Records: A call to action”, by Megain Craig and Madeleine Davison, Journal of Civic Information, December 2020↩︎"
  },
  {
    "objectID": "start-data-diary.html#replication-and-the-data-diary",
    "href": "start-data-diary.html#replication-and-the-data-diary",
    "title": "4  Replication and the data diary",
    "section": "4.1 Replication and the data diary",
    "text": "4.1 Replication and the data diary\nThe formal processes used by AP might not work for smaller endeavors, but anyone can put the underlying ideas to work. At the Center for Public Integrity, Talia Buford, now at ProPublica, kept a simple Word document with her questions and code annotated to help her repeat her work. That “data diary” served as a backstop and roadmap for fact-checking.\nYour analysis and the way it’s characterized in publication must be demonstrably accurate. That means understanding exactly what you did, why, where it all is and how it should be communicated to a general audience. If you can’t describe exactly where the data came from, what you did to derive your findings, and where to find it all, it simply shouldn’t be published.\n\nThink of the data work the same way you think about interview notes or transcripts and any other research for a story. You wouldn’t quote a court case without reading it and probably talking to some of the participants. You’d make sure you know where to find the documents and what people say about them. You will consult those documents during your fact-checking. All data work – even the most short-lived – should be documented in at least the same detail. Ideally, someone reading through your notes would be able to repeat your work and understand what it means.\nYou also don’t want your future self to curse your present self. It is very likely you’ll have to drop the work at some point as other stories become more urgent and return to it months later. You should be able to pick up where you left off after briefly refreshing yourself on your work.\nThere are disagreements among reporters about how much to try to make our work replicable just as scientists do. Matt Waite’s rant on the subject prompted me to write a rebuttal. The right answer is probably somewhere in between."
  },
  {
    "objectID": "start-data-diary.html#first-steps-in-documentation",
    "href": "start-data-diary.html#first-steps-in-documentation",
    "title": "4  Replication and the data diary",
    "section": "4.2 First steps in documentation",
    "text": "4.2 First steps in documentation\nAnyone who has taken a hard sciences or computer programming class in school probably had to maintain a lab notebook. Your data diary is the same idea – a running list of sources and steps taken to get to the final answers.\nStart the documentation process before you even open a new dataset. For a quick daily story, you might be able to keep your work in one short document or as a page in a spreadsheet file. For a longer project, you may find it easier to break your documents apart into logical pieces. Most computer languages are self-documenting – they write out the steps taken. A data diary may not be necessary when a programming language is combined with narrative as in Jupyter Notebooks in Python or Quarto / R Markdown documents in R.\nWhether doing it alongside computer code or in a separate document, here are some sections that are worth considering whenever you start a story or project.\n\nData sourcing\n\nThe source of YOUR data, and how you know it’s authentic. Be specific. And don’t pretend you got it from the original source when you found it elsewhere, such as in this textbook or in a Github repository.\nDescribe the original source of the data and how it is collected and released.2\nIn a separate set of notes, reference other stories and studies that use this or similar data. Include interview notes, advice, warnings and findings along with stories that have already been done.\nIdentify alternative sources for this and similar or related datasets or documents.\nSpecifically write down where you have stored all of this and how you have organized your work. You want to make sure you can get back to the latest version easily, and that you have all of the supporting documents you need to check it.\n\n\n\nData documentation and flaws 3\n\nBe sure to include links or copies of any original documentation such as a record layout, data dictionary4 or manual. If there isn’t one, consider making a data dictionary with what you’ve learned.\nDocument the ways you checked the integrity of the data. There are many ways it might be inaccurate. Try to reconcile the number of rows and any totals you can produce to match other reports created by the source, or other reports that have used it. On longer stories, you’ll also check for impossible combinations (10-year-olds with DUIs), missing data, improper importing or exporting of dates, among other things. (We’ll come back to this.)\nRecord any questions (and answers as you get them) about the meaning of fields or the scope of the data.\nDocument decisions you’ve made about the scope or method of your analysis. For example, if you want to look at “serious” crimes, describe how and why you categorized each crime as “serious” or “not serious.” Some of these should be vetted by experts or should be verified by documenting industry standards.\nInclude a list of interviews conducted / questions asked of officials and what they said.\n\n\n\nProcessing notes 5\nSome projects require many steps to get to a dataset that can be analyzed. You may have had to scrape the data, combine it with other sources or fix some entries. Some common elements you should document:\n\nHand-made corrections. Try to list every one, but it’s ok if you describe HOW you did it, such as clustering and hand-entering using OpenRefine. Link to any spreadsheet, document or program you used. Just be sure to always work on a copy of the data.\nGeocoding (affixing geographic coordinates to addresses). Note how many were correct, how many missing, and what you did about it.\nA description of how you got messy data into a tabular form or a form suitable for analysis. For example, you may have had to strip headings or flip a spreadsheet on its head. Make sure to write down how you did that.\n\n\n\nThe good part: Your analysis\n\nEach question you asked of your data, and the steps you took to answer it. If you use programming notebooks, write it out in plain language before or after the query or statements.\nVetting of your answers: who has looked them over, commented on them\nWhy they might be wrong."
  },
  {
    "objectID": "start-data-diary.html#examples-of-documentation",
    "href": "start-data-diary.html#examples-of-documentation",
    "title": "4  Replication and the data diary",
    "section": "4.3 Examples of documentation",
    "text": "4.3 Examples of documentation\n\nA published Jupyter notebook for an analysis of FEC enforcement actions from the Los Angeles Times’ data desk. Ben Welsh, the author of that notebook, says that there are previous versions with unpublishable work.\nA 2018 Buzzfeed News repo with start-to-finish documentation of an opioid deaths story.\nOne year, I created a dataset for practice in class that contained information on population changes in Arizona counties. It turned out not to be an awesome exercise, but I created an example data diary to go with it that is more instructive than the data itself.\nData cleaning will come up a lot in the future, but it’s closely intertwined with documenting your work. Here’s an email exchange between me and Craig Silverman, now at ProPublica, about the process I used at The New York Times in reporting and fact-checking. This isn’t the same as a process for replication, but it discusses the kinds of things that should be in it."
  },
  {
    "objectID": "start-data-diary.html#footnotes",
    "href": "start-data-diary.html#footnotes",
    "title": "4  Replication and the data diary",
    "section": "",
    "text": "Hoyer is now the manager of the Washington Post’s data team, which allows reporters to use R, Python or even SAS. But they still save and organize their projects so that another person can review and replicate them.↩︎\nIf you want to see a project with a lot of data sources and how they might be documented in your notes, take a look at the New York City housing data sources we considered for a project in 2016.↩︎\nHere is an example from the New York State housing court↩︎\nA data dictionary lists every table and column in the database, along with definitions. It may be very straightfoward but can become quite complex.↩︎\nHere is an example from one very complicated dataset↩︎"
  },
  {
    "objectID": "start-hunt.html#an-example-news21-hate-in-america",
    "href": "start-hunt.html#an-example-news21-hate-in-america",
    "title": "5  Finding the right data for your story",
    "section": "5.1 An example: News21 “Hate in America”",
    "text": "5.1 An example: News21 “Hate in America”\n\n\n\n\nIn 2018, News 21 – the multi-university investigative reporting fellowship hosted by ASU’s Cronkite School of Journalism – chose “Hate in America” as its topic for the year. It was a risk because others had been reporting on the subject for more than a year, making it more difficult for News 21 to break new ground. It was also difficult because it became clear quite quickly that no one had documented every case of hate crimes or hate-driven incidents in the U.S.\n\nData News 21 used\nThat meant that the team had to find some creative way to quantify the problem. Some of the sources they used included:\n\nRaw data from the National Crime Victimization Survey, an annual survey of crime victims that asks whether hate was an element of the crime. Reporters Catherine Devine and Allie Bice could have used data from a report produced by the Justice Department, but instead analyzed the raw data in a new way to show that about twice as many incidents may have been motivated by hate than previously acknowledged. That analysis was thoroughly vetted by experts in the survey, in hate crimes, and in criminology. It also created a structure around the entire package and provided a newsy lead to the overview story\nA database created by a team of reporters who monitored two weeks’ of social media activity from users associated with white nationalists, new-Nazis and other far-right groups on sites including Twitter, Facebook, Gab and VK. It enabled Kia Gardener to write:\n\n\nNews 21 monitored the daily social media activity of various far-right users, including white nationalists and neo-Nazis, from June 10 to June 24. Those tracked had more than 3 million followers combined. Reporters recorded and compiled more than 2,500 posts on popular platforms, such as Twitter and Facebook, and emerging social media platforms, including Gab and VK.\n\n\nAbout half the posts were directed at specific demographics or communities, from black Americans and Latinos to Jewish people and LGBTQ members….\n\n\n– Social Media: Where voices of hate find a place to preach, News 21, August 2018\n\n\nFederal prosecutions of hate crimes under the various federal statutes. Reporter Lenny Martinez scraped all of the Justice Department’s hate crime-related press releases to find cases the government bragged about. Those cases were supplemented by a list of cases extracted from Westlaw federal case database. The team logged each case in a Google sheet to show what kinds of incidents were pursued by federal prosecutors, and where.\nProPublica’s “Documenting Hate” project, which, with the Southern Poverty Law Center, tried to compile as many stories as they could about hate incidents. ProPublica’s database was a tip sheet, not a quantification. But it served one key goal of any data source: a source reporters could consult when seeking specific types of examples in specific locations.\nThe FBI Uniform Crime Report’s Hate Crime series. They quickly learned that the data is seriously flawed because of non-response from local police departments and a squishy definition of what should be included. Another flaw was that others, including ProPublica, had thoroughly reported on those flaws and the trends in the data, meaning it failed the test of newsworthiness.\n\n\n\nData the team didn’t use\nThere were also sources that the team considered but didn’t pursue, sometimes because of the difficulty and sometimes because they were less useful to the project than expected:\n\nThe Justice Department’s U.S. attorney case management system, which provided details on cases that the government chose not to pursue along with those they did. (A subsequent analysis showed that the vast majority of these cases were rejected by prosecutors, but vetting the analysis proved too difficult in the time available.)\nDatabases of graffiti maintained by local police departments. This would have required public records requests to each department for records that usually aren’t clearly public. The team also contacted Google and other companies that publish street level images to see if it would be possible to isolate the hate symbols. Companies declined release images that their users had flagged as offensive.\nHistorical questions from the Roper Center for Public Opinion Research and the General Social Survey that might have shed light on attitudes about race and religion over time. These proved to be difficult to match up over the years and didn’t really provide much insight.\n\nThese are just some of the ways the News 21 team looked far and wide for any sources that could be methodically used to document their stories. As with any project of this type, the search often failed but along the way the whole team learned more and more about the topic and got to know experts in a way they wouldn’t have if they were just seeking quotes."
  },
  {
    "objectID": "start-hunt.html#finding-data-and-documents",
    "href": "start-hunt.html#finding-data-and-documents",
    "title": "5  Finding the right data for your story",
    "section": "5.2 Finding data and documents",
    "text": "5.2 Finding data and documents\nA big part of data reporting is finding, creating or acquiring records you can use electronically.\nSome sources of readily available data could include:\n\nGovernment agencies and open government sites\nHobbyists and interest groups\nData aggregators and data collectors\nAcademic researchers who might share their data\nMicrodata from surveys and some government programs, such as the Census, Medicare, the General Social Survey and several other standard sites.\nSocial data through API’s from Spotify, Twitter and other services.\nDetails scraped from online data sources that aren’t available in bulk.\n\nThere are also more difficult ways to find data:\n\nPublic records requests\nWhistleblower leaks\nHome made databases created from documents, and free text or image document collections.\nResponses to a survey that you conduct yourself.\nYour own testing on issues such as water quality or soil contamination.\n\nWhen you start on a project, you’ll usually rely on experts and advocates to lead you to a lot of the possible data sources. But you can also use these strategies to troll for interesting datasets that might make for good stories or practice.\nListen to any caveats and warnings. You may decide that they’re not important, but you don’t want to be blindsided by them in the end. And be sure to ask what they would do if they were you – often, people who have expertise in data have story or project ideas that they can’t get funded or approved, and would be happy for someone else to do them.\nWhen you search using Google, try to use the advanced commands to more precisely hit your target. This tipsheet goes through all of the Google advanced search operators. It changes a lot.\n\n5.2.1 Government agency sites\nTry to guess what government agencies – state, local and federal – have an interest in your topic. Browse through their websites to find “Publications” or “Data and research”, or any searchable database. You’ll often find downloadable data there. Once you learn more, you can also evaluate how hard it will be to scrape the data you want. Don’t limit yourself to the jurisdications you care about. If one city or state has a good dataset, there is a strong chance that your local government will have the same thing.\nLook at federal agency sites to find a least common denominator database – they are usually compiled from more detailed state or local reports.\nEven if you can’t find the database, you might be able to find the name of a datset that is maintained internally in audits, footnotes of reports, or IT initiatives.\nOnce you know a good agency to search, use advanced Google searches for filetype:csv or filetype:xlsx, and limit the site to an agency or city site to bring up datasets that they are letting users download.\n\n\n5.2.2 News reports\nOne of the most useful sources to find the names of databases and their original sources is news reports that relied on the data, or refers to a data source quoted by experts. It doesn’t matter if you’re looking at your own area or others – most places have the same kinds of information collected and stories are similar across geographic areas.\nYou should get good at using all of the resources as precisely as you can. That means getting very familiar with advanced searching in Google, and using LexisNexis and other news databases provided by the ASU library. These offer much more targeted searching than the usual Google search, and will result in much more on-point stories. When you find a good story, consider logging it in a spreadsheet or in doc, and identify:\n\nWho wrote it and when\nWhat government sources of data are explicitly mentioned.\nWhat analysis of that data was done by the news outlet, or what research it depended on.\nAny terms of art that seem to be used around your topic. For example, hate crimes are more frequently referred to as “bias” crimes in many articles – searching for “hate” might not surface them.\n\n\nIRE.org tipsheets\nAnother source for information on news stories that used data reporting is IRE, which has two ways to search for more details: the ire.org tip sheets and story archive. Log into IRE.org and choose the tipsheets to look for guides from other reporters; choose the story database to look for stories on your general topic and then click into the form that the reporters filled out that go through their sources. You’ll often find a pair of them – a story, and a tip sheet – that were done by the same person the same year.\n(The database library is currently undergoing some review, so a lot of the data listed there could be out of date. But it might also point you to standard sources for data.)\n\n\n\n5.2.3 Academic articles\nMake sure to do a Google Scholar search for your topic. You will often find one or two researchers who have delved into your subject or a single source. This is often a great shortcut. For example, in the News 21 example, a search of hate crimes in Google Scholar identified an article called “Documenting Hate Crimes in the United States: Some consideration on data sources,” from APA PsycNet. Although this was specifically about sexual orientation and gender diversity, it cataloged the different ways that scholars try to document bias crimes. Once Devine settled on the crime victimization survey, another Google scholar search surfaced an expert on the survey who wrote about how it had changed over the years. He turned out to be the former chief of the Justice Department section that ran the survey, and was one of the project’s best sources. Another source led her to the book, “Statistics for Criminology and Criminal Justice.” One of the authors of that book also provided advice.\nAnother value of this approach is that it will help you find the technical jargon for the topic you’re studying. It’s often very difficult to do literature searches without knowing that term.\n\n\n5.2.4 Think tanks / interest groups\nTry to find some interest groups that care a lot about your topic on all sides. They often have websites with recent research on your topic and might have experts you can consult. Take their advice cautiously because they often have a point to prove and are unabashed about twisting data to make their point. However, you can often use their raw data to draw your own conclusions. Some news organizations frown on this, so be sure to be transparent about who they are and what they’ve done.\nAnother good way to use interest groups and think tanks is to get initial versions of public records from them while you wait for your own requests to be processed. At The Washington Post, we used an old version of a weapons trace database for a year while we fought the government for our own; we also used a copy of Agriculture subsidies acquired by the Environmental Working Group while we were waiting for our own public records requests to be completed.\nSometimes, gathering the Tweets from advocates can provide a rich dataset, and it’s relatively easy to do. For example, I once used the Twitter posts from the Police Misconduct project out of the Cato Institute to get a list of all of the stories they’d compiled on the topic.\n\n\n5.2.5 Data collectors\nSeveral sites are trying to make businesses out of collected and maintaining databases. Others make available data that they have collected in the past.\nBe sure to look at the original source for any data you find there. You wouldn’t say a news article came from Google News or Lexis, and you wouldn’t say a dataset came from Google Data Search. If it’s not documented at all, you might have to contact the owner for more detail.\nBe careful of most of these. They’re often old, undocumented and poorly vetted. But they will give you a sense of what you might be able to get from a more reliable source, or give you ideas for your own data collection effort.\n*data.world** wants to be the Facebook or Instagram of data. It has both private and public accounts, and users upload data they want to share. This means it’s as varied as the people who are in it.\nIf your newsroom is an AP member, you might have access to its data.world feed, which contains its curated and documented data that local newsrooms can use for their own stories. Some reporters also use data.world to store their public records. Some government agencies are posting their data directly to data.world. But in other cases, they’re undocumented hobbyists.\nVet these the same way you would Google results.\n*Journalists’ sites** You can often find individual journalists or journalism organizations in various sharing sites, including Github (which doesn’t show up in default Google searches), data.world and other versioning. Look through their sites to see what they have collected – it’s there to share. Fivethirtyeight, ProPublica and the Los Angeles Times have particularly active data archives.\n*Google data search** is, well, the Google of data. In general, data search has limited sources and is more and more frequently logging data sets that are posted by state and local government sources.\nIt makes no attempt to curate the search, though, so be cautious when you find something.\nOne use for the dataset search is to see what other cities and counties have voluntarily released. When you see that, it often means your local or state government might have similar data you can request.\nFor example, searching for police shootings brings up a dataset released by the Orlando Police Department, which contains far more detail than the same dataset released by Phoenix in 2018:\n\n\n\norlando pd\n\n\nBe sure to look for different terms meaning the same thing. For example, searching “use of force” brings you to completely different sets of data than “police shootings”."
  },
  {
    "objectID": "start-hunt.html#vetting-data-provenance",
    "href": "start-hunt.html#vetting-data-provenance",
    "title": "5  Finding the right data for your story",
    "section": "5.3 Vetting data provenance",
    "text": "5.3 Vetting data provenance\nBefore you even open a dataset, you should know how your dataset was collected, who it originally came from and how current it is. A future chapter will go through many of the ways reporters check data they’ve found for completeness, mistakes or other problems.\nAt first blush, look for anything that precludes using the data because you can’t identify who is responsible for it or how it was collected. This is the same basic vetting you’d do on any source you hope to use.\nLook for:\n\nThe original source. If you are getting it from a secondary source, look to see how hard it will be to get from original. If it’s from a secondary source, how reliable is it? Are you going to be comfortable crediting them for the data? If you can’t identify where or how the data was collected, you probably can’t use it.\nHow others have used it and what criticisms were made of that use.\nThe timeliness of the data. Anything more than two or three years old will be effectively useless for a news article. If it’s old, you should have a plan for how it will be updated.\nData definitions, data dictionaries or record layouts. These are maps to the underlying data, and those definitions can prove difficult to understand."
  },
  {
    "objectID": "start-build-own.html#the-evolution-of-a-home-made-database",
    "href": "start-build-own.html#the-evolution-of-a-home-made-database",
    "title": "6  Build your own database",
    "section": "6.1 The evolution of a home-made database",
    "text": "6.1 The evolution of a home-made database\nThe day in December 2015 that a San Bernadino couple killed 14 people, The New York Times published a short story called “How Often Do Mass Shootings Occur? On Average, Every Day, Records Show”.\nThat daily story spurred the Times to embark on a project to document each mass shooting in America for a year. Five months later, it published this story:\n\n\nHere is how Sharon LaFraniere, Daniela Porat and Agustin Armendariz described the results of their work about 10 paragraphs into the story. (I suggest you also read the lede on your own - it’s an exquisite example of framing a lede anecdote with detail and context.)\n\nSeeking deeper insight into the phenomenon, The New York Times identified and analyzed these 358 shootings with four or more casualties, drawing on two databases assembled from news reports and citizen contributors, and then verifying details with law enforcement agencies.\nOnly a small handful were high-profile mass shootings like those in South Carolina and Oregon. The rest are a pencil sketch of everyday America at its most violent.\nThey chronicle how easily lives are shattered when a firearm is readily available — in a waistband, a glove compartment, a mailbox or garbage can that serves as a gang’s gun locker. They document the mayhem spawned by the most banal of offenses: a push in a bar, a Facebook taunt, the wrong choice of music at a house party. They tally scores of unfortunates in the wrong place at the wrong time: an 11-month-old clinging to his mother’s hip, shot as she prepared to load him into a car; a 77-year-old church deacon, killed by a stray bullet while watching television on his couch.\nThe shootings took place everywhere, but mostly outdoors: at neighborhood barbecues, family reunions, music festivals, basketball tournaments, movie theaters, housing project courtyards, Sweet 16 parties, public parks. Where motives could be gleaned, roughly half involved or suggested crime or gang activity. Arguments that spun out of control accounted for most other shootings, followed by acts of domestic violence.\nThe typical victim was a man between 18 and 30, but more than 1 in 10 were 17 or younger. Less is known about those who pulled the triggers because nearly half of the cases remain unsolved. But of those arrested or identified as suspects, the average age was 27.\nMost of the shootings occurred in economically downtrodden neighborhoods. These shootings, by and large, are not a middle-class phenomenon.\nThe divide is racial as well. Among the cases examined by The Times were 39 domestic violence shootings, and they largely involved white attackers and victims. So did many of the high-profile massacres, including a wild shootout between Texas biker gangs that left nine people dead and 18 wounded.\nOver all, though, nearly three-fourths of victims and suspected assailants whose race could be identified were black. Some experts suggest that helps explain why the drumbeat of dead and wounded does not inspire more outrage.\n\nNotice how the authors weave the details that were chronicled in their database with the data points. Now, try to imagine how their dataset might have been organized to allow for such a rich description of the phenomenon.\nThe database, built by Armendariz, and mostly reported by Porat, was designed to anticipate this writing phase:\n\nThe database was split into two separate tables – one that detailed the 358 events and another that detailed the 1,592 victims.\nIt included links to original FOIA requests and documentation they’d need for fact-checking.\nSome columns were categories or items that would be summarized – the ages and ethnicity of the victims, the severity of the injury, and whether it was solved. But much of the data included was detailed descriptions that could be searched using sophisticated filters. Still others were tagged with one-word descriptions that allowed the reporters to pluck just the right examples for just the right part of the story, using words like “suspected gang”, “child”, or “party”. Over time, these tags were reviewed and revised, which is common on small databases like this.\nFact-checking and information for publication was included in the database. For example, the database logged photos, interview and contact notes, and specific entries for name spelling and fact checks. That way the reporters could focus on what was NOT ready for publication, rather than review things they’d already checked.\n\nWhat didn’t they do?\nThey didn’t bother to standardize names and addresses into their pieces – they had no interest in counting how many “Smith”s were in the database, and didn’t care how often they occurred a Main Street.\nIn other contexts, these fields might be important, but they were only required for filtering and sorting, not for counting. There was no reason to make it more difficult to fill out the database than necessary.\nThey also didn’t try to publish the full dataset. That’s an important consideration, especially if the data you are collecting contains sensitive or potentially erroneous information. Getting it to that level of accuracy might have added several months to the project, and probably would not have served readers any better. (The bare bones list of cases, with a few exceptions, was already available and updated elsewhere.)"
  },
  {
    "objectID": "start-build-own.html#when-to-build-your-own-database",
    "href": "start-build-own.html#when-to-build-your-own-database",
    "title": "6  Build your own database",
    "section": "6.2 When to build your own database",
    "text": "6.2 When to build your own database\nThere are a few common reasons to design and build your own data for stories:\n\nThere is a long-running story that is periodically updated with new documents or events that you want to track.\nOne reporter created a spreadsheet to log each event related to Jack Kevorkian, a doctor who became famous for helping people commmit suicide. His list made it easy for him to write a story every time another person died, because he had the full list of people and circumstances and knew what he’d already fact-checked.\nMy first data-driven set of stories came from following the actions of George Steinbrenner, the former principle owner of the New York Yankees, whose family owned a failing shipbuilding company in Tampa in the early 1990s. After I pressed the “sort” button, I discovered that each time he helped the company gain new Navy contracts by lending it money, he demanded repayment as soon as the contract was signed, sending it back into a downward spiral.\nYou are getting information from disparate sources and you need an easy way to search them, arrange them chronologically, and keep track of what you need to verify. Examples include reviewing court cases across jurisdictions or compiling death records from many medical examiners’ officers. This would also work for tracking your own FOIA requests. You’ve read about this in Michael Berens’ story of a serial killer in Illinois.\nYou want to fill in details for every item on a list, like the mass shootings story above. This is quite common – you might have a list of opioid overdose deaths from the medical examiner, but you want to fill out the details of this case. At USA Today, Anthony DeBarros did this after 9/11 to tell the story of every person killed in the World Trade Center, including where they were when the planes hit."
  },
  {
    "objectID": "start-build-own.html#tools-for-building-databases",
    "href": "start-build-own.html#tools-for-building-databases",
    "title": "6  Build your own database",
    "section": "6.3 Tools for building databases",
    "text": "6.3 Tools for building databases\nThe simplest tool for a one-table database is just Google Sheets or Excel. In both Google and Microsoft 365, it’s possible to create a data entry form that will feed into a form, so you can make it a little more structured than just a free-form spreadsheet. But when it gets a little more complicated or you want more control over the data types and choices, you might choose to use a different product.\nAirtable is one option (ASU has an enterprise account, which will kick in when you create an account with your school email address). More recently, Microsoft created “Lists” to your 365 account, and Google added “Tables” to your Google account. Airtable and Tables are quite limited in the free edition – so limited that you may find it doesn’t meet your needs. But even if you can’t use it for your full dataset, it might be useful as a sandbox for you to test different ways to set up your dataset.\nThese products let you set up related tables, such as the events events and people tables used in the Times story, and create tags or other structured items for you spreadsheet. They’re also good for working in teams."
  },
  {
    "objectID": "start-build-own.html#how-to-start",
    "href": "start-build-own.html#how-to-start",
    "title": "6  Build your own database",
    "section": "6.4 How to start",
    "text": "6.4 How to start\nWork with everyone who might use the dataset before you start to set out goals. Think about the full range of issues that might come up. Most importantly, how are you going to get the information and how long will it take? Is it just a list of things in chronological order or to provide a quick overview of your reporting? Or are you trying to count specific types of events, such as police shootings by race or gender or the lawyer who has had the most disciplinary actions taken?\nThe difference is whether you are primarily using your dataset for sorting and filtering versus grouping and counting by category.\nYou should also assume that you won’t be able to get all of the information you’d hoped, and that real life doesn’t often fit into neat rectangular boxes. So it’s fine to put in some aspirational columns in case you can get the details, but be sure to stay realistic. If it takes too long to fill out a row in your database, you won’t do it.\nHere are some other considerations:\n\nTry to find an interest group or academic researcher who has already tried to tally the information you’re collecting. They may have good structures that you can adapt to your project. If you can’t, try to find a standard that you want to measure your results against – was a policy followed or not, or was a case solved or not? These are the key statistics that will identify the newsworthiness of your results.\nCarefully define your “universe”. In the case of the Washington Post’s Pulitzer Prize-winning “Fatal Flaws” series on deadly police shootings, the reporters chose to focus only on deaths that were the result of gun discharges in the line of duty. That means they aren’t able to talk about all of the people killed by police, nor all of the people killed in custody, because some happen off hours and others are strangulations or other causes of death. In other cases, you may choose to FOIA the top 50 cities or counties and ignore all the rest. It’s ok to limit your universe. Just be sure that your entire team knows and agrees to the definitions and the limits that places on the results.\nWhat is your unit of analysis, or the noun you use to describe a row in your database? Do you want to count events, people, cases, years, or something else? If so, you should have one and only one row for each of those things, which may mean splitting your work inot more than one data frame or table, the way the Times reporters did for people and events.\nBuild your data dictionary before you start filling out the database, and keep adjusting it as you have to adapt to the real world. Make sure to include a detailed data type (eg, a list separated by semicolons, long text, category, number, date….), and list any standardized words or codes you plan to use (“Y” or “N” for yes and no, for example) .\nReduce the number of columns by smartly combining categories into tags, and considering the way you’ll use a field. For example, sorting by street name isn’t usually very useful (especially when you can filter for it), so there may be no reason to split the street number, name, etc. into different columns. If you enter names in a standard format (eg, Last, First Middle Suffix), then they’re easy to split later on but can be kept in one column and still be sorted. In other words, consider whether you want to be able to sort, filter or count entries. Each of them requires a different level of standardization.\nAnticipate errors. One of the more common problems in creating your own dataset is that the whole purpose of it is to sort or arrange it by date, so you have to enter dates properly. But we rarely do get the exact date for every item in the list. There are several strategies for this, such as entering year, month and day in different columns; or entering an approximate date, and flagging it as “approximate” in a separate field (my preference).\nBuild in fact-checking. If nothing else, be sure to include the source of the information in the row, and provide a way to get back to the original quickly. For example, if you are typing in events from a court case, enter a link to the case folder in one field, and the page number of the item you’re entering in another. If I’m publishing anything from the dataset, I include columns for name checks, fact checks and even whether the narrative has been copy edited.\nHow many columns do you really want? On a spreadsheet, things can bet pretty unwieldy pretty fast. Try to avoid having more than about 15 columns, and try to define them so that most are filled out.\n\nThis is an example of a spreadsheet created to log the first 100 days of the Obama administration. The “subject_tags” column let the reporters enter a variety of categories, which were then normalized when it came time to use them.\n\n\n\n100 days\n\n\nThose tags resulted in it being relatively easy to create graphics like this by filtering for related tags and ordering it by date:\n\n\n\nreversals"
  },
  {
    "objectID": "start-build-own.html#an-example",
    "href": "start-build-own.html#an-example",
    "title": "6  Build your own database",
    "section": "6.5 An example",
    "text": "6.5 An example\nIn 2013, the New York Times and Frontline collaborated on a story on police-involved domestic violence. Most of the story was a narrative of a single case. But it was important to show that this was not the first time the sheriff in the Florida county was slow to investigate his deputies. Another case several years earlier had the same telltale problems.\nThe Times obtained several key documents in the other case.* You can read a copy of the internal affairs report yourself, but you quickly come away realizing that it’s hard to follow, repetitive and you’re never quite sure what’s happened. Here is the record layout of the table that we built, and a small snippet of what it looks like.\n\n\n\ndata dict\n\n\nAnd here is what a few rows look like. Notice that they are not organized chronologically, but are organized in the order that they were listed in the underlying document. The “sort” button turns it into a chronology.\n\n\n\nsjso-example\n\n\nAnd finally, here is what was written about the case in the final story:\n\nA year before that, Sheriff Shoar’s disciplinary posture had been called into question in a domestic violence case involving a deputy named Halford (Bubba) Harris II.\nTwo supervisors learned of accusations that Mr. Harris had abused his wife. But no investigation was immediately opened, records show.\nOne sergeant did prepare an affidavit documenting the accusations. But he was told by his supervisor to hold it back, so he stuck it under the visor in his squad car, where it remained, even after another officer became aware of further incidents, according to Mr. Harris’s internal affairs file.\nThe case came to a head on Christmas Eve, when his wife fled their house and called the police. Internal affairs officers uncovered other possible acts of domestic violence before his hiring, records show. His wife said that before they married, he had held a knife to her throat and hit her. His ex-wife said he had threatened her with a gun. No charges were filed.\nCol. Todd R. Thompson, the sheriff’s director of law enforcement, recommended that Mr. Harris be fired, saying his actions were “particularly egregious and trouble me deeply.”\n\nWas it necessary to create a spreadsheet logging almost 100 events in this case? No. But we had to go through every document in detail anyway, and this meant we didn’t have to do it over and over again."
  },
  {
    "objectID": "xl.html",
    "href": "xl.html",
    "title": "Spreadsheets",
    "section": "",
    "text": "Introduction\nSome people consider using spreasheets the table stakes for getting into data journalism. It’s relatively easy to see what you’re doing and you can easily share your work with your colleagues. In fact, pieces of the Pulitzer-Prize winning COVID-19 coverage from The New York Times was compiled using an elaborate and highly tuned set of Google spreadsheets with dozens of contributors.\nThis guide uses Excel for the Mac from Office 365, which most newsrooms still have. The reason is that they’re a little easier to get around and in particular have more options for pivot tables – a crucial part of the table stakes. But Google sheets shine elsewhere in this book, particularly when it comes time to scrape websites or import non-tabular file formats like JSON.\nExcel in Windows is very different – it has much more capability for working with large and more complex data, and provides better tuning for import and other operations.\nMost of the screen shots and instructions are created with a MacOS Monterey. Some come from earlier Mac versions, but are largely the same now. Windows users should replace any instructions for using the CMD- key with the CTL- key. There is a table that compares keystrokes for Apple desktops, laptops and Windows machines for Excel at the bottom of An Excel Refresher"
  },
  {
    "objectID": "xl-refresher.html#re-learning-excel-from-the-ground-up",
    "href": "xl-refresher.html#re-learning-excel-from-the-ground-up",
    "title": "7  An Excel Refresher",
    "section": "7.1 Re-learning Excel from the ground up",
    "text": "7.1 Re-learning Excel from the ground up\n\nThe spreadsheet grid\n\n\n\nWhen you start up a spreadsheet, you’ll see letters across the top and numbers down the side. If you ever played Battleship, you’ll recognize the idea – every little square, or cell, is referenced by the intersection of its column letter and row number:\nB2 is the cell that is currently active. You can tell because it’s outlined in the sheet and it’s shown on the upper left corner.\n\n\nMouse shapes\n\n\n\n\n\n\n\nBFWPS: The Big Fat White Plus Sign. This is the default shape, and you can never get into trouble when you see it\n\n\n\nThe Copy Tool, or the thin black cross. When you see this, you’ll copy anything that’s selected. This can be good or bad.\n\n\n\nThe Evil Hand. (In Windows, this is the Evil Arrow). If you use this symbol, you will MOVE the selection to a new location. This is very rarely a good idea or something you intend.\n\n\n\n\n\n\nSelecting cells and ranges\nSpreadsheets act only on the cells or regions you have selected. If you begin typing, you’ll start entering information into the currently selected cell.\nTo select: Hold the BFWPS over the cell and clice ONCE – not twice. Check the formula bar to make sure you’ve selected what you think you’ve got. You can also look at the bottom right of your spreadsheet for more information.\nYou’ll often work with ranges of cells in formulas. These are defined by the corners of the area you want to work on – often a column of information. In the example below, the range is A1:B6, with the “:” referring to the word “through”.\nTo select a group of cells and act on them all at once: Hover the BFWPS over one corner, click ONCE and drag to the diagonal corner. Make sure the Evil Hand is nowhere to be seen. The entire area will be shaded in except for the currently selected cell. Look at the upper right corner to see how many rows and columns you selected.\n\n\n\n\nTo select a column or row : Hover the BFWPS over the letter at the top of the column. For a row, hover it over the row number in the margin\n\n\nReading the screen\n\nThe areas of the spreadsheet have different visual clues, and learning to read them will make your life much easier.\nThis image shows some key areas on the screen when you’re just viewing the sheet:\n\n\n\nready\n\n\nThis is how it changes when you’re editing\n\n\n\nediting\n\n\n\nEntering data\nSelect the cell and start typing. The information you type won’t be locked into the cell until you hit the Return / Enter key, or move your selection to another cell. Hit “Escape” to cancel the entry.\nYou can’t do a lot of things while you’re editing, so if you have a lot of greyed out menu items, look at your formula bar to see if you are still editing a cell.\nIf you’re having trouble getting to a menu item or seeing the result of your work, try hitting “Escape” and try again. You may not have actually entered the information into the sheet.\n\n\nLocking in headings\nAs your spreadsheet grows vertically with more rows, you’ll want to be able to see the top all the time. When it grows horizontally with more columns, you’ll probably want to see columns in the left, such as names. This is called “Freezing Panes” – you freeze part of the page so it stays in place when you move around.\nSelect the corner that you want frozen. For example, if you want the first three columns frozen (A:C) and the first row frozen (1), then select the cell in D2. This is the first cell that will move, and everything to the left of it and above it will stay on the screen.\n\n\n\nfreeze panes\n\n\n\n\nFormatting tricks\n\nUse the buttons or the format dialog box to make numbers easier to read.\nIf a column is filled with a lot of text, select the column and look on the Home ribbon next to the formatting area for “Wrap Text”. This means that when you double-click to widen a column, it will get taller, not wider. This is good when you need to save valuable real estate on the screen."
  },
  {
    "objectID": "xl-refresher.html#getting-started-with-a-dataset",
    "href": "xl-refresher.html#getting-started-with-a-dataset",
    "title": "7  An Excel Refresher",
    "section": "7.2 Getting started with a dataset",
    "text": "7.2 Getting started with a dataset\nSLOW DOWN! Don’t do anything until you understand what you have in front of you and can predict what your next mouse click will do to it.\nMost data we encounter was created by someone else for some purpose other than ours. This means that you can’t assume anything. It may not be complete. It may be inaccurate. It may mean something completely different than it appears at first blush.\n\nFirst steps\n\nDocument where you got the spreadsheet and how you can get back to the original.\nRead anything you can about what it contains. Look for documentation that comes with the data.\nSave the original into a safe place with its original name and metadata. Work on a copy.\nIf the spreadsheet shows #### instead of words or numbers, widen your columns. If it shows 7E-14 or something like that, format them as numbers, not “General”.\nCheck your corners – look at the top left and bottom right. Is the data all in one area? Are there footnotes or other non-data sections mixed in? We’re going to want to fix that later.\n\n\n\nInterview your data\n\nHeadings\nThe most fraught part of data reporting is understanding what each column actually means. These often have cryptic, bureaucratic names. You may need to go back to the source of the data to be sure you actually understand them.\nIf your data doesn’t have any headings, that’s going to be your first priority. In effect, you’ll need to build what we call a data dictionary or record layout if one hasn’t been provided. Many reporters create these as a page in a dataset.\n\n\nUnit of analysis\nA unit of analysis refers to the items that are listed in the rows of your dataset. Ideally, every row should be at the same unit of analysis – a person, an inspection, or a city, for example. Summaries should be separated by a blank row, or moved to a different sheet. Think of this as the noun you’d use to describe every row.\n\n\nRow numbers\nThe data was probably given to you in some sort of natural sort order. Different computer systems sort differently – some are case-sensitive, others are not. It may depend on when and where the data as created! The order of the data may even depend on a column you don’t have. If you don’t do something now, you’ll never be able to get back to the original order, which could have meaning for both the agency and for fact-checking."
  },
  {
    "objectID": "xl-refresher.html#video-walkthrough",
    "href": "xl-refresher.html#video-walkthrough",
    "title": "7  An Excel Refresher",
    "section": "7.3 Video walkthrough",
    "text": "7.3 Video walkthrough\nThese first steps, along with adding an ID row, are shown here. You can follow along with the same dataset."
  },
  {
    "objectID": "xl-refresher.html#keyboard-shortcuts",
    "href": "xl-refresher.html#keyboard-shortcuts",
    "title": "7  An Excel Refresher",
    "section": "7.4 Keyboard shortcuts",
    "text": "7.4 Keyboard shortcuts\nFor Mac users, it’s much easier to use Excel if you override the action of function keys while you’re in the program. In your Mac’s System Preferences, choose Keyboard, and select the box that says, “Use F1, F2, etc. as standard function keys.” (NOTE: If you have a MacBook Pro with a touch bar (circa 2017-2020 or so), this option may not be there. Instead, go into the Shortcuts section of the keyboard options and turn off all of the options for Mission Control. Those are the ones that interfere with Excel.)\n\nOnce you’ve done that, these keyboard shortcuts will work:\n\n\n\n\n\n\n\n\nTo do this\nWindows or IMac\nMacbook\n\n\n\n\nEdit a cell\nF2\nCtl-U or F2\n\n\nToggle between absolute and relative references\nF4\nCtl-T or F4\n\n\nInsert cut cells\nCtl+\nCtl+\n\n\nDelete a cell\nCtl-\nCtl-\n\n\nSelect the top left of a spreadsheet\nCtl-Home\nCtl-Fn-Left arrow\n\n\nMove to the bottom right of a spreadsheet\nCtl-End\nCtl-Fn-Right arrow\n\n\nSelect a region (a contiguous rectangle of cells that are filled out)\nCtl -*\nCtl-Shift_spacebar\n\n\n\nYou should practice getting around a spreadsheet efficiently, since scrolling with the mouse while selecting is a lesson in frustration."
  },
  {
    "objectID": "xl-refresher.html#footnotes",
    "href": "xl-refresher.html#footnotes",
    "title": "7  An Excel Refresher",
    "section": "",
    "text": "This guide is done using a Mac. Windows machines will be a little different, mainly because you’ll have more choices in most menus. The Mac CMD key is the same as the Windows CTL key.↩︎"
  },
  {
    "objectID": "xl-filter-sort.html#a-sorting-miracle",
    "href": "xl-filter-sort.html#a-sorting-miracle",
    "title": "8  Sorting and filtering to find stories",
    "section": "8.1 A sorting miracle",
    "text": "8.1 A sorting miracle\nAfter Ferguson, Mo., police killed Michael Brown in 2014, advocates and journalists began examining the racial and ethnic gap between police departments and the communities they served. The New York Times found a 7-year-old survey conducted by the Justice Department that allowed it to compare the data for major cities in a standalone graphic that it published later that year.\nWhen newer data reflecting departments’ makeup in 2012 was released a year later, Matt Apuzzo and I hoped it would show some differences. It didn’t. So we were left trying to find news in the data that was clearly of public interest.\nAfter matching up the demographics of police departments with their cities, I started sorting, filtering and Googling. Could there be news in the outliers on the list? Which departments most closely represented their communities? Which ones had unusually large gaps?\n\n\n\nChief William T. Riley III. Credit: Laura McDermott for The New York Times\n\n\nI quickly stumbled on telling anecdote to frame the story: Inkster, Mich. had one of the least representative departments in the country, and had recently hired a new police chief to help mend the department’s fraught relationship with its largely African-American community. Where had he come from? Selma, Ala., one of the most representative police departments in the nation. Interviews with the chief, William T. Riley III, suggested one reason for some cities’ disparities: there was no state or federal money to pay for training new police officers.\nThe story, “Police Chiefs, Looking to Diversity Forces, Face Structural Hurdles” helped explain the persistent gap between the makeup of police in some areas and the communities they served."
  },
  {
    "objectID": "xl-filter-sort.html#sorting-and-filtering-as-a-reporting-tool",
    "href": "xl-filter-sort.html#sorting-and-filtering-as-a-reporting-tool",
    "title": "8  Sorting and filtering to find stories",
    "section": "8.2 Sorting and filtering as a reporting tool",
    "text": "8.2 Sorting and filtering as a reporting tool\nSorting and filtering can:\n\nNarrow your focus to specific items that you want to examine in your story.\nShow you rows containing the highest and lowest values of any column. That can be news or it can be errors or other problems with the data.\nLet you answer quick “how many?” questions, with a count of the rows that match your criteria. (In the next lesson, you’ll see that pivot tables, or group-by queries, are much more powerful for this in most cases.)"
  },
  {
    "objectID": "xl-filter-sort.html#example-data",
    "href": "xl-filter-sort.html#example-data",
    "title": "8  Sorting and filtering to find stories",
    "section": "8.3 Example data",
    "text": "8.3 Example data\n\n\nData from the Washington Post for use in this tutorial\nDocumentation from the Post’s github site\n\n\n\n\n\n\n\n\nNote\n\n\n\nThis data was derived from a version of the Post’s database that has since been revised. If you want to look at the original, it’s under “V1” in their github repo.\n\n\nThe data for this and several other chapters is the Washington Post’s public data collection of police shootings in the U.S. It includes the nation’s best guess about each fatal police shooting since 2015. There are a couple of caveats:\n\nIt excludes deadly police interactions other than shooting a firarem at the suspect. Any strangulation, car crashes, Tasers without guns or other methods are excluded.\nIt is based primarily on news reports and the results public records requests so it often contains the story as told by police. We know that many of those reports are sugar-coated at best, and lies at worst.\nThe Post says this is a list of fatal shootings, but doesn’t say what happens if more than one person is killed. The 2019 shooting of D’Angelo Brown & Megan Rivera in West Memphis is shown as two rows1 in the data even though it was one event. So each row might be considered a shooting “victim”, a “suspect” or a shooting “fatality” rather than a “shooting”.\n\nThe original data download link is https://github.com/washingtonpost/data-police-shootings/releases/download/v0.1/fatal-police-shootings-data.csv. The screenshots in this tutorial may not match exactly to what you get on their data – It had included incomplete 2021 data, and I added a column for the year.\nIt’s a good example set for us because it’s been used as the basis of many stories, it has at least one of each data type that we plan to deal with in Excel, and it is well documented on the Post’s github site."
  },
  {
    "objectID": "xl-filter-sort.html#understanding-data-types",
    "href": "xl-filter-sort.html#understanding-data-types",
    "title": "8  Sorting and filtering to find stories",
    "section": "8.4 Understanding data types",
    "text": "8.4 Understanding data types\nWhen you open the spreadsheet, the first thing to notice is its granularity. Unlike Census or budget spreadsheets, this is a list capturing specific characteristics of each fatality Each column has the same type of data from top to bottom. Those types are:\n\nText. Text or “character” columns can come in long or short form. When they are standardized (the values can contain only one of a small list of values), they’re called “categorical”. If they’re more free-form, they’re might be called “free text”. The computer doesn’t know the difference, but you should. The Post data has examples of both. In spreadsheets, text is left-justified (they move toward the left of the cell and will line up vertically at the beginning)\nNumbers. These are pure numbers with no commas, dollar signs or other embellishments. In Excel, as we’ll see in the computing section, these can be formatted to look like numbers we care about , but underneath they’re just numbers. Adding up a column of numbers that has a word in it or has missing values will just be ignored in Excel. It will trip up most other languages. These are right-justified, so the last digit is always lined up vertically.\nLogical: This is a subset of text. It can take one of only two values – yes or no, true or false. There is no “maybe”.\nDate and times: These are actual dates on the calendar, which have magical properties. Underneath, they are a number. In Excel, that number is the number of days since Jan. 1, 1900.2 They can also have time attached to them, which in Excel is a fraction of a day. What this means is that the number 44,536.5 is really Dec. 6, 2021 at noon. In Excel, you use a format to tell the spreadsheet how you want to see the date or time, just the way you look at dollar values with commas and symbols. (If you get a spreadsheet with a lot of dates of 1/1/1900, it means there is a 0 in that column, which is sometimes a fill-in for “I don’t know.”)\nHere’s a picture of a date that is shown in a variety of formats.\n\n\n\ndate formats\n\n\nAll of these are the same, underlying value – the number at the left. Notice that all of these are right-justified.\nThis means that when you see “Friday, December 10”, the computer sees 44540.87431. When you put the dates in order, they won’t be alphabetized with all of the Fridays shown together. Instead, they’ll be arranged by the actual date and time.\nIt also means that you can compute 911 response times even when it crosses midnight, or or compute the someone’s age today given a date of birth. Keeping actual calendar dates in your data will give it much more power than just having the words. (Excel uses the 1st of the month as a stand-in for an actual date when all you know is the month and year.)"
  },
  {
    "objectID": "xl-filter-sort.html#working-with-excel-tables",
    "href": "xl-filter-sort.html#working-with-excel-tables",
    "title": "8  Sorting and filtering to find stories",
    "section": "8.5 Working with Excel “tables”",
    "text": "8.5 Working with Excel “tables”\nExcel lets you put any type of data anywhere on your spreadsheet. To bring a little order to the chaos, it allows you to turn your data into a “table”, which is set up for sorting and filtering. It enforces some data types on you, and deals with missing information more smoothly. It is designed for tabular data without empty rows or columns, and where there is nothing else on the sheet.\nPut your cursor somewhere in the table, then use the “Format as table” button on the home screen. Check to make sure the “My table has headers” is checked.\n\n\n\nsort\n\n\n\n8.5.1 Sorting rows\nSorting means rearranging the rows of a data table into a different order. Some reporters take a conceptual shortcut and call this “sorting columns”. That thinking will only get you into trouble – it lets you forget that you want to keep the rows in tact while changing the order in which you see them. In fact, in other languages it’s called “order by” or “arrange” by one or more columns – a much clearer way to think of it.\nIn Excel, look for the sort options under the Data tab at the top of your screen. In this case, sorting from oldest to newest gives you a list of the fatalities in chronological order, including the time of day.\nTo sort your data, put your cursor in one of the cells within your data area, and choose Data…Sort. Please don’t use the A-&gt;Z or Z-&gt;A buttons!\n\n\nAdding fields to the sort\nAdding more columns to the sort box tells Excel what to do when the first one is the same or tied. For example, sorting first by state then by date gives you a list that shows all of the events by state in sequence:\n\n\n\n\n8.5.2 Filtering\nFiltering means picking out only some of the rows you want to see based on a criteria you select in a column. Think of it as casting a fishing net – the more filters you add, the fewer fish will be caught.\nWhen you created the table, it also created little drop-down arrows on the top row. If you can’t see them, use CTL-HOME or CTL-UP on the first column to get yourself back to the top. Each filter you select adds more conditions, narrowing your net.\nTo find fatalities that involved a firearm with a Taser, use the drop-down menu under manner_of_death select it. (This is an example of naming a column in an unexpected way. Usually, a “manner” of death relates to the circumstances such as accident, suicide or homicide. It’s why you can’t count on understanding the column names without a crib sheet from the data’s maker, called a data dictionary or record layout. The Post’s crib sheet is excellent!)\nWhen you do this, notice that the bottom left briefly shows you the number of rows that matched your filter, and the line numbers turn blue. Any rows that don’t match your filter hidden.\n::: {.content-visible when-format=“html”}\n\n\n\n\n\n\n\nWarning\n\n\n\nThis method works for small-ish and simple-ish columns. If your column has more than 10,000 different entries, such as names or addresses, only the first 10,000 will be considered. We only caught these for stories when someone did a fact-check using a different method of filtering. If your column has a lot of distinct entries, use option that says “Choose One”, and then use the “Contains” option. Better yet, don’t use filtering for counting things at all.\n\n\nAdd more filters to narrow down your list of cases even more. For example, the New York Times ran a series of stories in 2021 about unarmed people shot by police. One story was about those who were fleeing by car. Here’s one way to get a preliminary list of those cases:\n\nRemove any filter you already have on.\nTurn on the filters again if you turned them off.\nChoose “unarmed” under armed and “car” under flee.\n\n(Of course, the Times didn’t stop there in trying to find more cases and teasing out more of them from this and other data. But this is a start. )\n\n\nDifferent kinds of filters\nThere are several options under the filter box, depending on what data type in in the column. In numeric columns, you can get top and bottom lists. Dates will automatically collapse into years, then months, then days to let you choose more efficiently."
  },
  {
    "objectID": "xl-filter-sort.html#video-of-sorting-and-filtering-with-salaries",
    "href": "xl-filter-sort.html#video-of-sorting-and-filtering-with-salaries",
    "title": "8  Sorting and filtering to find stories",
    "section": "8.6 Video of sorting and filtering with salaries",
    "text": "8.6 Video of sorting and filtering with salaries\nThis video goes through many of the details of sorting and filtering. Follow along using this spreadsheet of Phoenix city salaries. It’s from a different year, but the idea is just the same.\nNote that in this case, the original order of the dataset was alphabetical, except lower-case names came at the very end. It would be very hard to get back to this order in a spreadsheet if you didn’t have that leftmost column of numbers that indicated the original order."
  },
  {
    "objectID": "xl-filter-sort.html#faq",
    "href": "xl-filter-sort.html#faq",
    "title": "8  Sorting and filtering to find stories",
    "section": "8.7 FAQ",
    "text": "8.7 FAQ\n\nHow do I turn off all of my sort and filters\nIn the data tab, chose “Clear” (the funnel with the red “X”) to remove all of the filters and sorts on your table.\n\n\nWhere is the button to filter columns?\nSometimes you don’t want to see all of your columns – there are too many and they’re getting confusing. There is no column filter in Excel. (You’ll see how to filter, or “Select”, columns from a dataset in standard programming languages later.)\nInstead, you can hide the columns you don’t want to see. When columns and rows are hidden, they generally won’t copy to a new sheet.\n\n\nI’m getting weird questions and alerts about sorting\nSlow down and read the alert. There are two common types of alerts in sorting, since it has the potential to wreck your spreadsheet.\nThe first comes if you selected an entire column, and then just hit the button that says “A-Z” with the arrow. Excel won’t let you do that if it’s formatted as a table, but it will if it’s just a normal spreadsheet. This alert asks you if you REALLY want to sort only the column you’ve selected, separating its meaning from the rest of the rows. The answer is NO. Always. Expand the selection as Excel wants you do to by default.\n\n\n\nfilter date\n\n\nThe other comes when you have numbers that are treated as text. This is a tricky question, and a properly tidied spreadsheet should avoid it most of the time. If you have the same type of data in each column, the answer to this question shouldn’t matter. If not, neither one will give you what you want.\n\n\nI want to get rid of my data table\nYou can revert to the a plain old spreadsheet by selecting any cell within your table, then looking for the “Table” tab at the top of your screen. Choose the option that says “Convert to Range”."
  },
  {
    "objectID": "xl-filter-sort.html#footnotes",
    "href": "xl-filter-sort.html#footnotes",
    "title": "8  Sorting and filtering to find stories",
    "section": "",
    "text": "Finding these is something that’s pretty hard in a spreadsheet but will be really easy in R.↩︎\nEach language deals with dates and times a little differently. We’ll see how R does it later on. But just know that dates can be tricky because of these differences and time is even more tricky ↩︎"
  },
  {
    "objectID": "xl-pivot.html#summarizing-with-groups",
    "href": "xl-pivot.html#summarizing-with-groups",
    "title": "9  Grouping with pivot tables",
    "section": "9.1 Summarizing with groups",
    "text": "9.1 Summarizing with groups\nSummarizing a list of items in a spreadsheet is done using pivot tables. In other languages, it’s considered “aggregating” or “grouping and summarizing”. Think of pivot tables and grouping as answering the questions, “How many?” and “How much?”. They are particularly powerful when your question also has the words “the most” or the “the least” or “of each”. Some examples:\n\nWhich Zip Code had the most crimes?\nWhat month had the least total rainfall?\nHow much did each candidate raise last quarter?\nIn playing cards, how many of each suit do I have in my hand?\nOn average, are Cronkite students taller or shorter than in other schools?\n\n\nConfusing grouping with sorting or arranging\nMany reporters confuse this summarization with “sorting”. One reason is that this is how we express the concept in plain language: “I want to sort Skittles by color”.\nBut in data analysis, sorting and and grouping are very different things. Sorting involves shuffling a table’s rows into some order based on the values in a column. In other languages, this is called arranging or ordering, much clearer concepts. Grouping, which is what pivot tables do, is a path to aggregating and computing summary statistics such as a count (the number of items), sum (how much they add up to), or average for category. It means “make piles and compute statistics for each one.”\n\n\nWhen to use filter vs. pivot tables\nSomething that trips up beginners is a desire to see details and totals at the same time, which is more difficult than it sounds.\nA filter is used to display your selected items as a list. You’ll get to see all of the detail and every column. As a convenience, Excel shows you how many items are in that filtered list. That’s great when you want to just look at them, or get more information about them. For instance, if you had a list of crimes by ZIP code, you might just want to see the list in your neighborhood – where, exactly, were they? When did they happen? Was it at night or the morning? What crimes happened on which blocks?\nA pivot table is used when you just want to see summaries – does my ZIP code have more crime than others? Are robberies more common than car theft in my Zip code, and how does that compare to others?\nIn practice, you’ll go back and forth between summary and detail. They’re both important, just different.\n\n\nMotivational exercise\nA lot of reporters try to do everything with filters. Once they learn pivot tables, they try to do everything with pivot tables. They’re two different animals – filtering is used for detail, and grouping (or pivot tables) are for summary. Here’s one way of understanding what pivot tables do before you try to make one.\nIf you wanted to know how many people of each race/ethnicity were shot and killed, here’s one way you can do it:\n\nUsing your data table, use the filter the column in the new spreadsheet called “Ethnicity” to show only “Black non-Hispanic” victims.\n\n\n\nYou should see something like this at the bottom of your screen, showing 1444 of 5945 records shown.\n\n\n\n\n\nfilter results\n\n\n\n\n\nWrite that down on a piece of paper, or start a new sheet in your workbook called “ethnicity”, and create a small data area with the columns called “Ethnicity”, “# of shootings”, “% of total”.\nRepeat the process with each ethnicity, entering or writing down the results of each of them.\nNow, for each ethnicity, compute the percent of total – or, the number of rows you found divided by 5,945 expressed as a percent.\n\nIn the end, you would have a page that looks something like this (or your own chicken-scratching with the same numbers):\n\n\n\nhandmade pivot\n\n\nAnd if you’re asking yourself, “why is this so much work? Isn’t there an easier way?” , the answer is to try a pivot table. It does all that work for you."
  },
  {
    "objectID": "xl-pivot.html#tutorial",
    "href": "xl-pivot.html#tutorial",
    "title": "9  Grouping with pivot tables",
    "section": "9.2 Tutorial",
    "text": "9.2 Tutorial\n\nA Skittles example\n\n\n\n\n\n\n\nErrata\n\n\n\nMake sure that the column you choose to put in the “Values” area to count is always filled out – otherwise it will skip them.\n\n\n\n\nSetting up the pivot table\nStart with your cursor somewhere in your data , and choose Insert, then Pivot table\n\n\n\ninsert menu\n\n\nIf all goes well, it will look like your data disappeared. It didn’t – you’re just on a new page. Here’s what it looks like:\n\n\n\npivot menu\n\n\n\n\nCounting , or “how many”?\nThe section on the right gives you an outline of what to do. The section on the left will get filled in as you make your pivot table. If you want to see the number of fatalities by ethnicity, drag that column into the “Rows” area, then drag something that’s always filled out into the Values area (state is a safe one in this data).\nBe sure to ALWAYS use something that has something filled in all the time for this. If you look at the filter, it must not have an option at the bottom that says (Blanks). If you ignore this, your answer will be wrong, since the calculation will only count filled-in cells.\n\n\n\nPercents of total\nIt’s hard to compare raw numbers unless they’re really small. Instead, we’d like to know what percent of fatalities by ethnicity. Right-click on any number in the pivot table, and choose “Show data as…” , then choose “Percent of Column total”.\n\nTo remove it, right-click on it and choose “Remove”Count of state2”“.\n\n\nMore variables\nSuppose you’d like to see the number of fatalities by year, with the years across the top and the ethnicity down the sides. Drag the year variable into the column area . Sorting can get hinky on pivot tables, but in this case it will work to put the largest number on top. This won’t work with percentages – it still sorts by the underlying number.\n\n\n\nEven more detail\nSay you wanted to see each city’s total shootings by year. Which one had the most last year, and which one had the most overall?\nThis is actually really hard in a pivot table, because there are cities with the same names in different states. It means you’d need to have a pivot table with TWO columns down the side, and one across the top. Here’s my attempt at getting there:\n\n\n\nbadsort\n\n\nThis is after some fiddling with the formats, and I still can’t sort properly – the city “Phoenix”, including those in Maryland and Arizona, had the second-highest number of shootings. We can’t sort by the combination of city and state. (Don’t try to get something that looks like this on your own – I can’t even reproduce it exactly because I’d fiddled around trying to get something that I wanted to see in this example. )\nYour choices in Excel are limited: Copy and paste the values of the pivot table into a new sheet and sort there, or create a new variable by concatenating the name of the city and state into one column.\n\n\nGo back to your raw data\nBut say you wanted to look into the 15 Phoenix, AZ shootings from 2020. Your instinct might be to filter your pivot table and try adding more items to the columns and rows:\n\n\n\npivot add info\n\n\nBut this is what your filters were made for! Return to your original data, and set the filters so you can see ALL of the details about the small list of items.\n\n\n\n\nfilter results\n\n\n\n\nThe big picture\nPivot tables and aggregation with grouping are good for narrowing down the items you want to examine more closely, and for compiling summary statistics about your data.\nBut filters are much better for examining the full range of information about a small number of examples.\nIn practice, you’ll go back and forth between summary and detail. You need them both."
  },
  {
    "objectID": "xl-pivot.html#tldr",
    "href": "xl-pivot.html#tldr",
    "title": "9  Grouping with pivot tables",
    "section": "9.3 TL;DR",
    "text": "9.3 TL;DR\nHere’s a video with the same material:"
  },
  {
    "objectID": "xl-pivot.html#faq",
    "href": "xl-pivot.html#faq",
    "title": "9  Grouping with pivot tables",
    "section": "9.4 FAQ",
    "text": "9.4 FAQ\n\nEverything disappeared!\nIf you select something outside of that pivot table on the left, the menu on the right disappears. Select something in the pivot table area and it will likely come back.\n\n\nI have too many columns\nIf you want two sets of statistics – say, number of fatalities and percent of fatalities – across the top, it can get very wide and confusing very quickly. One alternative is to change it into more of a vertical rectangle by dragging the “Values” element from the columns to the rows on the right. (This only shows up when you have two calculations being made.)\n\n\nI want to sort by percents, not numbers\nYou can’t.\n\n\nThings aren’t adding up\nYou have to be super careful about which column you use to Count things – it has to always be filled out (there can’t be any blanks). Go through the filters and find one that doesnt have (Blanks) at the bottom to be sure.\n\n\nIts a crazy number!\nYou might have dragged a numeric column into the “Values” area. Check to see if it says “Count” or “Sum”. Change it to “Count” if it has something else on it, unless you wanted to add up that column.\n\n\nThis is so frustrating - I can’t get what I want\nRight? It’s time to go to a programming language!"
  },
  {
    "objectID": "xl-formulas.html#formulas-in-spreadsheets",
    "href": "xl-formulas.html#formulas-in-spreadsheets",
    "title": "10  Formulas in Excel",
    "section": "10.1 Formulas in spreadsheets",
    "text": "10.1 Formulas in spreadsheets\nWhether you use Excel or Google sheets, remember that every formula begins with the equals sign (=). Rather than the values you want to work with in the formula, you’ll use references to other cells in the sheet.\nThe easiest formulas are simple arithmetic: adding, subtracting, multiplying and dividing two or more cells. You’ll just use simple operators to do this:\n\n\n\noperator\nsymbol\nexample\n\n\n\n\naddition\n+\n=A2+B2\n\n\nsubtraction\n-\n=A2-B2\n\n\nmultiplication\n*\n=A2*B2\n\n\ndivision\n/\n=A2/B2\n\n\n\nHere’s what a spreadsheet looks like while editing some simple arithmetic:\n\n\n\nformula\n\n\nThe other kind of formula is a function. A function is a command that has a name, and requires arguments – usually the cell addresses or the range of addresses that it will act on. Every programming language has functions built in and many have extensions, or packages or libraries, that add even more as users find things they want to do more efficiently. You begin using a function the same way you begin a formula – with an = sign. Here are three common functions that create summary statistics for the numbers contained in a range of addresses. A range is a set of cells defined by its corner cell address: the top left through the bottom right.\nYou’ll usually use them on a single column at a time.\n\n\n\nFormula\nWhat it does\n\n\n\n\n=SUM(start:finish)\nAdds up the numbers between start and finish\n\n\n=AVERAGE(start:finish)\nComputes the mean of the numbers\n\n\n=MEDIAN(start:finish)\nDerives the median of the numbers\n\n\n\n…where “start” means the first cell you want to include, and finish means the last cell. Use the cell address of the first number you want to include , a colon, then the cell address of the last number you want to include. You can also select them while you’re editing the formula.\nHere’s an example of adding up all of the rows in a list by county:\n\n\n\nformula"
  },
  {
    "objectID": "xl-formulas.html#common-spreadsheet-arithmetic",
    "href": "xl-formulas.html#common-spreadsheet-arithmetic",
    "title": "10  Formulas in Excel",
    "section": "10.2 Common spreadsheet arithmetic",
    "text": "10.2 Common spreadsheet arithmetic\nThe budget document shows three years’ of data: The actual spending in the fiscal year that ended in 2016; the spending that was estimated for the end of fiscal year 2017; and the proposed spending for fiscal year 2018. The first page of the document shows these amounts for broad spending categories.\nYou may want to widen the columns and format the numbers before you start:\n::: {.content-visible .when-format=“html”}\n\n:::\n\n10.2.1 Check the government’s math with SUM\nOur first job is to make sure the government has provided us data that adds up. To do that, we’ll SUM all of the departments’ spending. To add up the numbers from 2016, enter the following formula in cell C11, just below the number provided by the government:\n  =SUM(C2:C8)\n  and hit the enter key\nCopy that formula to the right. Notice how the formula changes the addresses that it is using as you move to the right – it’s adjusted them to refer to the current column.\n\nWhat’s wrong? The numbers for the budget 2018 don’t add up. (Hint: look at the page called “notes” for an explanation.)\n\n\n10.2.2 Change in spending\nThe increase or decrease in projected spending from 2017 to 2018 is just the difference between the two values, beginning in cell F3\n  new-old, or  =E2-D2\nWhen you copy it down, note how the references to each row also adjusted. In line 3, it’s E3-D3, and so on. Excel and other spreadsheets assume that, most of the time, you want these kinds of adjustments to be made.\n\n\n\n10.2.3 Percent change\nWe can’t tell the rate of growth for each department until we calculate the percent change from one year to another. Now that we already have the change, the percent change is easy. The formula is:\n  ( new - old ) / old\n\n  .. or just scream \"NOO\"\nThe new-old is already in column F, so all that’s left is to divide again. In grade school, you also had to move the decimal place over two spots, since the concept of percent change is “out of 100”. Excel formats will do that for you.\nRemember, it’s always (new-old)/old , NOT the big one minus the little one. Doing it correctly, the answer could be negative, meaning the value fell.\n\n\n\n\n“% change”\n\n\n\nWhen you’re done, you can format the answer as a percentage to get it into whole numbers.\nUntil you get used to it, there’s no harm in doing these calculations step by step. Excel won’t complain if you have extra columns. You can always hide them.\nIt’s also worth comparing the picture you get by looking at raw numbers vs. percentages. In our case, the budget for public safety is expected to rise by a whopping $102 million, but it’s a smaller percentage increase than other, smaller departments.\n\n\n10.2.4 Parts of a whole: percent of total\nWe’d also like to know what portion of the total spending is eaten up by each department. To do that, we need the percent of total.\nIn our case, let’s use the total that the government gave us. In practice, you’d have to decide what to do if your figures didn’t match those provided by officials. You can’t assume that the total is wrong – you could be missing a category, or there could be a mistake in one of the line items.\nThe formula for percent of total is:\n  category / total\nAgain, Excel will multiply by 100, or move the decimal place over for you once you format.\nBut you have a problem: You either have to type in each row, or you get something like this if you try to copy:\n\n\n\n\nWrong way\n\n\n\nExcel has done its magic, adjusting the location of both the numerator and the denominator when you copied. You don’t have to type in each formula one by one, though. Instead, you’ll use anchors, known in spreadsheets as “absolute references”. Think of a dollar sign as an anchor or stickpin, holding down the location of part of your formula. If you put the stickpin before the letter in the formula, it holds the column in place. If you put it before the number, it holds the row in place. If you put it in both places, it holds the cell in place.\nSo our new formula for the percent of total is:\n\n\n\n\nE2/E$10"
  },
  {
    "objectID": "xl-formulas.html#while-were-at-it-two-kinds-of-averages",
    "href": "xl-formulas.html#while-were-at-it-two-kinds-of-averages",
    "title": "10  Formulas in Excel",
    "section": "10.3 While we’re at it: two kinds of averages",
    "text": "10.3 While we’re at it: two kinds of averages\nAlthough it doesn’t make a lot of sense in this context, we’ll go ahead and calculate the average or mean size of each department, and then calculate the median size.\nSimple average, or mean\nA simple average, also known as the mean, is skewed toward very high or very low values. Its formula is\n    sum of pieces / # of pieces that were summed\nBut in Excel, all we need is the word AVERAGE:\n    =AVERAGE(C2:C9)\nMedian\nIn Excel, you can get the median of a list of numbers by just using the formula, MEDIAN()\n  = MEDIAN(C2:C9)"
  },
  {
    "objectID": "xl-formulas.html#the-final-spreadsheet",
    "href": "xl-formulas.html#the-final-spreadsheet",
    "title": "10  Formulas in Excel",
    "section": "10.4 The final spreadsheet",
    "text": "10.4 The final spreadsheet\n\n\n\n\nfinal worksheet\n\n\n\nDoing simple calclutions like this on data that is provided to you by the government lets you ask better questions when you get an interview, and may even convince officials to talk with you. There’s a big difference between asking them to tell you what the budget numbers are, and asking them to explain specific results!"
  },
  {
    "objectID": "xl-formulas.html#faqs",
    "href": "xl-formulas.html#faqs",
    "title": "10  Formulas in Excel",
    "section": "10.5 FAQs",
    "text": "10.5 FAQs\n\nExcel won’t let me copy my formula\nMake sure your formula is locked in by either hitting “Enter” or “Escape”. This is a common problem if you’re in the habit of double-clicking instead of selecting a cell. There are a lot things you can’t do while Excel thinks you’re still entering information.\n\n\nShould I use average or median?\nIt depends. Averages are easier to explain but can be misleading. Usually, if they’re very different, median will be a better representation of the typical person, city or department. Averages in these cases are more like totals.\n\n\nMy percents are small numbers with decimal points\nUse the format as a % button to move the decimal point over two places and insert the percentage symbol.\n\n\nMac Users: There’s some kind of weird image on top of my spreadsheet. Or some other very weird hiccup.\nI have no idea what this is, but it happens. Save your spreadsheet, close it and then re-open. It should go away."
  },
  {
    "objectID": "xl-practice-noc.html#data-source",
    "href": "xl-practice-noc.html#data-source",
    "title": "11  Practice exercise",
    "section": "11.1 Data source",
    "text": "11.1 Data source\nData download\nCity link to Notice of claims form and instructions to claimants\nBackgrounder on the data from Helen Wieffering\nThis dataset includes all “Notice of Claims” against the city of Phoenix between 2010 and 2020. These claims refer to damages that people say they suffered because of a problem in the government ranging from slip-and-fall in a city building to use of force by police. It was obtained by Helen Wieffering just after the end of the 2020 fiscal year, so many of the claims from that year will be unresolved. Although the names of the claimants are public record, they were not included in the data compiled here. Also missing is the court case number of any cases that went to court.\nMake sure to look at the “data_dictionary” sheet for the definitions of each column before you start."
  },
  {
    "objectID": "xl-practice-noc.html#sort-filter",
    "href": "xl-practice-noc.html#sort-filter",
    "title": "11  Practice exercise",
    "section": "11.2 Sort / filter",
    "text": "11.2 Sort / filter\nI almost always go into the Excel preferences, and under “Tables & Filters” turn off the check that says “Use table names in formulas”. Sometimes it sticks, sometimes it doesn’t. Have no idea why.\n\nWhat is the orig_order (id) value of the largest PAID claim in the database (combined personal injury and property) ?\nWhat department and cause were associated with that payment?\nHow long did it take to resolve it?\nDescribe the most recent claim made against the police related to law enforcement activities, regardless of whether it’s been resolved.\nUsing your filter, determine how many paid claims were made for “Shootings”. in the type of claim.\nFind one other thing that you might want to research further that could make an interesting one-off story. These are distinct events that you’d like to know more about, not trends or patterns. This requires no calculation, just your news judgment. Base it solely on what you see in this data, not other research."
  },
  {
    "objectID": "xl-practice-noc.html#pivot-table-practice",
    "href": "xl-practice-noc.html#pivot-table-practice",
    "title": "11  Practice exercise",
    "section": "11.3 Pivot table practice",
    "text": "11.3 Pivot table practice\n\nCreate the pivot table\n1, Create an empty pivot table from the data table.\n\nLook for the “Options” tab toward the top left, and turn off “Generate GetPivotData”. In the same tab, under “Options”, set error values to “N/A”, and set Empty cells to zero (meaning there was nothing in that category.)\nDrag “Department” to the row area\nDrag the type_case to the filter area\nDrag the “department” to the Values area and make sure it says “Count of Department”.\nDrag the pd_total to the Values area, and make sure it says “Sum of pd_total”. If it doesn’t, change the pivot table calculation to “Sum”. Repeat that three times, with “average”, “min” and “max”.\n\n\n\nOther questions\n\nWhat department had the most claims made against them from FY 2015-16 to through 2019-2020?\nHow much did the city pay in that time because of complaints against Streets. Did any department pay more?\nYour turn: Ask an interesting question of this data and try to answer it."
  },
  {
    "objectID": "r.html",
    "href": "r.html",
    "title": "R Study Guide",
    "section": "",
    "text": "Introduction\nThis is probably your first introduction to coding. Don’t be worried. With effort, much of what reporters do in coding can be learned in a few weeks.\nLike most reporters, I learned the coding that I know (which isn’t a lot) because I wanted to get a story done. In our class, we are not trying to become programmers or social scientists. We’re working on stories.\nYou saw during the pivot table lesson that spreadsheets have limits. We couldn’t easily get the city with the most police shootings because we would have had to put both city and state into the pivot table. A median is missing from pivot tables entirely. It’s easy to lose track of where you are and what you did. That’s the reason to learn some coding – there is something we want to know that isn’t very easy to get in other ways.\nAll programming languages have one thing in common: You write instructions, called algorithms, and the program executes your statements in order. It means you can do more complicated work in computer programming than in point-and-click parts of Excel. It can also scale – you can repeat your instructions millions of times, tweak it a little, and re-run the program without messing anything else up. The computer won’t mind. Really.\nWriting code can also be self-documenting. You can largely eliminate those painstaking Excel data diaries and replace them with documents that explain your work as you go. You’ll still need to record information about your interviews and decisions, but you’ll no longer have to write down every mouse click.\nIf you’re nervous about getting started with programming, take look at the Appendix: A gentle introduction to programming and Jesse Lecy’s “Learning how to Learn”, where he says:\nThe good news for journalists is that you can accomplish most of what we need with the vocabulary of a three-year-old.\nAll I ask is that if you get very frustrated, walk away from the computer for a little while. Get help if, after a break, you don’t know what you might do next to make some progress. #dj-sos on Slack is one option. Use it. If you’re stuck, it’s quite likely others are as well. But don’t let it get to you. As Lecy says, your morale is a limited commodity."
  },
  {
    "objectID": "r.html#structure-of-the-chapters",
    "href": "r.html#structure-of-the-chapters",
    "title": "R Study Guide",
    "section": "Structure of the chapters",
    "text": "Structure of the chapters\nEach chapter includes a summary of what is included, intended to help you navigate the book when you are doing your own coding. At the end is a “recipe” chapter that puts together the specific funcitons and commands that were covered in earlier chapters, and actually goes a little further to help you polish your document.\nPay attention to these :\n\n\n\n\n\n\nWarning\n\n\n\nThese are warnings that something isn’t quite what it seems and might go wrong.\n\n\n\n\n\n\n\n\nCaution\n\n\n\nThese are cautions – something bad could happen if you ignore this.\n\n\n\n\n\n\n\n\nTip\n\n\n\nPro tips!\n\n\n\nA dark background contains specific instructions you should follow for class or if you want to follow along"
  },
  {
    "objectID": "r.html#credits",
    "href": "r.html#credits",
    "title": "R Study Guide",
    "section": "Credits",
    "text": "Credits\nThe first few chapters in this section rely on work done by Andrew Heiss and Christian McDonald."
  },
  {
    "objectID": "r-install.html#install-r-and-rstudio",
    "href": "r-install.html#install-r-and-rstudio",
    "title": "12  Installing R and RStudio",
    "section": "12.1 Install R and RStudio",
    "text": "12.1 Install R and RStudio\n\nR is the programming language itself, and has to be installed first. Andrew Heiss has called it the “engine” behind your work.\nRStudio, made by the company posit.co, is the way we’ll interact with the programming language. Install it second. Heiss calls it the “fancy car” that you drive.\n\n\nTry following this tutorial for installing R, RStudio and the package called the tidyverse on your computer.\nhttps://learnr-examples.shinyapps.io/ex-setup-r/#section-welcome .\n\nThe name of the company has changed from RStudio to Posit, so some of the links may now take you to the Posit site. The name of the software – RStudio – has not changed.\n\n12.1.1 Details on installing R\nThere are two versions of R for Mac users: The traditional one and the one for the new M1 chip on the latest machines. Choose the one that matches your machine by checking the apple in the upper left and looking at “About this Mac”. It will say “Apple M1” as the processor if you have it.\nLink to find your version: https://cloud.r-project.org/\nMac OS:\n\n\n\nThe version you see may be higher than “4.1”. As of December 2022, it’s 4.2.2\n\n\nWindows 10/11:\nYou only need the “base” version for our class.\n\n\n12.1.2 Details on installing RStudio\nThere is no special RStudio version for Mac M1’s. As of December, 2022, these are the versions:\n\nRStudio for Windows 10/11\nRStudio for Mac OS\n\nCheck for later versions of the Desktop product on the Posit website.\n\n\n\n\n\n\nMac users: Command line tools\n\n\n\nIf you get an error during or after installation about “command line tools”, ask me to help you. It’s a simple fix. RStudio will actually work without it, but you’ll get a lot of annoying warnings.\nIf later during package installation you get errors that mention “git” or “xcode-select” just say yes!\nIf R asks you if you want to install packages from “source”, say “No”.\n\n\nIf you go all the way through the tutorial, installing the tidyverse will take a while and look like it’s stuck. It’s not.\n\n\n12.1.3 Emergency backup plan\nPosit Cloud allows you to use R and RStudio without installing it on your computer. Use it as a last resort. Believe me, this will be a pain, but it can work to get you started. You will probably have to upgrade to a paid account if you choose this route.\nSome limitations:\n\nYou’ll have to upload everything you want to use to the cloud, then download the final (saved) versions when you want to turn them in.\n\nIt doesn’t work very well on the Quarto documents that we’ll be using. You might not be able to see your finished document. It just fails. A lot.\nYou can only use 1GB RAM - this won’t be enough for some projects.\nYou only get 25 hours per month to use it. During the key part of our course, you could (and should) run out of time and won’t be able to access your work until you pay.\nYou have to remember to save your work and periodically restart R. It doesn’t remind you and you might lose everything by closing out a tab. If you don’t’s save before turning in your work, I won’t see it."
  },
  {
    "objectID": "r-install.html#set-up-rstudio-for-data-reporting",
    "href": "r-install.html#set-up-rstudio-for-data-reporting",
    "title": "12  Installing R and RStudio",
    "section": "12.2 Set up RStudio for data reporting",
    "text": "12.2 Set up RStudio for data reporting\nStaying organized is one of the challenges of data reporting – you’re constantly re-downloading and re-jiggering your analysis and it’s easy to get your material separated. This setup helps ensure that you always know where to find your work and can move it to another comptuer seamlessly.\nBefore you start, decide on a folder you’ll use to store all of your R work.\n\n\nCreate a folder called maij-working within your Documents folder (or on the root folder of your portable hard drive)\nStart up RStudio (NOT R) , and choose Tools -&gt; Global options (in a Mac)\nMake sure that all of the options to save .Rdata and load files on startup are UN-checked\n\n\nHere’s a video of what you should do. It also gives you a little reminder of how your computer is organized in folders."
  },
  {
    "objectID": "r-start.html#getting-to-know-the-rstudio-screen",
    "href": "r-start.html#getting-to-know-the-rstudio-screen",
    "title": "13  Getting started with R",
    "section": "13.1 Getting to know the RStudio screen",
    "text": "13.1 Getting to know the RStudio screen\n\nOpen the application called RStudio , the fancy car.\nDo NOT open R , the engine.\n\nThis is what your screen probably looks like:\n\n\n\nconsole\n\n\n\nThe Console\nThe Console is where you can type commands and interact directly with the programming language. Think of it as a very powerful calculator at first. One reason to use it is to install packages.\nIf you followed the installation demo, you’ve already used the console to install one package using the command install.packages(\"tidyverse\"). Go back and do that part now if you skipped it. It might take several minutes to finish.\n\n\nFiles tab\nWe won’t be using many of the tabs in the lower right, but the Files tab can help you if you’re having trouble navigating your work. Under the More button, you can choose “Go to working directory”, since that’s where R thinks you’ve parked all of your work. This can be confusing in R, which is why we’ll be working in “projects” that bundle up all of your work in one place.\n\n\nEnvironment\nThe upper right screen is the Environment, which is where your active objects live. An object, sometimes called a “variable” in R, is a named thing. It might be a word, a list of words or numbers, or a data frame (spreadsheet). It can even be a little program called a function that you write yourself. You will understand this better after you take the Posit “Programming basics” tutorial referenced below.\nAnything that you want to use has to be loaded or created into that enivronment first. That might involve importing data from Excel or a text file, or creating data yourself in a program.\n\n\nTyping into the console\nWhen you type this: 5+5 after the &gt; prompt, you’ll get this back after you press Return/Enter: [1] 10\nWhen you type this: \"Sarah\" (with quotes) after the &gt; prompt, you’ll get this back: [1] \"Sarah\"\nTo create a new variable, you’ll use the assignment operator &lt;- (two characters : A less than sign and a hyphen). Here is how I would create the variable called my_name (lower case, no spaces). Notice how it appears in the Environment after being created. Then I can print it by typing the name of the variable instead of the letters of my name in quotes:\n\n\n\n\n\n\n\nTip\n\n\n\nUse the keyboard shortcut OPT/ALT - minus sign to create an assignment operator &lt;-\n\n\nThe console remembers your commands, but you have to type them one at a time and it will forget them when you leave for the day. That’s why we’re going to work in programs called Quarto documents most of the time.1"
  },
  {
    "objectID": "r-start.html#tutorials",
    "href": "r-start.html#tutorials",
    "title": "13  Getting started with R",
    "section": "13.2 Take a tutorial",
    "text": "13.2 Take a tutorial\n\nTake the “Programming basics” tutorial from Posit, which is a series of 1- to 2-minute videos. Just watch the videos – you can skip the parts where you type in the code yourself, since it is code that we will rarely use in the future.\n\n\n\n\n\n\n\nIgnore the math!\n\n\n\nDon’t worry that they are very number-centric. Instead, focus on the concepts of functions, arguments and objects. Think of functions as verbs, and arguments or objects as nouns.\n\n\nFor a higher level view, consider reviewing the Gentle Introduction to Programming in the Appendix of this textbook.\n\nOptional hands-on tutorial:\nOne of the packages you installed earler was called swirl. It contains some interactive tutorials that get you used to typing commands into the Console.\nTo take it, make sure your cursor is in the Console, and start it by typing swirl::swirl(). (Don’t worry too much what that means right now.) Just do the first chapter called R Programming: The basics of programming in R, and just the first section, called Basic Building Blocks."
  },
  {
    "objectID": "r-start.html#take-a-tour",
    "href": "r-start.html#take-a-tour",
    "title": "13  Getting started with R",
    "section": "13.3 Take a tour",
    "text": "13.3 Take a tour\n\nWatch Andrew Heiss’s tour of RStudio.\n\n\nWe will not be using the R scripts as he shows in the end of the video, but many other examples and resources do. Also, as we get into working with Quarto, the “code chunks” work the same way as a script."
  },
  {
    "objectID": "r-start.html#unlocking-packages-and-the-tidyverse",
    "href": "r-start.html#unlocking-packages-and-the-tidyverse",
    "title": "13  Getting started with R",
    "section": "13.4 Unlocking packages and the tidyverse",
    "text": "13.4 Unlocking packages and the tidyverse\nThe real power of R comes with packages. Packages are bundles of programs that others have found useful to extend the base R language. R is almost useless without them. There are more than 10,000 packages available for R, each doing a special job.\nIf you followed along with the tutorial, the last thing you did was install a “package” called the tidyverse. Almost everything we do from now on depends on that step.\nThe tidyverse is a system of packages, or libraries, that work together with similar grammar and syntax. It’s particularly useful for the kind of work reporters do – importing, cleaning and analyzing data that we get from others. For many reporters (myself included), R was too difficult to learn before the tidyverse came around. We’ll be working almost exclusively within the tidyverse in this course.\n\n\n\n\n\n\nBetter Googling\n\n\n\nWhen you Google for help, put the word “tidyverse” somewhere in your query. Otherwise, you may get answers that look inscrutable and unfamiliar. Another good practice is to limit your reponses to the last year or two. There have been a lot of changes in the tidyverse.\n\n\n\n13.4.1 Installing packages\nWe need to update your packages and install a few more for our work.\n\n\n\n\n\n\nWarning\n\n\n\nIf this is the first time you’ve installed it, the tidyverse will take a while to install, and it will look like it’s just stopped. Be patient. It can take 5 minutes or more.\n\n\n\nOption 1: Use the console\n\nCopy these commands into your Console. They ensure that your packages are up to date, and install a few extras that aren’t included in the Tidyverse. You only have to do this once.\n\nupdate.packages(ask=FALSE)\ninstall.packages(c(\"tidyverse\", \"janitor\" , \"lubridate\", \"quarto\", rmarkdown\", \"swirl\", \"pacman\"))\n \n\n\n\n\nOption 2: Use RStudio “Packages” tab\nUnder the Packages tab in the lower right panel:\n\nStart by updating all of the packages you might already have installed by pressing the “Update” button.\nUnder the Install tab, search for and include the following packages:\n\ntidyverse\njanitor\nlubridate\nquarto\nrmarkdown\npacman\nswirl\n\n\n\n\n\npackages"
  },
  {
    "objectID": "r-start.html#relax",
    "href": "r-start.html#relax",
    "title": "13  Getting started with R",
    "section": "13.5 Relax!",
    "text": "13.5 Relax!\n\n\n\nFigure 13.1: Relax by Silwia Bartyzel via Unsplash\n\n\nYou’re all set up and we’re ready to start programming. Congratulate yourself - everything is new, nothing is intuitive and the screen is intimidating. You’ve come a long way."
  },
  {
    "objectID": "r-start.html#footnotes",
    "href": "r-start.html#footnotes",
    "title": "13  Getting started with R",
    "section": "",
    "text": "These used to be “R Markdown”. Quarto is the newer implementaiton of it, but you’ll often see R Markdown referenced in other places.↩︎"
  },
  {
    "objectID": "r-quarto.html#r-projects",
    "href": "r-quarto.html#r-projects",
    "title": "14  Using Quarto",
    "section": "\n14.1 R projects",
    "text": "14.1 R projects\nOne of the things that trips up new users of R is that it’s hard to tell the program where to find things on your computer. The “working directory” can be confusing.\nWe’ll be working entirely in projects in this course. Projects keep everything needed together so that they can run on almost any machine.\n\nCreate a new project by hitting the second green + sign at the top left of your screen, or choose File -&gt; New Project.\nWhen prompted, create a new directory within your course folder called rlessons-011\n\n\n\nnew project\n\nThis creates a file with the extension .RProj in the folder you designate. From now on, you can open the project by double-clinking on that file, or by using the drop-down menu at the upper right of your RStudio screen."
  },
  {
    "objectID": "r-quarto.html#hello-quartor-quarto-2",
    "href": "r-quarto.html#hello-quartor-quarto-2",
    "title": "14  Using Quarto",
    "section": "\n14.2 Hello, Quarto2\n",
    "text": "14.2 Hello, Quarto2\n\n\n\n\n\n\n\nMake sure Quarto is installed!\n\n\n\nTo use Quarto, you must have it installed on your computer. One easy way to do that is to install the quarto and rmarkdown packages in R, which you did at the end of the last chapter. Do that now if you skipped that step.\n\n\nQuarto is a document format that lets you combine your writing, images, computer code and its results into complete documents. We’ll only be using Quarto for R using RStudio, but it also works in other languages such as Python and Javascript. Once you know how to use it in one context, it will work in other contexts.\nCreating documents with Quarto lets you ditch those tiresome data diaries.\nGenerally, you write your document around chunks of R code, which integrates your analysis with your writing. Some news organizations do much of their internal work using Quarto and its predecessor, RMarkdown.\n\n\n\n\n\n\n\nQuarto is modern RMarkdown\n\n\n\nMany help pages and tutorials in R use the format called “R Markdown” instead of Quarto. Quarto was introduced in mid-2022 as a replacement for RMarkdown, and it seems silly to learn something that is already out of date.\nQuarto files end with the extension .qmd. RMarkdown end with the extension .Rmd. Both will work in RStudio, but the “Render” button becomes “Knit” in RMarkdown. The only substantive difference is in the part between the three dashes at the top.\n\n\n\n14.2.1 The structure of a Quarto document\nThere are four parts to a Quarto document:\n\nNarrative and document features using markdown, including headlines, subheads, images and other elements you’d normally see on a web page. You don’t have to write in HTML — Quarto writes it for you.\nThe “front matter”, or YAML, instructions for the entire document.\nCode chunks – your R computer code. This is the part that would go inside the R Scripts that you learned about in the last chapter’s video.\nThe results of code chunks - what you get back when you execute the code, including charts, graphs, tables and maps.\nMarkdown, an editing language\nQuarto is based on markdown3, which was invented as an easy way for early Wikepedia editors, who were used to text editors like Word, to write simple documents that would automatically be rendered into the more complicated HTML of the web.\n\nReview the first five sections of the markdown basics instructions from Quarto, paying attention to:\n\n\nText formatting, like bold and italic\nLinks\nHeadings\n\nLists (ordered and unordered)\nOptional: Tables\n\n\nWe probably won’t use anything below the Tables section in this class.\n\nFront matter / YAML at the top\nThe way the R knows how to process the page is by reading the very top of the file and looking at the section between three dashes. This is called “front matter”, and it’s extremely picky about indentations and the exact words you use.\nThe default setup is very basic. You can use options in this front matter to make it look a little more polished. Here is some code you can use instead of the default to make it look a little better, add a table of contents, and allow your readers to download the underlying code. It also embeds all of the images and data you use in your page in the final output so that you can share your html page through email without copying those external items.4\n---\ntitle: \"A title for your page\"\nauthor: \"Your name\"\nformat: \n  html: \n    theme: cosmos\n    embed-resources: true\n    toc: true\n    code-tools: true\n    page-layout: full\n    df-print: paged\n---\n\n14.2.2 Including R code and its results\nSo far, nothing is different from a simple Google doc or Word document – there is no computer code or data involved. But the value of Quarto is that it allows you to mix your analysis with your writing in one place.\nYou’ll do that through code chunks – little snippets of working code that you insert within your narrative which, when processed, will also include the results.\nTo insert a code chunk:\n\nUse the +C button on the top right of your screen. ( )\nUse the keyboard shortcut CMD/CTL-OPT/ALT-i\n\n\nThe following code chunk creates a new variable called my_variable, another called my_name, then prints out the value stored in the my_name one. Copying it into your document will create a code chunk for you.\n\n```{r}\n# A hashtag here means the line is a \"comment\". R will ignore it.. \n# Anything between ```{r} at the beginning and ``` at the end is the code chunk. \n\n\n# create two new variables here\nmy_variable &lt;- 13\nmy_name &lt;- \"Sarah\"\n\n#now print out the one called my_name\nmy_name\n\n# this is the end of the code chunk\n```\n\n[1] \"Sarah\"\n\n\nThis might not seem like much, but think about how it helps you do your analysis. You can write all of your notes right where you do the work. You don’t have to copy and paste information from one place to another, or share out-of-date spreadsheets with your teammates.\n\n14.2.3 Rendering a document\nThe document remains in markdown format until you render it. There are several ways to do that, most easily by pressing the “Render” button at the top of the page.\n\n\nWhen that button is pushed, Quarto converts your document to an HTML document that can be shared or published. It will be listed as a new file in your project:\n\n\n\n\nrendered files\n\n\n\nQuarto starts from scratch\nYou may have worked in a document for a while and saved a bunch of items in your environment.\nQuarto doesn’t care!\nEvery time it creates your document, it starts from a clean environment — everything you use must be created in the program itself, either by loading a package, importing some data, or doing some analysis. We’ll go through that later, but one good practice is to periodically clear your environment and run all of the code chunks from the top to make sure they don’t depend on anything else. You’ll do this in the walkthrough.\n\n14.2.4 Source vs. Visual modes\nRStudio lets you use what it calls “Visual” mode to hide the markdown code for you, and present you with a draft of what your document may look like. It also uses point-and-click methods to insert images and headings and other elements. For now, we should use the “Source” mode, which may not be the default for your machine. Later on it will be fine to switch back and forth, but the visual mode doesn’t work very well with the results of your commands so it’s worth understanding a little about what is going on behind the scenes.\n\n\n\n\n\n\nSwitching to Source mode\n\n\n\nRStudio usually creates a Quarto document in “Visual” mode, which hides the underlying coding from you and allows you to use point-and-click menus to structure your document.\nThis tutorial will have you switch to “Source” mode so that you can see the underlying structure.\n\nIn practice, visual mode makes data tables look all squished and difficult to navigate until you’ve rendered them. This is something we do a lot, so I end up working in the source document pretty frequently.\nYou can set up RStudio to default to source mode by changing the global options under Tools -&gt; Global Options , then look for R Markdown, and the Visual tab."
  },
  {
    "objectID": "r-quarto.html#walkthrough---your-first-document",
    "href": "r-quarto.html#walkthrough---your-first-document",
    "title": "14  Using Quarto",
    "section": "\n14.3 Walkthrough - your first document",
    "text": "14.3 Walkthrough - your first document\n\nPractice by creating a new document with three things about yourself in a list, a picture of an animal you love or some other image you like, and a code chunk.\n\nHere are the steps:\n\nFind an image of your favorite animal or another image you like, and save it in the project folder that you created above.\nOpen RStudio, and open the project through the verty top right corner of your screen or through the file menu\nCreate a new Quarto document.\nSwitch to Source mode from Visual mode .\nDelete the entire default entry, including the front matter.\nCopy the code above to the very top of the page. Don’t leave any blank lines above it.\nSave the new Quarto document using the name yourlastname-firstquarto\n\nThe area below the three dashes is your document. In it, create:\n\nA subhed introducing a subtopic, called “About me”\nWithin that heading, a list of three things about yourself or about a topic you love, in an unordered (bulleted) list.\nAnother subhed , called “An image I love”, with some text below it describing why you love it\nThe image that you saved into your project folder\nAnother subhed called “Some R code”\nA code chunk, in which you create a variable , assign it a value, and then print it out.\n\n\nSave your work\nRender the document to a final html file. (Rendering automatically saves, but it’s good practice to do it yourself.)\n\n\n14.3.1 Example document\nYou can look at the original Quarto code and the rendered document, but remember that if you were doing this yourself, you’d have to have the image saved in the same folder as your project.\n\nThere are several reasons it might not work:\n\nYou haven’t saved the document yet.\nThere is an error in that top YAML section. Copy the code above and try again. It’s really picky.\nThere is an error in your R code.\nEverything’s too smushed together. Give your document room to breathe by inserting blank lines between elements. When you first get started, switching to Visual mode will help you figure out where you might have gone wrong."
  },
  {
    "objectID": "r-quarto.html#quarto-resources",
    "href": "r-quarto.html#quarto-resources",
    "title": "14  Using Quarto",
    "section": "\n14.4 Other resources",
    "text": "14.4 Other resources\n\nQuarto’s Getting Started guide\n\nHeiss’s video on R Markdown, which is very similar to Quarto. (13 minutes). It’s great about showing you the glitches you might run into. The differences between Quarto and RMarkdown are :\n\nThe output: html_document line should be format: html\n\nThe name of the file ends with .qmd, not .Rmd\nThe “knit” button is really a “render” button."
  },
  {
    "objectID": "r-quarto.html#footnotes",
    "href": "r-quarto.html#footnotes",
    "title": "14  Using Quarto",
    "section": "",
    "text": "The image below has a different names for the folder and project. Use rlessons-01 as your project folder within maij-working↩︎\nThe title borrowed from Quarto’s own documentation↩︎\nhttps://en.wikipedia.org/wiki/Markdown↩︎\nBeware: This can result in large files, sometimes too large for email systems.↩︎"
  },
  {
    "objectID": "r-data-import.html#the-data-frame",
    "href": "r-data-import.html#the-data-frame",
    "title": "15  Getting and saving data",
    "section": "\n15.1 The data frame",
    "text": "15.1 The data frame\nA data frame is an R object1 and can be used and re-used like any other. The difference is that it contains columns and rows, just like a spreadsheet. These follow the rules we’ve seen about good, tidy Excel files:\n\nEach column contains one kind of information – race, sex, address, etc. Data scientists call these “fields” or “variables” or “attributes”.\nEach row contains one example of each of those columns, all at the same unit of analysis. In other words, they each refer to the same noun. Data scientists call these “observations” or “cases” or “records”.\n\nBefore you can use a data frame, you will have to import some data from a file on your hard drive or the web, or load some data that is saved in one of several R-specific formats. Your data will often arrive in the form of a comma-separated text file (.csv), or in an Excel format (.xlsx)2. As you work on it, you’ll save it as an R data file that you’ve checked for mistakes and proper treatment of columns.\n\n15.1.1 Example data\nChristian McDonald, a data journalism professor at the University of Texas, has compiled a list of Billboard’s Hot 100 hits back to the 1950s, and made it available in his Github account. We’ll be using the data on McDonald’s Github repository at https://github.com/utdata/rwdir/blob/main/data-raw/hot100_assignment.csv?raw=true\nHere is how he describes it:\n\nThe Billboard Hot 100 singles chart has been the music industry’s standard record chart since its inception on 8/2/1958. The rankings, published by Billboard Media, are currently based on sales (physical and digital), radio play, and online streaming. The methods and policies of the chart have changed over time.\n\n\nThe data we will use here is a combination of data collected by Kaggle user Dhruvil Dave, along with some scraping and merging by Prof. McDonald. It is stored on the code sharing website Github for safe keeping.\n\nThe data dictionary\nHere is a data dictionary , sometimes called a record layout to go along with the data. You should look for, or create, something like this for every data source you use.\n\n\n\n\n\n\n\nvariable name\ntype\ndescription\n\n\n\nCHART WEEK\ndate\nThe release date of the chart\n\n\nTHIS WEEK\nnumber\nThe rank (1 through 100) of the song that week\n\n\nTITLE\ncharacter\nSong title\n\n\nPERFORMER\ncharacter\nPerformer, as published in the chart. There could be different spellings over time.\n\n\nLAST WEEK\nnumber\nLast week’s ranking\n\n\nPEAK POS.\nnumber\nHighest ranking ever on the Top 100 chart\n\n\nWKS ON CHART\nnumber\nNumber of weeks it has appeared on the chart, not necessarily consecutive.\n\n\n\nIt’s a good example for us, since there are no nuances to the data, and it contains a mix of words, numbers and dates. You won’t have to spend a lot of time studying it to understand what it is.\n\n\n\n\n\n\nWarning\n\n\n\nNotice the upper-casing, the spaces and the period in the column names. R is a case-sensitive language, meaning a “T” is an entirely different character than a “t”. Column names with spaces and special characters must be treated differently than those with just letters, underscores and periods."
  },
  {
    "objectID": "r-data-import.html#starting-a-new-quarto-program",
    "href": "r-data-import.html#starting-a-new-quarto-program",
    "title": "15  Getting and saving data",
    "section": "\n15.2 Starting a new Quarto program",
    "text": "15.2 Starting a new Quarto program\n\n\nOpen the R project created in the last lesson called “rlessons-01”.\nCreate a new Quarto document. If you want, copy and paste the top section from the last lesson and replace the default options with that.\nDelete the boilerplate below the front matter (after the three dashes)\nCopy and paste this first code chunk into your document and press the “Play” button to run the code.\nRun the code chunk by pressing the Play button\nSave your document as top100-01.qmd . I’m using the “01” suffix so that when I come back to this six months down the road, I know that this program has to be run first!\n\nThis assumes you have installed the packages in the previous chapters. Go back and do that now if you skipped it. That step has to be done only once on each computer you use.\n\n```{r}\n#| label: setup\n\nlibrary(tidyverse)\nlibrary(janitor)\nlibrary(lubridate)\n```\n(The #| part of the code chunk is an instruction for this code chunk. This one provides a name for it. You’ll see others later on.)\nThe library function invokes the packages that you installed earlier. They’re not available to your program by default. That’s because everyone uses a different set of them for different jobs, and they don’t want to gunk up your enviornment with a lot of things you’ll never use.\nAlthough they only need to be installed one time on your computer, packages must be invoked using the library function in every document. Almost every program you write will begin with these same lines, though you’ll often see additional packages added.\n\n\n\n\n\n\nCaution\n\n\n\nEvery time you start a new program, you must 3 start with a code chunk that invokes the packages you plan to use later on. This is done in a setup chunk through that includes the function library() for each package you want to use.\n\n\nHere’s what your page might look like (probably with different colors) if you are in Visual mode:\n\n\nafter running first chunk\n\nDon’t worry about all of the messages that came out after you ran the first chunk – they simply show you some information about what is in the libraries you just loaded. They might even be red!\n\n\n\n\n\n\nTip\n\n\n\nThere are ways to control what gets printed out by using other options at the top of the code chunk. The full list is on the Quarto website — you can set the default in the top metadata, or do them one chunk at a time with additional lines beginning with #| at the top of the code chunk."
  },
  {
    "objectID": "r-data-import.html#importing-the-hot-100-data-file",
    "href": "r-data-import.html#importing-the-hot-100-data-file",
    "title": "15  Getting and saving data",
    "section": "\n15.3 Importing the Hot 100 data file",
    "text": "15.3 Importing the Hot 100 data file\nThe Hot 100 data is stored in a “comma-separated” text file, with the extension .csv. When you import that file, R will guess what each column is – text (words, “character” variables), numbers (“double” precision or “integer”), and date or date/time (“date” or “POSIX” in R).\nData frames are most easily managed by keeping a few style rules in mind:\n\nColumn names should be all lower-case, and have no special characters or spaces in them. They may not start with a number. Separate words in a column name with an underscore, not a space, and avoid any punctuation.\nAny column containing numerals that you don’t plan to use in a math computation should be stored as a character type, not a number.4\n\n\nWe often have to tweak the data import to make sure of these things, or have to convert data types once they ’ve been imported. If you then save your data as an R data frame, you never have to do that again. The read_csv function has a lot of optional arguments – or specifications – that can help overcome problems in the underlying dataset, but it often guesses quite well on its own.\n(From now on, you’ll just see the R code that goes inside a code chunk you create, not the part with the backticks and brackets.)\n\nCreate a new code chunk to read the top 100 dataset and copy the following line into the body of the chunk:\n\n\ntop100 &lt;- \n  read_csv(\"https://github.com/utdata/rwdir/blob/main/data-raw/hot100_assignment.csv?raw=true\")\n\nHere’s what that code does:\n\nCreates a new object called top100, to pour the data into.\nUses a function of the tidyverse5 called read_csv, to\nAccess comma-separated text data held in McDonald’s github repository.\n\nWhen you run the chunk by pressing the green arrow within the code chunk, or press Shift-CMD-Enter , the output should say this:\n\n\n\nRows: 336100 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): CHART WEEK, TITLE, PERFORMER\ndbl (4): THIS WEEK, LAST WEEK, PEAK POS., WKS ON CHART\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nSo R found:\n\n330,800 rows (or records, or observations).\n7 columns ,\n3 of which it thinks are character types, and 4 that it thinks should be numbers.\nIt named the columns using the first row of the file.\n\n\nStop a minute and think about what you just did in one second – you imported a dataset with MORE THAN a quarter of a MILLION rows without any complaint! You could. never get Excel or Google sheets to be so complacent about this middling size database.\n\nThe message also tells you how to get more information.6\nThere is now a new object in your Enviornment tab, under “Data”, called top100, with 330,800 obs. of 7 variables.\n\n15.3.1 Some details\n\n\n\n\n\n\nNote\n\n\n\nIf you want to import an Excel file, you have to use a slightly different library. You will have to load the readxl library in the setup chunk, then use the read_excel() function to access the data. It works similarly, but it’s a slightly different method.\n\n\n\n\n\n\n\n\nDefault to character columns**\n\n\n\nIf you’re not sure about the data types of each column, use an option to import them all as text, or character, columns. Then you can fix them one by one. Text will (almost) never be a problem. The option looks like this:\nread_csv( \"your file name or URL\", col_types=c(.default=\"c\") )\n\n\n\n\n\n\n\n\nNaming your code chunks\n\n\n\nBest practice in R is to provide a label for each code chunk, as we did with the setup chunk. It allows you to refer to it later on, provides a better method for errors to be located, and allows quicker navigation. Do that by adding a line at the top of the code chunk like this: #| label: your-label Don’t use special characters or spaces in the label."
  },
  {
    "objectID": "r-data-import.html#look-at-the-data-you-imported",
    "href": "r-data-import.html#look-at-the-data-you-imported",
    "title": "15  Getting and saving data",
    "section": "\n15.4 Look at the data you imported",
    "text": "15.4 Look at the data you imported\nThere are several ways to examine the data you just imported.\n\n15.4.1 Check it in the environment tab\nThere’s now an object listed in your Environment tab with a blue arrow. Expand it, and you’ll see the column names and what types it found.\n\n\n15.4.2 Click on it to scroll, filter and sort\nAn easy way to get a little preview of your data is to view it like a spreadsheet. Just remember that any filters or sorts that you do here won’t last – they’re just on while you’re glancing at the data. But this is useful just to get a little preview of what columns look like and to search for things you know should be there. For instance, if I wanted to see whether Taylor Swift was named something else, I might search here. This search is NOT case-sensitive, which is helpful when you want to get a handle on what’s in your data.\nTo browse the data, click on its name in the environment panel.\n\n\n15.4.3 Use functions to examine the rows and columns\nBut these methods are no better (and really a little worse) than just viewing your data and clicking around in Excel or Google sheets. To share your view of the data and describe it to others, you must use R code.\nThere are a few standard ways to get a quick view of what’s in your data using functions. First, you can look at the top and bottom of it using the head() and tail() functions:\n\n# use head() to show the first six rows\n\nhead(top100)\n\n\n# use tail() to show the last six rows. \n#change the number of rows as an an optional argument,\n# obtained by searching \"Help\" for the function \"tail\"\n\ntail(top100, n=10)\n\n\n\n  \n\n\n  \n\n\n\nUse the little arrow at the top right of the listing to look at columns that don’t fit on the page.\n\n\n\n\n\n\nNote\n\n\n\nThis is where Visual Mode can become tiresome – often, your output is so smushed that it is unreadable. Switch to Source mode and you’ll be able to see more.\n\n\nOr, you can look at a list of columns along with their types and a few examples from the top of the file using the glimpse() function, in this case listing the name of the data frame you want it to look at within the parentheses.\n\nglimpse(top100)\n\nRows: 336,100\nColumns: 7\n$ `CHART WEEK`   &lt;chr&gt; \"1/1/2022\", \"1/1/2022\", \"1/1/2022\", \"1/1/2022\", \"1/1/20…\n$ `THIS WEEK`    &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, …\n$ TITLE          &lt;chr&gt; \"All I Want For Christmas Is You\", \"Rockin' Around The …\n$ PERFORMER      &lt;chr&gt; \"Mariah Carey\", \"Brenda Lee\", \"Bobby Helms\", \"Burl Ives…\n$ `LAST WEEK`    &lt;dbl&gt; 1, 2, 4, 5, 3, 7, 9, 11, 6, 13, 15, 17, 18, 0, 8, 25, 1…\n$ `PEAK POS.`    &lt;dbl&gt; 1, 2, 3, 4, 1, 5, 7, 6, 1, 10, 11, 8, 12, 14, 7, 16, 12…\n$ `WKS ON CHART` &lt;dbl&gt; 50, 44, 41, 25, 11, 26, 24, 19, 24, 15, 31, 18, 14, 1, …\n\n\nHere, you might notice that the names of some of the columns have back-ticks around them. That’s because they don’t follow our rules for column names – they should be lower case, with no spaces or special characters."
  },
  {
    "objectID": "r-data-import.html#introducing-the-pipe",
    "href": "r-data-import.html#introducing-the-pipe",
    "title": "15  Getting and saving data",
    "section": "\n15.5 Introducing the pipe",
    "text": "15.5 Introducing the pipe\nYou’ll be seeing a lot of R code that has this format:\n  data_set_name |&gt;\n     verb ( nouns ) |&gt;\n     verb ( nouns ) |&gt;\n     etc...\nThat little symbol, |&gt; is called the “pipe”. It means “Take what is on this line, and use it to do the next thing” It matches the way you think about algorithms from the programming appendix in this book. You can use the shortcut keys CTL/CMD-SHift-M instead of typing it out. (If yours comes out as %&gt;% instead of |&gt; as shown in this Tweet, don’t worry about it. There are technical differences, but for now they’ll do the same thing. )\n\n\n\nWe’re going to use two of the other libraries that we loaded at the top — lubridate and janitor — to fix the two problems with this data, while showing you what the pipe does.\n\nAdd a code chunk that you’ll edit to clean the column names and fix the dates the data.\n\nUsing a pipe can help make your code easier to read and write by separating each step into its own command. For example, glimpse(top100) does the same thing as top100 |&gt; glimpse(). The second version tells R, “Start with the top100 data frame and then glimpse it. Using small-ish datasets like this, I try to separate as much as is reasonable into steps because I can then troubleshoot problems one line at a time.\n\n\n\n\n\n\nWarning\n\n\n\nDon’t confuse the pipe (|&gt;) with the assignment operator (&lt;-). The pipe says, “keep going”. The assignment operator says, “save this for later” .\n\n\n\ntop100 |&gt;\n  clean_names()  |&gt;\n  glimpse()\n\nRows: 336,100\nColumns: 7\n$ chart_week   &lt;chr&gt; \"1/1/2022\", \"1/1/2022\", \"1/1/2022\", \"1/1/2022\", \"1/1/2022…\n$ this_week    &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17…\n$ title        &lt;chr&gt; \"All I Want For Christmas Is You\", \"Rockin' Around The Ch…\n$ performer    &lt;chr&gt; \"Mariah Carey\", \"Brenda Lee\", \"Bobby Helms\", \"Burl Ives\",…\n$ last_week    &lt;dbl&gt; 1, 2, 4, 5, 3, 7, 9, 11, 6, 13, 15, 17, 18, 0, 8, 25, 19,…\n$ peak_pos     &lt;dbl&gt; 1, 2, 3, 4, 1, 5, 7, 6, 1, 10, 11, 8, 12, 14, 7, 16, 12, …\n$ wks_on_chart &lt;dbl&gt; 50, 44, 41, 25, 11, 26, 24, 19, 24, 15, 31, 18, 14, 1, 49…\n\n\nThis shows us that the function clean_names() converts the column names into our preferred style. Notice that we didn’t pour that answer into a new object — there is no assignment operator &lt;- – so it just prints the answer to the screen.\nOnce this works as expected, we can finish cleaning up the data.\n\n\n\n\n\n\nCaution\n\n\n\nDon’t try to save the output of something you “glimpse” into a new object – it won’t be the data itself, just the thing that got printed out!\n\n\n\n15.5.1 Introducing verbs of the tidyverse\nThis process uses the pipe to tack on new statements after each one is complete, and introduces the verbs of the tidyverse, which you’ll see in action in the next chapter.\nThese are two of the most important verbs you’ll use:\n\n\nselect, which picks and rearranges columns (kind of like filtering vertically)\n\nmutate, which lets you create new columns out of old ones. (like inserting a column in Excel and entering a formula)\n\nThe code chunk also uses function called mdy(), which stands for “month-day-year”, which in turn tells R that the character chart_week column starts out in that format, as opposed to year-month-day or something else.7\n\nYour final code chunk should look like this. Try to avoid copying and pasting, and instead build it one step at a time, running the chunk each time you add a phrase.\n\n(I usually add the object name at the top last to save the data result for later use, after I’m sure everything has worked by printing it to the screen.)\n\ntop100_clean &lt;- \n  top100 |&gt;\n  clean_names () |&gt;\n  mutate ( chart_date = mdy(chart_week)) |&gt;\n  select ( chart_date, title, performer, this_week, last_week,\n           wks_on_chart, peak_pos)"
  },
  {
    "objectID": "r-data-import.html#check-your-work-and-save",
    "href": "r-data-import.html#check-your-work-and-save",
    "title": "15  Getting and saving data",
    "section": "\n15.6 Check your work and save",
    "text": "15.6 Check your work and save\nNow check your data by “glimpsing” it:\n\ntop100_clean |&gt; \n  glimpse()\n\nRows: 336,100\nColumns: 7\n$ chart_date   &lt;date&gt; 2022-01-01, 2022-01-01, 2022-01-01, 2022-01-01, 2022-01-…\n$ title        &lt;chr&gt; \"All I Want For Christmas Is You\", \"Rockin' Around The Ch…\n$ performer    &lt;chr&gt; \"Mariah Carey\", \"Brenda Lee\", \"Bobby Helms\", \"Burl Ives\",…\n$ this_week    &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17…\n$ last_week    &lt;dbl&gt; 1, 2, 4, 5, 3, 7, 9, 11, 6, 13, 15, 17, 18, 0, 8, 25, 19,…\n$ wks_on_chart &lt;dbl&gt; 50, 44, 41, 25, 11, 26, 24, 19, 24, 15, 31, 18, 14, 1, 49…\n$ peak_pos     &lt;dbl&gt; 1, 2, 3, 4, 1, 5, 7, 6, 1, 10, 11, 8, 12, 14, 7, 16, 12, …\n\n\nNote the new data type for the chart_date, and the order of the columns along with the clean names.\n\nNow save your data as an R data file (called an “RDS” file) like this:\n\n\nsaveRDS(top100_clean, file=\"hit100.RDS\")"
  },
  {
    "objectID": "r-data-import.html#what-we-did",
    "href": "r-data-import.html#what-we-did",
    "title": "15  Getting and saving data",
    "section": "\n15.7 What we did",
    "text": "15.7 What we did\n\nCreated a new Quarto document and added the packages (libraries) we plan to use.\nImported a comma-separated text file from the web into a data frame object called top100.\nTook a look at it in several different ways.\nCreated a second data frame from the first, with names and dates fixed, with only some columns picked out and displayed in a new order.\nSaved it into the project for use in another program.\n\nWhat you should do next\nIf you’ve followed along, you should create text surrounding your code chunks that result in a clean, readable document that is easy to navigate, has full sentences fully describing your work, and makes sense from top to bottom when rendered.\n\nDocumentation of the source of your file.\nSub-headings for each of the steps\nIntroductory text describing what you are about to do\nMaybe: Some text after the chunks that describe meaningful output or things you notice about the result.\n\nIf you’re stuck, you can use the template I created as a starting point.\nRender it early and often to make sure your program isn’t broken and that the output looks the way you expect.\nAnd breathe\nYou’ve now created a full, working R program in Quarto format that can serve as a model for everything you do in the future. Congratulate yourself and take a break!\n\n\nMax van den Oetelaar via Unsplash"
  },
  {
    "objectID": "r-data-import.html#file-formats",
    "href": "r-data-import.html#file-formats",
    "title": "15  Getting and saving data",
    "section": "\n15.8 Postscript: Understanding file types",
    "text": "15.8 Postscript: Understanding file types\nSo far in this book, you’ve been saved from having to understand the format of data as it is traded among people and computers. Now you’ll have to start understanding that there are different forms of data files, one of which is the simple Excel file that we’ve dealt with so far.\nBut Excel is a propriety format – it’s made by Microsoft and isn’t very easy to use without a program that can import it. As we’ve seen, it can also corrupt data by misunderstanding data types like dates and numbers, and there isn’t much control over its assumptions.\nThis section will go over the common data formats you’re likey to run across in your work with R. However, R is not limited to these. You’ll often find arcane and specialized data file formats if you work with statisticians or experts in geographic analysis that can also be read in R. There is almost always a package available that will import it.\nTabular text data\nIn Excel and Google Sheets, each page of a workbook is tabular, meaning it is approximately a rectangle. It might be a narrow and tall rectangle, or a short and wide rectangle, but it’s still a rectangle. Each column is an attribute or a variable, and each row is an observation or a record .\nEvery computer can read and write plain text. Those are the characters you can type on a typewriter, with no fancy formatting or other features that require special software to ingest it. We’ll normally be dealing with these. They usually come in two flavors:\n\nCSV data is “comma-separated values” data, which means that a new column will be created whenver a comma is encountered. If there is a chance that there might be a comma inside a column, it will be enclosed by quote marks. This usually works OK, but there are some times when you have to be careful because there could be commas AND quotes inside a column. (A good example is a column of peoples’ names – they may be something like Smith, Johnny \"The Rat\") To overcome this, some people use:\nTSV , or tab-separated data. In this case, the tab key determines the distinction between columns, which is much rarer to find in plain text files.\n\nHere’s what a CSV might look like listing the last few presidents:\n  name, position, start_date, age_at_start_date\n  \"Biden, Joe\", President, 2021-01-20, 78\n  \"Trump, Donald\", President, 2017-01-20, 70\n  \"Obama, Barack\", President, 2009-01-20, 47\nIt looks like a mess to you, but it’s a thing of beauty to a computer.\nSome government agencies just make up a delimiter instead of a comma or tab - I’ve seen them with vertical bars (|) and tildes ~. You would use the function read_delim() to import a text file delimited by something other than a comma.\nNon-tabular text data\nAnother common format you’ll see passed around from computer to computer is called JSON. This stands for Javascript Object Notation, and is commonly used to pass data over the web , often to your phone or your browser.\nIt looks even worse, but it’s also a thing of beauty to a computer. The same data would look like this in JSON:\n {\"presidents\": [\n    {\"name\": \"Biden, Joe\", \"position\": \"President\", \"start_date\": \"2021-01-20\", \n       \"age_at start_date\": \"78\"},\n    {\"name\": \"Trump, Donald\", \"position\": \"President\", \"start_date\": \"2017-01-20\", \n       \"age_at start_date\": \"70\"},\n    {\"name\": \"Obama, Barack\", \"position\": \"President\", \"start_date\": \"2009-01-20\", \n       \"age_at start_date\": \"47\"}\n   ]\n  } \n    \n\n15.8.1 Evil data - PDF\nWe’ll look at this later, but just know that data supplied in a PDF file isn’t data at all – it’s effectively pixels placed on a page, and is intended for printing and viewing, not analyzing. Government agencies often print Excel files into PDF’s – I have no idea why, but it’s common, and it’s often difficult to convince them to do anything else regardless of the local public records law. For now, just remember that this is one file format you want to avoid if at all possible – it’s the most error-prone and difficult data to manage, even if it looks pretty.\n\n15.8.2 Proprietary data formats\nExcel is one proprietary data format; Google Sheets is another. You may run into many different kinds, ranging from maps to statistical systems like SAS. R has a package that will read almost any of these – once you find it, it shouldn’t be a problem.\nThe more common packages you may need to read them are readxl , which is part of the tidyverse, and googlesheets4."
  },
  {
    "objectID": "r-data-import.html#footnotes",
    "href": "r-data-import.html#footnotes",
    "title": "15  Getting and saving data",
    "section": "",
    "text": "An object in R is just a name of something. We’ll try to distinguish it from a column in a dataset, which statisticans call “variables”. But the terms are sometimes used interchangeably.↩︎\nSee the postcript on file formats↩︎\nWell, sort of. You can also invoke packages in a program by fully specifying its name, with the package name followed by two colons and the function, like this: readr::read_csv(). You’ll often see that in examples – it’s deliberately done to show you which package the function is coming from.↩︎\nMore advanced users create a special type of variable called a factor to work with categories - we’re skipping that for now.↩︎\nActually, a package within the tidyverse called readr↩︎\nSometimes, this will say “Use problems() …”, meaning that something could have gone wrong and you should check it. We’ll see how to fix the column types at the same time as your import later on in the course.↩︎\nThis function is part of the library called lubridate that we also loaded in the setup chunk.↩︎"
  },
  {
    "objectID": "r-verbs.html#filter-and-arrange",
    "href": "r-verbs.html#filter-and-arrange",
    "title": "16  A quick tour of verbs",
    "section": "\n16.1 Filter and arrange",
    "text": "16.1 Filter and arrange\nfilter is the same idea as filtering in Excel, but it’s much more picky. In R, you have to match words exactly, including the upper- or lower-case.\narrange is R’s version of Excel’s sort.\nHere’s how you would pick out all of Taylor Swift’s appearances on the Billboard top 100 list, in chronological order.\n\n\n\n\n\n\nCaution\n\n\n\nIn R, a condition is tested in a filter by using two equal signs, not one.\n\n\n\ntop100 |&gt;\n  filter ( performer == \"Taylor Swift\") |&gt; \n  arrange (  chart_date )   \n\n\n\n  \n\n\n\nSo Taylor Swift has songs on the Billboard Hot 100 list more than 1,000 times since 2008.\nHere’s how you’d list only her appearances at the top of the list – No. 1 is the lowest possible value for this_week, indicating the rank , then pick out just a few columns to list in order:\n\n\ntop100 |&gt;\n  filter (performer==\"Taylor Swift\" & this_week == 1) |&gt;\n  arrange ( chart_date)  |&gt;\n  select ( this_week, song, chart_date, last_week)\n\n\n\n  \n\n\n\n\nHer first No. 1 hit was in 2012, and her most recent was in November 2021."
  },
  {
    "objectID": "r-verbs.html#summary-statistics-in-r",
    "href": "r-verbs.html#summary-statistics-in-r",
    "title": "16  A quick tour of verbs",
    "section": "\n16.2 Summary statistics in R",
    "text": "16.2 Summary statistics in R\nSummary statistics are similar to those you saw in pivot tables. They include\n\n\nn() – instead of “count”\nsum()\n\nmean() – instead of “average”\nmedian()\n\nmin() and max()\n\n\nTo count the total number of songs in this database, you would use the summary function n(), which is how statisticians think of the concept of “how many?”\nIn this case, because we’ve done nothing else, it will match the number of rows in the data frame. This code also creates two other summary statistics: The first (earliest) entry in the entire list, and the last one.\n\n\n\n\n\n\nSingle vs. double “=”\n\n\n\n\nUse a single equals sign when you are naming a new column\nUse a double equals sign to see if one thing is the same as another\nDon’t ever name the new column the same thing as another column.\n\n\n\n\ntop100 |&gt;\n  summarize ( number_of_entries = n() , \n              first_entry = min(chart_date), \n              last_entry= max(chart_date)\n              )"
  },
  {
    "objectID": "r-verbs.html#grouping-with-summary-statistics-aggregating",
    "href": "r-verbs.html#grouping-with-summary-statistics-aggregating",
    "title": "16  A quick tour of verbs",
    "section": "\n16.3 Grouping with summary statistics (aggregating)",
    "text": "16.3 Grouping with summary statistics (aggregating)\nYour questions will often be around the idea of “the most” or “the biggest” something. Like in Excel, you could do this by guessing and filtering one thing after another. Or you could make a list of the items, then count them up all at once.\nTo get the performer with the most appearances on the list, you combine group_by with summarize to count within each group. We’ll go into this in a lot more detail in future chapters.\n\ntop100 |&gt;\n  group_by ( performer) |&gt;\n  summarize ( times_on_list = n() ) |&gt;\n  arrange (desc ( times_on_list ))  |&gt;\n  head (10)\n\n\n\n  \n\n\n\n(You may notice that the number next to Taylor Swift’s name on this list is the same number of rows that were found during the filter.)\nThat code chunk:\n\nBegan with the top100 data frame that was loaded earlier from the saved version, and then\nMade one row for each performer using group_by, and then\nCounted the number of times each one appeared using summarize and n() and named the new column times_on_list, and then\nSorted, or arrange the list in descending order by that new column created during the summarize step, and then\nPrinted off the first 10 rows.\n\nIn Excel, we had trouble sorting a pivot table with city and state as rows. Here, that’s not a problem:\n\ntop100 |&gt;\n  group_by ( song, performer)  |&gt;\n  summarize ( times_on_list = n() , \n              last_time_on_list = max(chart_date),\n              highest_position = min(this_week)\n            ) |&gt;\n  arrange ( desc ( times_on_list) ) |&gt;\n  head(25) \n\nSo some of the songs that were on the list the longest never made it to #1. (You’ll learn later on how to make tables that are more easily navigated.)"
  },
  {
    "objectID": "r-verbs.html#make-a-chart",
    "href": "r-verbs.html#make-a-chart",
    "title": "16  A quick tour of verbs",
    "section": "\n16.4 Make a chart!",
    "text": "16.4 Make a chart!\nOne motivator in learning R is its very sophisticated graphics. Here, you can just copy and paste this code to see how it might work, without worrying about exactly what it does. We’ll learn how to make this interactive in a future lesson.\nI’ve made a dataset for you that contains the 21 No.1 songs that stayed on the Hot 100 for at least a year in this century. (Songs released after late 2020 will be missing, since the data is a little old and there has to have been at least a year since the release.) You can just copy and paste this code chunk and then render your page, just to prove that — even if you don’t understand it yet — it’s not a lot of work to make a reasonable-looking chart.\n\n```{r}\n#| label: hot-100-top-10-list\n#| column: screen-inset-right\n\n# read the data\nreadRDS( \n  url (\"https://cronkitedata.s3.amazonaws.com/rdata/top_songs.RDS\")\n  ) |&gt; \n# start the plot\n  ggplot ( \n        aes ( x=chart_date, y=hit, color=this_week ) \n        ) +\n       geom_point(  size= .25) +\n# make it look a little better\n  labs( color = \"Hot 100 #\") +\n  theme_minimal( ) +\n  theme(axis.title.x = element_blank(),\n          axis.title.y = element_blank(), \n#         panel.grid.major=element_blank(), \n        legend.position= \"bottom\") \n```"
  },
  {
    "objectID": "r-verbs.html#thoughts-on-the-verbs",
    "href": "r-verbs.html#thoughts-on-the-verbs",
    "title": "16  A quick tour of verbs",
    "section": "\n16.5 Thoughts on the verbs",
    "text": "16.5 Thoughts on the verbs\nYou’ve now seen most of the key verbs of the tidyverse, and how they can be put together. They are:\n\n\nmutate , which you saw in the last chapter, to create new columns.\n\nselect, to pick out columns in the order you want to see them\n\nfilter, to pick out rows based on a condition\n\nsummarize to compute summary statistics like “how many?” and “how much? or”smallest” and “largest”\n\ngroup_by to create a single row for each unique item in a list.\n\nDon’t worry if you don’t understand how this works or how to do it yourself. This walkthrough is just intended to show you how much you can do with just a few lines of code."
  },
  {
    "objectID": "r-verb-filter.html#select-columns",
    "href": "r-verb-filter.html#select-columns",
    "title": "17  Verbs in depth: Select, arrange, filter",
    "section": "\n17.1 select columns",
    "text": "17.1 select columns\nThe select verb allows you to pick out columns by name or by their order in the data frame. Selecting columns is case-sensitive: a column called amount is completely different than a column named Amount. That’s one reason to use our style of always converting column names to lower case.\nselect is the easiest verb to understand it so it’s shown here first. But in practice, I usually include it as my last verb in a code chunk because some columns that I don’t care about in the end are needed for filtering or creating new columns.\nThere a lot of ways to pick out column names that are based on their name, their position, their type or other characteristics. Here are a few:\n\n\nselect (date_approved, borrower_name) picks out those columns and rearranges them from left to right in the order you mention them.\n\nselect (1:10) picks out the first 10 columns. Think of the colon as the word “through”\n\nselect ( 2, 4:6, business_type) combines position and name so you can use whichever is easier.\n\nYou can rename columns at the same time you select them by typing the new name, one equals sign and the old name, for example:\nselect ( given_date = date_approved, \n        borrower = borrower_name)\n\nTry it now and create a new data frame you’ll use later in the filtering section with just a handful of columns that are easier to manage.\n\nppp_small &lt;- \n   ppp_orig |&gt; \n  select (borrower_name, borrower_address, borrower_city,\n          project_county, date_approved, amount, \n          forgiveness_amount)\n\n\nglimpse(ppp_small)"
  },
  {
    "objectID": "r-verb-filter.html#arrange-rows",
    "href": "r-verb-filter.html#arrange-rows",
    "title": "17  Verbs in depth: Select, arrange, filter",
    "section": "\n17.2 arrange rows",
    "text": "17.2 arrange rows\nThe arrange verb sorts your data in different ways depending on the type of column. They can be alphabetical (character columns), in numeric order ( number or double columns), or chronologically (date or date/time columns) . Reverse the order by using desc() :\n\nppp_small |&gt;\n  arrange ( date_approved, desc(amount) )"
  },
  {
    "objectID": "r-verb-filter.html#filter-rows",
    "href": "r-verb-filter.html#filter-rows",
    "title": "17  Verbs in depth: Select, arrange, filter",
    "section": "\n17.3 filter rows",
    "text": "17.3 filter rows\nfilter uses Boolean logic to allow quite sophisticated and powerful conditions to pick out just the rows you want to see or to further examine.\nWhen you use a filter, you are telling R: “Give me back only the rows where the conditional formula I give you results in TRUE.”\nTry it yourself: In your Console, type your name in quotes, then two = signs, then “Barack Obama” in quotes. Note that the answer is FALSE – that condition fails.\nThe conditions are case-sensitive and extremely picky about characteristics like upper and lower case, spacing and punctuation. For example, “PIZZA HUT OF ARIZONA, INC” is completely different than “PIZZA HUT” or “Pizza Hut of Arizona Inc” . A simple extra character will prevent a match.[^That’s why I’ve removed all of the punctuation from your the borrower names and addresses in your data file, and turned all of the names into upper case.]\nHere are the operators , or symbols, you’ll use to make the conditions you want to test. Your column name goes on the left, and the value you want to test is on the right:\n\n\n\n\n\n\n\n\nOperator\nData types\nMeaning\n\n\n\n==\nAll\nEquals, exactly. Note the double-equals sign, which distinguishes it from an assignment operator, such as setting new column name.\n\n\n\n&gt; , &gt;=\n\ndate, numeric\nGreater than / greater than or equal to.\n\n\n\n&lt;, &lt;=\n\ndate, numeric\nLess than / less than or equal to.\n\n\n!=\nall\nNot equal to\n\n\n%in%\nall\nIs equal to any of the items in a list that you type out, such as fruit %in% c(\"apple\", \"orange\").\n\n\n\n\nIn each of these cases, the column name goes on the left of the operator, and the condition goes on the right.\nYou can combine them using the Boolean operators and and or, which are used in other contexts like advanced Google searches :\n\n& means “and”. which means that both conditions must be true. It narrows your search. (You can also separate the conditions with commas instead of ampersands) Think of it as a fish net, with smaller openings so only littler fish can geth through.\n| (the verticle bar, near the Return key) means “or” , which means that either condition can be true. It widens your search. It is a fish net with bigger openings, so both big and little fish can get through.\n%in% is the equivalent of an “or” condition and is used when you want to test a lot of items within one column but reduce the amount of repetitive typing.\n\nThis is sometimes confusing because it’s the exact opposite of the way we describe it in English. If we want “apples and oranges”, we have to search for an apple OR an orange in each row: fruit == 'apple' | fruit == 'orange'\nYou often need to use parentheses to tell R what order you want to evaluate the conditions when you combine “AND” and “OR” conditions.\n\n\n\n\n\n\nTip\n\n\n\nMatching parentheses can be tricky. To make it a little easier, you can set “rainbow parentheses” in the RStudio options, which will show you the matching opening or closing brackets and parentheses in different colors when your cursor is placed next to one of them. It’s under the Tools -&gt; Global Options -&gt; Code -&gt; at the bottom of the Display tab.\n\n\nA few examples\nIn the PPP data, all borrower names are in upper case, and all cities and addresses are in proper case. In addition, all of the punctuation has been removed from those two columns, such as periods, commas, quotes and apostrophes.\nWhen you use a condition :\n\nNumbers are without quotes, commas, dollar signs or anything other than digits and decimal points. (1000000.24)\nText is always in quotes.\nDates are in the form “2022-01-22”.\n\nA list of borrowers in Flagstaff and Sedona\nStart with the borrowers just in Flagstaff.\n\nppp_small |&gt; \n  filter ( borrower_city == \"Flagstaff\") \n\nNow look for either “Flagstaff” OR “Sedona”:\n\nppp_small |&gt; \n  filter ( borrower_city == \"Flagstaff\" | borrower_city == \"Sedona\") \n\nThis could get old if you’re looking for, say 10 or 20 cities. Instead, you can put them in a list and look for them all at once, like in this query where we look for Flagstaff, Sedona and Bisbee\n\nppp_small |&gt; \n  filter ( borrower_city %in% \n             c(\"Flagstaff\", \"Sedona\", \"Bisbee\")\n           )\n\nNarrowed to under $100,000\nTo narrow it just to loans under $100,000, you can use an “&” condition, or add another filter. In practice, I will often try to separate my “AND” conditions into a new filter command — it’s sometimes easier to read than a lot of (|&,) symbols.\n\nppp_small |&gt;\n  filter ( borrower_city %in% c(\"Flagstaff\", \"Sedona\")) |&gt;\n  filter ( amount &lt; 100000) |&gt;\n  arrange (date_approved)\n\nAnother way to do the same thing\nThe query above is the equivalent of the last example to produce the same answer. This time it uses a combination of the | “or” operator with the & “and” operator.\n\nppp_small |&gt;\n  filter ( \n           (borrower_city == \"Flagstaff\" | borrower_city == \"Sedona\") &\n            amount &lt; 10000\n  ) |&gt;\n  arrange (date_approved)\n\n(You might note how I did the indentations above – it helps in reading the code to make clear what comes before what.)\nProjects in Maricopa County that are NOT in Phoenix or Scottsdale\nHere’s how to negate a filter - everything NOT in two cities. The ! at the beginning of the condition means that it must evaluate to FALSE instead of TRUE to be kept in the data.\n\nppp_small |&gt;\n  filter ( project_county == \"MARICOPA\" &\n             (! borrower_city %in% c(\"Scottsdale\", \"Phoenix\")) \n  ) |&gt;\n  arrange (amount)\n\n\n\n\n\n\n\nWarning\n\n\n\nBe careful when using missing data or combining conditions when you negate. The answer is often very different than you intended. It often behaves opposite of what you intended."
  },
  {
    "objectID": "r-verb-filter.html#using-str_like-for-inexact-matches",
    "href": "r-verb-filter.html#using-str_like-for-inexact-matches",
    "title": "17  Verbs in depth: Select, arrange, filter",
    "section": "\n17.4 Using str_like() for inexact matches",
    "text": "17.4 Using str_like() for inexact matches\nThe operators we’ve examined so far are pretty limited. You have to know exactly what’s in a character column, which can get pretty annoying when you are trying to nail down a story based on data entered by humans into computers.\nBut you can also use the results of formulas, or expressions as a condition, as long as they result in a TRUE or FALSE answer. One of the most powerful is the function str_like(), which was added to the tidyverse in late 2022. It allows you to use wildcard characters to find words and phrases that begin with or contain some characters, and it’s not case-sensitive!\n\n\n\n\n\n\nTip\n\n\n\nThere is a whole set of these “string” functions available in the tidyverse through its stringr package. We’ll get to some of the more common ones later in the book, especially those related to a powerful pattern-matching method called “regular expressions” or “regex”.\n\n\nThe difference in using functions is that you’ll structure your command a little differently. Instead of\nborrower_city == \"Scottsdale\", you’ll use a formula that looks like\nstr_like(borrower_city, \"scottsdale\"), where the function name comes first, then, inside parentheses, are the column you want to check and the value you want to look for.\nstr_like() uses wildcards to stand in for characters you’re not sure about. They are:\n\n_ for one missing character. Use it when you aren’t sure of spelling.\nThe condition summari_e would be TRUE if the word were “summarise” or “summarize”.\n% for any number of unknown characters, or a missing character.\nFor example, N% SCOTTSDALE R% would match “North Scottsdale Road”, “N. Scottsdale Rd” or “North Scottsdale Rd.” but not “Scottsdale” or “N Scottsdale Ave”.\n\nSmart use of wildcards can often save you a lot of typing!\nExamples\nYou might want to use str_like whenever you filter for words just because it doesn’t care about upper and lower case.\nThis example would find borrowers who had addresses that were “CENTRAL AVE”, “Central Ave” or “central ave”. It excludes anyone with a street address, a suite number, or anyone on North Central Ave. because there is no wildcard:\n\nppp_small |&gt; \n  filter ( str_like ( borrower_address, \"central ave\"))\n\nBut this one finds all of the borrowers on Central Avenue:\n\nppp_small |&gt; \n  filter ( str_like ( borrower_address, \"% central ave%\") )\n\nIf you examine some of the answers, you’ll see why having wildcards is so important — there’s really no way to guess how, exactly, a borrower might have entered their address. There’s no standardization on this or on many other columns in the data."
  },
  {
    "objectID": "r-verb-filter.html#a-note-on-na-or-missing-data",
    "href": "r-verb-filter.html#a-note-on-na-or-missing-data",
    "title": "17  Verbs in depth: Select, arrange, filter",
    "section": "\n17.5 A note on NA, or missing data",
    "text": "17.5 A note on NA, or missing data\n\n\n\n\n\n\nWarning\n\n\n\nA filter will never return any rows that are missing, or NA in the column you test. This is true both when you are trying to include them, and when you’re trying to include everything except something else.\n\n\nIn most data sets, there is at least a little missing data. In this case, the forgiveness amount never shows the value zero. Instead, it shows NA, or the R symbol for missing data.\nThis isn’t the same as the letters “NA”. It’s a special type of value that means “nothing”. It’s not zero, it’s not higher or lower than any other value, it doesn’t ever equal anything and it doesn’t ever NOT equal anything! It stands for a value that is truly unknown. In fact, an NA never even matches another NA, because we don’t know anything about either one.\nThis means you can’t filter for NA values directly and often have to take them into account.\nTo filter for NA values, you’ll use a special function — is.na() — designed to pick out these bad actors:\n\nppp_small |&gt; \n  filter ( is.na ( forgiveness_amount ))\n\nWe’ll come back to this later, but for now just remember that missing data is a scourge on your analysis, and it will almost always be a problem you have to solve."
  },
  {
    "objectID": "r-verb-filter.html#your-turn",
    "href": "r-verb-filter.html#your-turn",
    "title": "17  Verbs in depth: Select, arrange, filter",
    "section": "\n17.6 Your turn",
    "text": "17.6 Your turn\nCreate a new Quarto document in your project. Add a sub-heading that provides documentation and sourcing of the data. You can load the data at the same time using this code chunk:\n```{r}\n\nppp_orig &lt;- readRDS( url ( \"https://cronkitedata.s3.amazonaws.com/rdata/ppp_az_loans.RDS\"))\n```\nNext, add a code chunk with the glimpse(ppp_orig) command to get a list of the columns in order.\nFiltering your data\nCreate code chunks that will filter for the following values. You can select just the columns you want to see in whatever sort order makes sense for you to troubleshoot. You can rewrite the list below into plain English sentences to introduce the code chunks.\nFind the following sets of loans, and try to think about why these might make for interesting or possible story ideas.\n\nAt least $1 million\nUnder $1,000\nUnder $1,000 for projects in Maricopa County\nLoans that were paid in full but not forgiven. In other words, the borrower decided to pay it back rather than ask for taxpayers to cover it. (These loans are shown as missing, or NA in the forgiveness_amount column)\nLoans in Phoenix, Scottsdale and Tempe\nLoans in Arizona that were for projects out of state.\nMcDonald’s franchises. (I removed the apostrophe.)\nAny loan to a Native American tribe or nation or reservation. Hint: It’s hard to do this because “NATION” could be part of the word “NATIONAL” and “TRIBE” could be part of the word “TRIBECA” and “RESERVATION” could be part of the word “PRESERVATION”. See how far you can get using your wildcards.\nYour questions\nCreate a new section in your document, and list three additional filters that might yield something interesting. Before each attempt you make, write a sentence that describes, in plain English, what you are trying to find. Then after running your attempt, write a sentence summing up what you see in the result. Was it what you expected? Anything interesting?"
  },
  {
    "objectID": "r-verb-mutate.html#mutate-to-create-new-columns",
    "href": "r-verb-mutate.html#mutate-to-create-new-columns",
    "title": "18  Verbs in depth: New from old data with Mutate",
    "section": "\n18.1 mutate to create new columns",
    "text": "18.1 mutate to create new columns\nUse the verb mutate whenever you want to create or change existing columns in your data.\nExamples of this include:\n\nComputing difference or percent difference\nReplacing NA values with “Unknown” or zero.\nCollapsing or creating categories for more meaningful analysis\n\nYou will often use a combination of filtering and mutating to create a new data frame using the &lt;- assignment to use in future code chunks. That’s because they can get complex, and you don’t want to repeat code that you might have to change over and over.\n\n\n\n\n\n\nWarning\n\n\n\nThis chapter assumes you have gone through the filtering chapter. Many of the expressions and functions are the same, so if they don’t look familiar to you, consider reviewing that chapter (again) first.\n\n\nmutate uses the syntax:\n    mutate ( new_column_name = function (arguments))\nThat’s pretty abstract, so we’ll do this using examples.\n\n18.1.1 Math on columns: compute difference and percent difference\nHere’s an example of computing the difference and percent difference between the amount received and the amount forgiven. Before you run this, try to think of why a reporter might be interested in this list.\nUse the single “=” sign to provide a name for the new column and create more than one new column using a comma between them:\n\nppp_orig |&gt;\n  mutate ( amt_diff =  forgiveness_amount-amount, \n           amt_pct_diff = amt_diff / amount  * 100 ) |&gt;                   # compute new columns\n  select ( borrower_name, borrower_city, amount, forgiveness_amount) |&gt;   # pick out a few columns\n  head(5).                                                                # show the first five rows\n\nIf you look hard enough, you’ll realize that there are a lot of rows with NA instead of a value. That’s because whenever you do anything with a missing value, the result is missing. Missing values infect everything they touch. You often have to deal with them before you can do anything else.\n\n18.1.2 Converting NA to 0\nWe would like to convert the forgiven amount from a missing value to zero, under the idea that if they have not filled it out, nothing has (yet) been forgiven. Of course, we’d have to check that with the SBA before publication.\nThere is a specific function used for that: replace_na(), with two arguments: The column you want to check for missing values, and the value you want to use instead. This isn’t limited to numbers – you can do the same thing with words, often replacing NA with “Unknown”.\n\nppp_forgiven_fixed &lt;- \n  ppp_orig |&gt;\n  mutate (amount_forgiven = replace_na(forgiveness_amount, 0))\n\n(Note that nothing came out in this code chunk because the result was saved into a new data frame variable.)\n\n18.1.3 Detail and total with summary statistics\nYou can use mutate to put summary statistics next to your values so you can see whether or not they are similar to the average or median. (If you skipped converting the NA values above, the answers will always come out as NA, because they infect everything they touch. )\nˆ\n\nppp_forgiven_fixed |&gt; \n  mutate ( avg_forgiven = mean(amount_forgiven), \n           median_forgiven = median(amount_forgiven)) |&gt; \n  select (borrower_name, amount_forgiven, avg_forgiven, median_forgiven ) |&gt; \n  head()"
  },
  {
    "objectID": "r-verb-mutate.html#categorizing-text-using-conditional-statements",
    "href": "r-verb-mutate.html#categorizing-text-using-conditional-statements",
    "title": "18  Verbs in depth: New from old data with Mutate",
    "section": "\n18.2 Categorizing text using conditional statements",
    "text": "18.2 Categorizing text using conditional statements\nVery often, you’ll want to categorize entries in a database in order to make it simpler to count and sum the values in a meaningful way. For example, the business_type column has 24 different values, including NA . Here’s a list with the number of loans in each category:\n\n#| label: print-forgiven\n#| eval: true\n#| echo: false \n\nppp_forgiven_fixed  |&gt;\n   count ( business_type, sort=TRUE, name=\"# of rows\") \n\n\n\n  \n\n\n\nOne way to work with these is to create new columns with yes-no indicators for certain types of businesses like non-profits or individuals vs. companies.\n\n18.2.1 Two categories using if_else\n\nThe function to do this is if_else() , which tests a condition exactly the same way filter did, but then assigns a value based on whether it’s met or not. You list the condition first, then a comma , then what should happen if the condition is true, and then what should happen if it’s false.\nThe condition is done the same way you did it in a filter, but instead of picking out the rows that match, mutate acts on them separately from the rows that don’t match.\nThere’s no “maybe”, except for NA’s in the original value. Here’s the general form of what it looks like:\n\nnew_column_name = if_else ( test the old column for something as in a a filter,\n                         give it a value if it's true,\n                         give it another value if it's not true)\nSo here is a way to do this with the business_type using the same %in% operator you used in the filter lesson, saving it to new data frame in your Environment, then displaying the first 10 types of businesses using count()\n\n\n\n\n\n\nNote\n\n\n\nThis code chunk uses a verb called count() to count up the number of rows in each category. We’ll get into this in much more detail in the next chapter, but it’s helpful to use it now to show you the results of creating new categories from old data.\n\n\n\n#| label: m-category-indiv \n#| eval: true \n#| echo: true\n\nppp_category_indiv &lt;- \n  ppp_forgiven_fixed |&gt;\n  mutate ( is_individual = \n              if_else ( business_type %in% \n                          c(\"Independent Contractors\", \n                            \"Sole Proprietorship\", \n                            \"Self-Employed Individuals\", \n                            \"Single Member LLC\"), \n                        \"Individual\", \n                        \"Organization\")\n  )  \n\nppp_category_indiv |&gt; \n  count (is_individual, business_type) |&gt; \n  head(10)\n\n\n\n  \n\n\n\n\n18.2.2 Two categories using fuzzy matching\nYou can also use the same str_like() function you used in filtering. Here, it sets whether or not the borrower was a non-profit. Remember, a % means “anything or nothing, and a _ means”any single character but it must be present”. In our case, the word is shown as “Non Profit” and “Non-Profit”. Once. you’ve set it to your new words, you can just filter on the new value:\n\nppp_category_nonprofit &lt;-\n  ppp_category_indiv |&gt;\n  mutate ( is_nonprofit = \n             if_else ( str_like(business_type, \"%Non_Profit%\") , \n                       \"Is nonprofit\", \n                       \"Not nonprofit\"))  \n\n\n\nppp_category_nonprofit |&gt;\n  count ( business_type, is_nonprofit) |&gt;\n  filter ( is_nonprofit == \"Is nonprofit\")\n\n\n\n  \n\n\n\n(The profit categorization is unclear for some of these types, such as professional associations , tribal concerns and cooperatives.)\n\n18.2.3 More than two categories using case_when()\n\nSometimes you will want more than one outcome, such as setting a value for “High”, “Medium” and “Low”. Instead of if_then, use the function case_when, which lets you string along conditions and their outcomes. The tilde (~) is used to show what happens if it’s true, and a TRUE at the end lets you say “everthing else”1\n\noriginal data |&gt; \n  case_when ( first condition ~ what if it's true,\n              second condition ~ what if  it's true, \n              third condition  ~ what if it's true, \n              TRUE ~ what to do with everything that's left\n              )"
  },
  {
    "objectID": "r-verb-mutate.html#putting-it-all-together",
    "href": "r-verb-mutate.html#putting-it-all-together",
    "title": "18  Verbs in depth: New from old data with Mutate",
    "section": "\n18.3 Putting it all together",
    "text": "18.3 Putting it all together\nHere is how you could set a column to with five types of borrowers instead of three. Once you put it together, you have a much more manageable list of five instead of 25 categories:\n\nppp_business_categories &lt;- \n  ppp_category_nonprofit |&gt;\n  mutate (  new_business_type = \n                case_when (  str_like(business_type, \"%non_profit%\") ~ \"Non-profit\",    #1st category\n\n                             business_type %in% \n                               c(\"Independent Contractors\", \n                                \"Sole Proprietorship\", \n                                \"Self-Employed Individuals\", \n                                  \"Single Member LLC\")              ~ \"Individual\",    # 2nd category\n                             \n                             business_type == \"Tribal Concerns\"     ~ \"Tribal concerns\",    #3rd category\n                             \n                             str_detect (business_type, \"LLC|Company|Corporation|Partnership\") ~ \"Companies\",  #4th category\n                             \n                             TRUE ~ \"Other\")         #catchall 5th category\n            )\n\n\n# Now take a look at what you got\n\nppp_business_categories |&gt;\n  count ( new_business_type)\n\n\n\n  \n\n\n\n\n\n\n\n\n\nTip\n\n\n\nThis code chunk uses a function you haven’t seen yet, called str_detect(), which is a powerful way to streamline the conditions. Instead of using str_like(), with its limited wildcards, this is based on regular expressions, which we’ll look at later. But the way it’s used here is to separate words that might be in the description with “|”, for “OR”.\n\n\nSave it for use in another program\nSaving this for future use means you don’t have to worry anymore about some of the missing values, and you can filter and group by the simpler new business type instead of the original. This saves a data file called ppp_edited.RDS in your project folder.\n\nsaveRDS(ppp_business_categories, file=\"ppp_edited.RDS\")"
  },
  {
    "objectID": "r-verb-mutate.html#footnotes",
    "href": "r-verb-mutate.html#footnotes",
    "title": "18  Verbs in depth: New from old data with Mutate",
    "section": "",
    "text": "This will change in future versions, which have a much more intuitive “Other” alternative.↩︎"
  },
  {
    "objectID": "r-verb-groupby.html#summarize-and-group_by-basics",
    "href": "r-verb-groupby.html#summarize-and-group_by-basics",
    "title": "19  Verbs in depth: Aggregating with groups",
    "section": "\n19.1 summarize and group_by basics",
    "text": "19.1 summarize and group_by basics\n\n19.1.1 summarize\n\nsummarize2 computes summary statistics such as the number of rows in a data frame or the sum of dollar values. It removes the original columns completely, and only produces the summary statistics you compute within that statement. Using summarize alone produces a data frame with one row. It’s the equivalent of putting nothing in your pivot table in Excel other than the “Values” area.\nAnother way to think of summarize is that it collapses your list of items (loans, in our example) into a statistical report.\nThe dreaded NA\n\nYou saw in the mutate section that missing values are always a problem. Because they’re unknown, they can’t match anything else, they can’t be considered 0, and they can warp any answers you get. But there’s usually nothing you can do about missing data, so you have to tell the program exactly what to do about them.\nThere are two choices:\n\nLet them infect everything they touch, turning everything into NA. In this scenario, a total of the dollar values in a column would be NA if any of the values in that column is missing:\n\n\nppp_orig |&gt; \n  summarize ( sum(forgiveness_amount))\n\n\n\n  \n\n\n\n\nIgnore them in a computation completely, effectively removing that value from your calculation. Be careful with this - it means that two summary statistics (say,n() and sum()) could be using a different set of rows!\n\nThere’s no right answer, and it depends on what you’re doing. In some cases, you know that they stand for the value 0, and in others you don’t. We will usually ignore them by adding an argument to every summary function that could be infected by them : na.rm = TRUE , which means, “remove NA’s before you do anything.”.\n\n19.1.2 Summary functions\nSome of the common functions you’ll use to summarize are :\n\n\nmean (column_name, na.rm=T) – for an average : Numbers only\n\nsum (column_name, na.rm = T): Numbers only\n\nn() – for “how many”, or “count”. Anything - this counts rows, not values\n\nn_distinct ( column_name) : The number of unique entries in the column. Use it to see how many categories there are in a column.\n\nmedian (column_name, na.rm=T): Numbers only\n\nmin (column_name, na.rm=T): Dates and numbers\n\nmax (column_name , na.rm=T): Dates and numbers\n\nWhen used on the whole data frame, it’s customary to just glimpse the output, since there’s only one row:\n\nppp_orig |&gt; \n  summarize ( n(), \n              mean (amount, na.rm=T), \n              mean (forgiveness_amount, na.rm=T), \n              min (date_approved, na.rm=T), \n              max (date_approved, na.rm= T), \n              n_distinct ( business_type)\n  ) |&gt;\n  glimpse()\n\nRows: 1\nColumns: 6\n$ `n()`                                 &lt;int&gt; 169259\n$ `mean(amount, na.rm = T)`             &lt;dbl&gt; 73206.66\n$ `mean(forgiveness_amount, na.rm = T)` &lt;dbl&gt; 77050.41\n$ `min(date_approved, na.rm = T)`       &lt;date&gt; 2020-04-03\n$ `max(date_approved, na.rm = T)`       &lt;date&gt; 2021-06-29\n$ `n_distinct(business_type)`           &lt;int&gt; 24\n\n\nThis produced a data frame with 1 row and 5 columns. The column names are the same as the formulas that created them, which is difficult to work with. Create new column names using the name (in back-ticks if it’s got spaces or special characters) and assign them the values of the summaries using the = sign:\n\nppp_orig |&gt; \n  summarize ( number_of_rows =  n(), \n              mean_amount = mean (amount, na.rm=T),    \n              median_amount = median (amount, na.rm=T),\n              mean_forgiven = mean (forgiveness_amount, na.rm=T),   # doesn't count the missing as zero!\n              first_loan = min (date_approved, na.rm=T),   \n              last_loan = max (date_approved, na.rm= T), \n              business_type_count = n_distinct(business_type)\n  ) |&gt;\n  glimpse()\n\nRows: 1\nColumns: 7\n$ number_of_rows      &lt;int&gt; 169259\n$ mean_amount         &lt;dbl&gt; 73206.66\n$ median_amount       &lt;dbl&gt; 20800\n$ mean_forgiven       &lt;dbl&gt; 77050.41\n$ first_loan          &lt;date&gt; 2020-04-03\n$ last_loan           &lt;date&gt; 2021-06-29\n$ business_type_count &lt;int&gt; 24\n\n\n\n19.1.3 Grouping\nNow that you know how to summarize the whole data frame, you’ll want to start getting totals by category. This is the same thing as a pivot table – the column names that create the “groups” are the equivalent of the Rows area a spreadsheet pivot table:\n\nGrouping by one column\nIn the PPP data, the “draw” refers to which of the two programs was involved - the original one, or the one passed by Congress in late 2020.\nHere’s how we’d get some key statistics by draw:\n\nppp_orig |&gt;\n  group_by ( draw ) |&gt;\n  summarize ( first_loan = min ( date_approved ), \n              total_amount = sum (amount), \n              total_forgiven = sum (forgiveness_amount, na.rm=T), \n              `# of loans` = n() \n  )\n\n\n\n  \n\n\n\nHere are a couple of things to note about grouped output:\n\nThe only columns saved are the ones that are shown in either the group_by or summarize rows. All of the other original columns have been eliminated. You no longer have them to work with .\n\nThe names of the columns for the summary statistics are the ones defined before the “=” sign in the summarize statement.\nTRAP! Don’t ever name your summary columns the same thing as a group_by column. It will override those names, and your output will be unintelligible.\n\n\n\n\n\n\n\nNaming your columns\n\n\n\nNote that the name of the columns doesn’t always follow our standard. In this case, # of loans has a special character and spaces. In order to create or use it, you must enclose them in back-tics (`) or you’ll get an error.\n\n\n\n\n\n\n\n\nExpand your table to a new window\n\n\n\n\n\nIf you’re using visual mode, the table that gets produced can be really squished. To see more of it, pop it out into its own window using the leftmost button. 3\n\n\n\n\n\n\n\nGrouping by more than one column\nIf you wanted to know the numbers outstanding and forgiven by draw, you could add another column to the group by:\n\nppp_orig |&gt;\n  group_by ( loan_status, draw ) |&gt;\n  summarize ( first_loan = min ( date_approved ), \n              total_amount = sum (amount), \n              total_forgiven = sum (forgiveness_amount, na.rm=T), \n              loan_ct = n() \n  )\n\n\n\n  \n\n\n\nThe summarize verb here has created a data frame that has only the variables you identified in the group_by and summarize commands - everything else has been removed, since it’s a summary of your data.\n\n19.1.4 A shortcut : count()\n\nIf all you want to do is count or add by group, you can use the count() function as a shortcut. It does the exact same thing as a combination of group_by() and summarize( n() ) and arrange()` to get the number of items in each category, sorted by the most frequent to least:\n\nppp_orig |&gt; \n  count ( loan_status, draw, \n          sort=TRUE,\n          name = \"loans\")"
  },
  {
    "objectID": "r-verb-groupby.html#using-and-converting-groups",
    "href": "r-verb-groupby.html#using-and-converting-groups",
    "title": "19  Verbs in depth: Aggregating with groups",
    "section": "\n19.2 Using and converting groups",
    "text": "19.2 Using and converting groups\n\n19.2.1 Converting from long to wide data\nTypically, if you want to just look at your data, you’d want to see one of the columns down the side (rows in pivot tables), and another across the top (columns in pivot tables). Helpfully, a new verb called pivot_wider() does just that – pivots your data from long to wide.\nStart with a simple query with two grouping columns (note that I’ve called the number of loans loan_ct, so it’s easier to work with later on.\n\n\n\n\n\n  \n\n\n\n\nThis is really hard to read. Turn it on its head with pivot_wider():\n\nNormally, you’ll only want to have one summary statistic shown in a rectangle, with one column spread across the top and another column shown in rows. In R, this is done by “pivoting” your tables. There are a lot of advanced options in pivot functions that let you show more than one statistic at a time, and tell R how to name them. There will be a chapter later on that addresses a lot of the problems you have in reading tables, so we’ll put that off for now.\nHere’s an explanation of what the command looks like.\n\n\npivot_wider ( id_cols = *list of columns to keep down the side* , \n                names_from = *the name of the column supplying the headings across the top*, \n                values_from = *the values you want to show in each cell* , \n                values_fill = *what you want to show if it's empty, usually 0 *\n                )\n\n\n\n\n\n\n\nTip\n\n\n\nYour instinct will often be that you want to see your data in this form, but you can and should actually do most of your work without it. This is a core concept of the tidyverse, which is detailed in this chapter’s last section. But even if you don’t look at that part, remember that pivoting to a “wide” format is usually your last step, not one of your first.\n\n\n\n19.2.2 Totals and subtotals\nYou noticed that when you created the summaries, there was no option to create a “percent of total” such as the percent of loans in each draw, or the percent of money that had been forgiven.\nYou can use summary functions outside a summarize statement! This means that you can compute the percent of total, the same way you used an option in pivot tables. This took me a long time to understand, so try to slow down, and just try it a few times! When you look carefully at your output, you’ll start to understand it better.\nThe trick is to summarize, then use mutate to add a column with the percentages made out of totals:\n\nppp_orig |&gt;\n  group_by ( draw) |&gt;\n  summarize ( loan_count = n() ) |&gt;\n  mutate ( all_loans = sum (loan_count), \n           pct_of_total = loan_count / all_loans * 100\n           )\n\n\n\n  \n\n\n\nWhat happens if you have more than one group?\nThis is where the idea of grouped data gets a little confusing. It depends on exactly how you did your summarize statement. But if you use the default mechanism, the “all_loans” is the subtotal. The default behavior is that the “groups” are kept for all but the last column listed in the group_by statement, meaning any summaries you do off of the data will refer to the subtotal.\n\nppp_orig |&gt;\n  group_by ( draw, loan_status) |&gt;\n  summarize ( loan_count = n() ) |&gt;\n  mutate ( loans_in_draw = sum (loan_count),\n           pct_of_draw = loan_count / loans_in_draw * 100)\n\n\n\n  \n\n\n\nHere’s a pretty typical way to do this: Create a subtotal, use it for your percentages, then pivot the percentages:\n\nppp_orig |&gt; \n  group_by ( draw, loan_status) |&gt; \n  summarize ( loan_count = n() ) |&gt; \n  mutate ( loans_in_draw = sum(loan_count), \n           pct_of_draw = loan_count / loans_in_draw * 100 ) |&gt; \n  pivot_wider ( \n    id_cols = c(draw, loans_in_draw), \n    names_from = loan_status, \n    values_from = pct_of_draw,\n    values_fill = 0)\n\n\n\n  \n\n\n\nNow you can easily compare the outcome by draw, by reading across to reach 100% and reading down to compare them.\nWe’ll have a whole chapter / week on making good tables that are readable and understandable. For now, just remember that it’s always possible to turn a data frame on its head, and that you can compute much of what you need BEFORE you do that."
  },
  {
    "objectID": "r-verb-groupby.html#practice",
    "href": "r-verb-groupby.html#practice",
    "title": "19  Verbs in depth: Aggregating with groups",
    "section": "\n19.3 Practice",
    "text": "19.3 Practice\nPutting together the grouping and summarizing, along with the commands you learned last chapter to filter, arrange and display the head() and tail() of a dataset should equip you to write the code for these questions:\n\nWhich lenders provided the most loans?\nWhich lenders provided the most amount of money loaned?\nWhich borrowers got the least amount of money?\nShow the number of loans in each draw that went to the 24 (including NA) types of businesses. To see them all on one screen, add “, rows.print=25” to the heading of the code chunk like this: {r  , rows.print=25}\n\nTry to compute the percent of loans that went to projects in each county in Arizona. This will require first filtering, then grouping."
  },
  {
    "objectID": "r-verb-groupby.html#understanding-grouped-data",
    "href": "r-verb-groupby.html#understanding-grouped-data",
    "title": "19  Verbs in depth: Aggregating with groups",
    "section": "\n19.4 Understanding grouped data",
    "text": "19.4 Understanding grouped data\nYou may have noticed an odd warning after you run the code with multiple grouping columns, for example:\n\n\n`summarise()` has grouped output by 'loan_status'. You can override using the `.groups` argument.\" \n\nWhat does that mean?\nWhen you grouped by loan status and draw, R effectively split up your data frame into five independent and completely divorced piles - one for each combination of draw and loan status that it found. It processed them one by one to create the output data frame that was printed out.\nAfter it’s done summarizing your data, R doesn’t know what you want to do with the piles – keep them, or put everything back together again.\nBy default, after you group by more than one column, it maintains the separate piles for all but the last group in your list under group_by – in this case the loan_status. Here, everything you do after this will work on three piles separately.The message tells you what it did with the piles, and how to change that behavior.\nThe documentation of grouped data provides details of how each of the tidyverse’s verbs handle grouped data.\nHere’s what a “glimpse()” looks like for a data frame that has retained some groups:\n\nppp_orig |&gt; \n  select ( loan_status, date_approved:amount) |&gt; \n  group_by ( loan_status) |&gt; glimpse()\n\nRows: 169,259\nColumns: 11\nGroups: loan_status [3]\n$ loan_status      &lt;chr&gt; \"Paid in Full\", \"Paid in Full\", \"Paid in Full\", \"Paid…\n$ date_approved    &lt;date&gt; 2020-04-10, 2020-04-11, 2020-04-11, 2020-04-29, 2020…\n$ draw             &lt;chr&gt; \"First\", \"First\", \"First\", \"First\", \"First\", \"First\",…\n$ borrower_name    &lt;chr&gt; \"SFE HOLDINGS LLC\", \"NAVAJO TRIBAL UTILITY AUTHORITY\"…\n$ borrower_address &lt;chr&gt; \"9366 East Raintree Drive\", \"Po Box 170\", \"2999 N44th…\n$ borrower_city    &lt;chr&gt; \"Scottsdale\", \"Fort Defiance\", \"Phoenix\", \"Tucson\", \"…\n$ borrower_state   &lt;chr&gt; \"AZ\", \"AZ\", \"AZ\", \"AZ\", \"AZ\", \"AZ\", \"AZ\", \"AZ\", \"AZ\",…\n$ borrower_zip     &lt;chr&gt; \"85260\", \"86504\", \"85018\", \"85711\", \"85250\", \"85012\",…\n$ franchise_name   &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ loan_status_date &lt;date&gt; 2021-08-17, 2022-02-05, 2021-09-25, 2021-08-21, 2021…\n$ amount           &lt;dbl&gt; 10000000, 10000000, 10000000, 10000000, 10000000, 100…\n\n\nNotice the “Groups” row at the top – that tells you it’s got three piles, defined by the loan_status column.\nGetting rid of the message\nYou can do three things to get rid of the message. I suggest the first of these, since it makes you explicitly decide what to do each time, depending on your goal:\n\nAdd a .groups=... argument that looks like this at the end of the summarize statement. This example tells R to do what it does by default, with no warning:\n\n\nppp_orig |&gt;\n  group_by ( loan_status, draw ) |&gt;\n  summarize ( `# of loans` = n() , \n              .groups = \"drop_last\"\n  )\n\n\n\n  \n\n\n\nThe other possibilities are : .groups=\"drop\" and \".groups=\"keep\" (Note the period before the word “groups”. I have no idea why, but sometimes options are indicated this way.)\n\nSuppress all messages either for the whole document or for the code chunk. Here’s what your YAML would look like if you added message: false to it. (This has the benefit of suppressing a lot of other annoying messages that you might not care about as well):\n\n\n\ntitle: \"YOUR TITLE - CHANGE THIS\"\nauthor: \"YOUR NAME - CHANGE THIS\"\nformat:\n  html:\n    toc: true\n    code-tools: true\n    embed-resources: true\n    df-print: paged\n    page-layout: full\nexecute: \n  message: false\n\n\n\nAdd a line to your setup chunk, changing the default behavior through the systemwide options:\noptions(dplyr.summarise.inform = FALSE)\n\n\n19.4.1 Tidy data and “long” vs. “wide” use in groups\n\nLike families, tidy datasets are all alike but every messy dataset is messy in its own way.\n– Hadley Wickham, with apologies to Leo Tolstoy\n\nThe concept of tidy data was outlined by Hadley Wickham in a seminal paper nearly a decade ago, which defined a specific way of organizing data values within a dataset. .Wickham argues that by following the principle, you know how you would LIKE your data to be organized, and don’t have to figure it out every time you encounter a new dataset. But a lot of people have trouble internalizing the concepts of tidy data. Once you do, everything else we’re doing in this book makes more sense.\n\nEach column is a “variable”, in that it defines a single attribute, such as height, weight, or zip code.\nEach row an “observation”, which contains all values of the variables measured on the same unit (say, person)\nEach “value” (usually number, text or date) belongs to a variable and an observation – it lies in the intersection of the two, and is seen in a cell.\nEach dataset, or spreadsheet, or data frame, refers to a different type of unit. There would be one for people, another for traffic tickets and a third for vehicles. These are the nouns that we’ve talked so much about.\n\nOur PPP data starts in tidy form, but we converted it to un-tidy data by pivoting it.\nReal world non-tidy data\nWickham laid out several ways that we see data when it’s not tidy. The three most common are:\n\nColumn headings are values, not variables. When a column heading shows each year, it is showing the value of the year variable, not something separate. This happens most of the time when you obtain data that is intended for publication, not analysis.\nMultiple variables are stored in one column. This can be taken too far, but you have to decide what the important level of detail is: Full name, or first name and last name? It can also come in data like the Census Bureau, where a value might represent both an age and a gender. (Male, 25-54 years old )\nRows might contain different levels of detail. This also comes from getting printouts rather than original datasets, where subtotals and totals are shown in rows, not in a separate table. We have talked about the noun represented by each row – it should always be the same, so students and schools shouldn’t be in the same table; schools and school districts should be separated.\nWhat does this have to do with grouped data?\nGrouped data effectively breaks out values of categories and treats them independently, which is the equivalent of temporarily treating them as their own column.\nIt’s somewhat difficult in the tidyverse to summarize across columns – it really wants to summarize rows. In a spreadsheet, it’s just as easy to write an =sum(B1:J1) as it is =sum(B1:B12). But the tidyverse is only expecting you do to the second version (rows B1:b12), not the first. The reason is that it would make no sense to sum truly different variables (like adding up income and house price)!\nIt means that in our R journey so far, grouped data is the first place you would have encountered situations in which your instinct is to wreck a perfectly good dataset.\nWe’ll come back to all of that, but just remember that it’s possible to do all kinds of computations within a group that you’d normally think you want to do across columns. One example is, say, the change in COVID cases by county. Computing monthly percent changes would look something like this using the lag() function to get the previous row. This assumes the “tidy” data looks something like this:\n\n\nstate\ncounty\nmonth\ncases\n\n\n\nAL\nAuburn\n2020-04-01\n24\n\n\nAL\nAuburn\n2020-05-01\n35\n\n\nAL\nAuburn\n2020-06-01\n200\n\n\n\ncovid_data |&gt;\n  group_by (state, county) |&gt; \n  arrange (month) |&gt; \n  mutate ( change = cases - lag(cases) , \n           pct_change = change / lag(cases) * 100 ) \nThis method will start over for each county, so it will be NA for the first month within each county.\n(Your instinct may have been to pivot the data to show each month in its own column, then compute the percent change on each of those columns – something that could get really old really quickly. )\nThis is just one example of how grouped data is quite powerful when used correctly. There are many others, such as extracting the most recent event in a court history by case. Try to think about how one group would be computed, and then don’t worry how the rest will work – R will do that thinking for you."
  },
  {
    "objectID": "r-verb-groupby.html#footnotes",
    "href": "r-verb-groupby.html#footnotes",
    "title": "19  Verbs in depth: Aggregating with groups",
    "section": "",
    "text": "Beginning in February 2023, there is a new version of summarize that eliminates the need to group the data first. We’re not using that version, and I don’t want to confuse you, so I’m ignoring it. Future versions of this chapter will try to explain it.↩︎\nA synonym for the British spelling summarise, which you’ll see in a lot of examples↩︎\nThis only works if you have df-print: paged in your front matter (YAML between three dashes at the top↩︎"
  },
  {
    "objectID": "r-verb-join.html#join-basics-and-relational-databases",
    "href": "r-verb-join.html#join-basics-and-relational-databases",
    "title": "20  Verbs in depth: Matchmaking with joins",
    "section": "\n20.1 Join basics and relational databases",
    "text": "20.1 Join basics and relational databases\nHere is a great explainer on joins made by a previous MAIJ student, Andy Blye. Be sure to watch it:\n\njoining in computer programming matches columns in one table to another, where the values within one or more columns match exactly. Here’s an example from Jenny Bryan’s Stat 545 course textbook:\n\n\n\nsuperheroes\n\n\n\n20.1.1 Relational databases\nMost large data systems created since the 1980s are called “relational databases”, which means that each unit (person, ticket, vehicle) is stored in a different table2, and common columns link them together. They also routinely use codes or shorthand to store data, and provide another table to “look up” the details.\nFor example, your student ID is stored in one place in the university system with your name, address, email address, etc. When you sign up for courses, the database looks up that information to attach to your schedule. You only have to change it in one place, and it is automatically sent out through all of the interactions you have with the university.\nSimilarly, the course number, section and term is all that needs to be stored in the system for any semester. Those data points then populate the name of the course, the students registered for it, and holidays.\nThe system is created this way because it’s more efficient and reliable. Important information is stored only once, and can then be applied to millions of rows.\nExamples of relational databases include:\n\nCampaign finance systems, where donors are stored in one table and candidates in another, linked through a candidate or political action committee id.\nInspection records, such as those for restaurants, hospitals, housing code violations and workplace safety, which typically have at least three tables: The establishment (like a restaurant or a workplace), an inspection (an event on a date), and a violation (something that they found). Each table has its own ID, which is used whenever they are linked together.\nA court docket data system, which usually has many types of rows: A master case table links to information on charges, defendants, lawyers, sentences and court hearings.\n\nThis conforms to the tidy data principles that you examined in the last chapter.\nUsually, you will have what is known as a “1-to-many” join. That is, there are many instances of a value in one table’s column, but just one instance of it in the lookup or related table. The superheroes example above is one of those instances: There are many entries for DC comics in the superhero table, but just one in the publisher table.\nIf this isn’t true, you will have what is known as “many-to-many” joins, which is, in layman’s terms, a bowl of tangled spaghetti. Each match will be duplicated the number of times it is in the related table. Experts call this a cartesian join, and it’s usually bad.\n\n20.1.2 join syntax\n\n\n\n\n\n\nTip\n\n\n\nThere are actually pretty good explanations of the concept of joining and the variations of it in R in the documentation.\n\n\nThere are several kinds of joins, but the syntax is similar across them.\n  old_table |&gt;\n     inner_join (new_table , \n     join_by = (name of old_table column == name of new_table column) )\n     \n\n\n\n\n\n\nTip\n\n\n\nTry to piece together what this is saying, similar to the filter conditions: If the two columns are equal (double-equal signs), put them together.\n\n\nTypes of joins\n\nAn inner_join means that the value(s) in the common columns must match in BOTH tables – it will eliminate any row without a match\nA left_join or right_join keeps everything from one table, and only the information that matches from the other. Those columns will contain NA wherever the match fails.\nA full_join puts together both tables no matter whether there is any match. It’s pretty rare to use this.\n\n\n\n\n\n\n\nTip\n\n\n\nThe new version of the join verb has a lot of new capabilities, including “fuzzy joins”, which let you get answers when they are almost the same. For now, we’re sticking with the standard way joins work across programming languages, but will come back to fuzzy matching later."
  },
  {
    "objectID": "r-verb-join.html#matchmaking-with-joins",
    "href": "r-verb-join.html#matchmaking-with-joins",
    "title": "20  Verbs in depth: Matchmaking with joins",
    "section": "\n20.2 Matchmaking with joins",
    "text": "20.2 Matchmaking with joins\nAttaching characteristics to a dataset\nYou’ll often want to learn more about a geographic area’s demographics, voting habits or other characteristics, and match it to other data. Sometimes it’s simple: Find the demographics of counties that switched from Trump to Biden as a way to isolate places you might want to visit. Another example from voting might be to find the precinct that has the highest percentage of Latino citizens in the county, then match that precinct against the voter registration rolls to get a list of people you might want to interview on election day. In these instances, the join is used as a filter, but it comes from a different table. .\nThis is also common when you have data by zip code or some other geography, and you want to find clusters of interesting potential stories, such as PPP loans in minority neighborhoods.\nSummarize data against another dataset\nThe previous examples all result in lists of potential story people or places. If you use join on summarized data, you can characterize a broad range of activity across new columns. Simplified, this is how you can write that more PPP money went to predominantly white neighborhoods than those that were majority Black.\n“Enterprise” joins\nInvestigative reporters often use joins in ways unintended by the data creators. In the 1990s, they dubbed these “enterprise” joins, referring to the enterprising reporters who thought of them. In these instances, reporters combine data sets in ways that find needles in haystacks, such as:\n\nSchool bus drivers who have had tickets for driving while intoxicated.\nDay care center operators who are listed on the sex offender registry.\nDonors to a governor who got contracts from the state\n\nWhen you match these kinds of datasets, you will always have mistakes — some apparent matches are incorrect in the real world; some matches that should exist are ignored because of variations in names or other details. You always have to report out any suspected matches, so they are time consuming stories.\nIn the mid-2000s, when some politicians insisted that dead people were voting and proposed measures to restrict voting, almost every regional news organization sent reporters on futile hunts for the dead voters. They got lists of people on the voter rolls, then lists of people who had died through the Social Security Death Index or local death certificates. I never met anyone who found a single actual dead voter, but months of reporter-hours were spent tracking down each lead. Instead, they were people who had not yet been eliminated on the rolls but never voted. In others, they were people with the same names who had nothing to do with the dead person. In still others, they were the same people, but very much alive!\nIt’s very common for two people to have the same name in a city. In fact, it’s common to have two people at the same home with the same name – they’ve just left off “Jr.” and “Sr.” in the database. In this case, you’ll find matches that you shouldn’t. These are false positives, or Type I errors in statistics.\nWe rarely get dates of birth or Social Security Numbers in public records, so we have to join by name and sometimes location. If someone has moved, sometimes uses a nickname, or the government has recorded the spelling incorrectly, the join will fail – you’ll miss some of the possible matches. This is very common with company names, which can change with mergers and other changes in management, and can be listed in many different ways.\nThese are false negatives, or Type II errors in statistics.3\nIn different contexts, you’ll want to minimize different kinds of errors. For example, if you are looking for something extremely rare, and you want to examine every possible case – like a child sex offender working in a day care center – you might choose to make a “loose” match and get lots of false positives, which you can check. If you want to limit your reporting only to the most promising leads, you’ll be willing to live with missing some cases in order to be more sure of the joins you find.\nYou’ll see stories of this kind write around the lack of precision – they’ll often say, “we verified x cases of….” rather than pretend that they know of them all."
  },
  {
    "objectID": "r-verb-join.html#using-lookup-tables-ppp-industry-codes",
    "href": "r-verb-join.html#using-lookup-tables-ppp-industry-codes",
    "title": "20  Verbs in depth: Matchmaking with joins",
    "section": "\n20.3 Using lookup tables: PPP industry codes",
    "text": "20.3 Using lookup tables: PPP industry codes\nThe PPP data has a code called the naics_code, which is an industry coding system created by the Census to categorize all economic activity.\nWe’ll use a table that contains the list of industries and match it to the PPP data. (The lookup table was derived from the concordance package in R, but is fully explained at the Census website.)\n\nOnce you load these data frames, be sure to explore them a little to make sure you understand what they contain.\n\nThe following code chunk loads both the original PPP data and the code table:\n\nnaics_codes &lt;- readRDS( url ( \"https://cronkitedata.s3.amazonaws.com/rdata/naics_lookup.RDS\"))\nppp_orig &lt;- readRDS (url ( \"https://cronkitedata.s3.amazonaws.com/rdata/ppp_az_loans.RDS\"))\n\nglimpse(naics_codes)\n\nRows: 1,043\nColumns: 6\n$ naics_code     &lt;chr&gt; \"111110\", \"111120\", \"111130\", \"111140\", \"111150\", \"1111…\n$ sector_code    &lt;chr&gt; \"11\", \"11\", \"11\", \"11\", \"11\", \"11\", \"11\", \"11\", \"11\", \"…\n$ subsector_code &lt;chr&gt; \"111\", \"111\", \"111\", \"111\", \"111\", \"111\", \"111\", \"111\",…\n$ sector_desc    &lt;chr&gt; \"Agriculture, Forestry, Fishing and Hunting\", \"Agricult…\n$ subsector_desc &lt;chr&gt; \"Crop Production\", \"Crop Production\", \"Crop Production\"…\n$ naics_desc     &lt;chr&gt; \"Soybean Farming\", \"Oilseed (except Soybean) Farming\", …\n\n\nNotice that the industry code is 7 characters long, and has a detailed description. There are also “sector” and “subsector” codes, which use only the beginning of the code, and link to more general descriptions.\n\n20.3.1 Attaching words to codes\nIn this example, we’ll take a small set of columns from the original table, and show how it links to the lookup table:\n\nppp_orig |&gt; \n  select ( borrower_name, amount, naics_code) |&gt; \n  inner_join ( naics_codes, \n               join_by (naics_code == naics_code) \n  ) |&gt; \n  glimpse()\n\nRows: 169,259\nColumns: 8\n$ borrower_name  &lt;chr&gt; \"SFE HOLDINGS LLC\", \"NAVAJO TRIBAL UTILITY AUTHORITY\", …\n$ amount         &lt;dbl&gt; 10000000, 10000000, 10000000, 10000000, 10000000, 10000…\n$ naics_code     &lt;chr&gt; \"722310\", \"221122\", \"621610\", \"621111\", \"517311\", \"6211…\n$ sector_code    &lt;chr&gt; \"72\", \"22\", \"62\", \"62\", \"51\", \"62\", \"56\", \"62\", \"48\", \"…\n$ subsector_code &lt;chr&gt; \"722\", \"221\", \"621\", \"621\", \"517\", \"621\", \"561\", \"621\",…\n$ sector_desc    &lt;chr&gt; \"Accommodation and Food Services\", \"Utilities\", \"Health…\n$ subsector_desc &lt;chr&gt; \"Food Services and Drinking Places\", \"Utilities\", \"Ambu…\n$ naics_desc     &lt;chr&gt; \"Food Service Contractors\", \"Electric Power Distributio…"
  },
  {
    "objectID": "r-verb-join.html#joining-risks",
    "href": "r-verb-join.html#joining-risks",
    "title": "20  Verbs in depth: Matchmaking with joins",
    "section": "\n20.4 Joining risks",
    "text": "20.4 Joining risks\n\n20.4.1 joining tl;dr\nThere are lots of risks in joining tables that you created yourself, or that were created outside a big relational database system. Keep an eye on the number of rows returned every time that you join – you should know what to expect.\n\n20.4.2 Double counting with joins\nWe won’t go into this in depth, but just be aware it’s easy to double-count rows when you join. Here’s a made-up example, in which a zip code is on the border and is in two counties:\nSay you want to use some data on zip codes :\n\n\nzip code\ncounty\ninfo\n\n\n\n85232\nMaricopa\nsome data\n\n\n85232\nPinal\nsome more data\n\n\n\nand match it to a list of restaurants in a zip code:\n\n\nzip code\nrestaurant name\n\n\n\n85232\nMy favorite restaurant\n\n\n85232\nMy second-favorite restaurant\n\n\n\nWhen you match these, you’ll get 4 rows:\n\n\nzip code\ncounty\ninfo\nrestaurant name\n\n\n\n85232\nMaricopa\nsome data\nMy favorite restaurant\n\n\n85232\nPinal\nsome more data\nMy favorite restaurant\n\n\n85232\nMaricopa\nsome data\nMy second-favorite restaurant\n\n\n85232\nPinal\nsome more data\nMy second-favority restaurant\n\n\n\nNow, every time you try to count restaurants, these two will be double-counted.\nIn computing, this is called a “many-to-many” relationship – there are many rows of zip codes and many rows of restaurants. In journalism, we call it spaghetti. It’s usually an unintended mess.\n\n20.4.3 Losing rows with joins\nThe opposite can occur if you aren’t careful and there are items you want to keep that are missing in your reference table. If there were invalid NAICS codes in the original data, they would have been eliminated from the resulting joined table."
  },
  {
    "objectID": "r-verb-join.html#congratulate-yourself",
    "href": "r-verb-join.html#congratulate-yourself",
    "title": "20  Verbs in depth: Matchmaking with joins",
    "section": "\n20.5 Congratulate yourself",
    "text": "20.5 Congratulate yourself\n\n\nCongratulations! This is the last key verb that you need to understand to address most stories. Your palette now has all of the primary colors!"
  },
  {
    "objectID": "r-verb-join.html#resources",
    "href": "r-verb-join.html#resources",
    "title": "20  Verbs in depth: Matchmaking with joins",
    "section": "\n20.6 Resources",
    "text": "20.6 Resources\n\nThe “Relational data” chapter in the R for Data Science textbook has details on exactly how a complex data set might fit together.\nAn example using a superheroes dataset, from Stat 545 at the University of British Columbia"
  },
  {
    "objectID": "r-verb-join.html#footnotes",
    "href": "r-verb-join.html#footnotes",
    "title": "20  Verbs in depth: Matchmaking with joins",
    "section": "",
    "text": "I ask for “code sheets, lookup tables, or any other material needed to interpret the data.”↩︎\nanother name for a data frame↩︎\n I remember them by thinking of the boy who cried wolf. When the village came running and there was no wolf, it was a Type I error, or false positive ; when the village ignored the boy and there was a wolf, it was a Type II error, or false negative.↩︎"
  },
  {
    "objectID": "r-recipes.html#re-using-answers-from-a-previous-step",
    "href": "r-recipes.html#re-using-answers-from-a-previous-step",
    "title": "21  Recipes",
    "section": "\n21.1 Re-using answers from a previous step",
    "text": "21.1 Re-using answers from a previous step\nAssign your code chunk to a new variable in the environment to use it again later. This is usefule when:\n\nYou have a complex filter that you want to apply to future steps.\nYou are joining data frames with columns having the same names: select just the columns you need and re-name any of the ones that are the same, except for the join one.\nYou have fixed some column types or adjusted their values.\n\nThe assignment operator is &lt;-, which means “pour the answer into this variable name”\nThese can all go into one code chunk if you’d like:\n\nselect_ppp &lt;- \n  ppp_orig |&gt;\n  filter ( project_state == \"AZ\" & !is.na (project_county) ) |&gt;\n  mutate ( forgiveness_amount = if_else (is.na(forgiveness_amount),\n                                         0, \n                                         forgiveness_amount)) |&gt;\n  select ( borrower_name, borrower_city, \n           naics_code, \n           amount, forgiveness_amount,\n           date_approved, forgiveness_date)\n\n\n\nsectors &lt;- \n  naics_codes |&gt;\n  select ( naics_code, sector_code, sector_desc)\n\n\nselect_ppp |&gt;\n  left_join ( sectors, by=\"naics_code\")  |&gt;\n  select ( borrower_name, forgiveness_amount, sector_desc) |&gt;\n  head(5)"
  },
  {
    "objectID": "r-recipes.html#importing-reading-data",
    "href": "r-recipes.html#importing-reading-data",
    "title": "21  Recipes",
    "section": "\n21.2 Importing / reading data",
    "text": "21.2 Importing / reading data\n\nIf you are referring to a file on your computer or on the web, then it must be in quotes.\nUse the proper library and function to read the data.\nCheck the output for proper treatment of text, dates and numbers, especially with Excel and text imports\n\nReading R files\nTwo types of data files: RDS files contain one data frame, which you have to assign to a new object. Rda files have multiple objects that are already named. Use readRDS ( url ( ....) ) to read data stored on the internet instead of in your project.\nmydata &lt;- readRDS ( \"mydata_file.RDS\")\nload ( \"mydata_file.Rda\")\n\nReading text (csv) files\nUse read_csv(), read_tsv(), read_delimited() and various fixed file formats. Match the type of your file with the proper function. These require that the tidyverse or readr libraries are already loaded.\nReading Excel files\nlibrary (readxl)          # put this with the rest of your libraries.\nmydata &lt;- read_excel(\"mydata_file.xlsx\", \n                      sheet = \"sheet_name\")  \nThere is no url() option for reading Excel files. They must be stored in your project. One approach is to download the file in your code:\ndownload.file ( \"https://address-of-file.xlsx\", \"myfilename.xlsx\")\nmydata &lt;- read_excel (\"myfilename.xlsx\")\nImport options\nThere are options in most of the importing functions that tell you how to treat each column and let you rename at the same time. One approach is :\nread_csv ( \"mydata_file.csv\", \n           coltypes = col(.default = \"c\")\n           )\n           \nTo keep everything as text, which you can convert later."
  },
  {
    "objectID": "r-recipes.html#filtering",
    "href": "r-recipes.html#filtering",
    "title": "21  Recipes",
    "section": "\n21.3 Filtering",
    "text": "21.3 Filtering\n\nOne condition that’s a number :\n\n  filter ( amount &gt; 1000 )\n\nA number between two values\n\n  filter ( between ( amount, 0, 1000))\n\nAn exact phrase or word\n\n  filter ( project_county == \"MARICOPA\")\n\nOne of several possible entries in one column (exactly)\n\n    filter ( project_county %in% c(\"MARICOPA\", \"PIMA\", \"PINAL\" ))\n\nEverything except missing values\n\n    filter ( ! is.na (project_county) )\n\nBetween two dates . Be sure it’s really a date in the data by glimpsing your data frame. If not, turn it into a date first.\n\n    filter ( approval_date &gt;= \"2021-01-24\" & \n           approval_date &lt;= \"2021-01-31\")\n\nPhrases, words or letters at the beginning of a column\n\n    filter ( str_like (borrower_type , \"Non-Profit%\"))\n\nPhrases, letters or words at the end of a column\n\n    filter ( str_like  (borrower_type, \"Corporation%\"))\nAll of these examples can be used in a mutate statement to create flags or new values if the conditions are met."
  },
  {
    "objectID": "r-recipes.html#aggregate-count-sum-rows-by-category",
    "href": "r-recipes.html#aggregate-count-sum-rows-by-category",
    "title": "21  Recipes",
    "section": "\n21.4 Aggregate (count, sum rows by category)",
    "text": "21.4 Aggregate (count, sum rows by category)\n\nCounting (How many?)\n\n    group_by (project_county) |&gt;\n    summarize (loans = n() )  |&gt;\n    arrange ( desc ( loans ))\nMake sure you don’t name the new column containing the count the same thing as a group_by() column.\n\nShortcut for counting:\n\n     count( project_county, sort=TRUE, name=\"loans\")\n\nCounting unique entries\n\nSometimes you want to know how many items of a type, not how many rows, are included in a category.\n        group_by ( project_county) |&gt;\n        summarize ( number_of_loans = n(), \n                    number_of_industries = n_distinct ( naics_code )\n                    )\n\nSumming (how much?)\n\n    group_by (project_county) |&gt;\n    summarize ( total_amount = sum (amount, na.rm=T))\n\nShortcut for summing:\n\n    count ( project_county, weight=amount, name=\"total_amount\")"
  },
  {
    "objectID": "r-recipes.html#recoding-categories",
    "href": "r-recipes.html#recoding-categories",
    "title": "21  Recipes",
    "section": "\n21.5 Recoding categories",
    "text": "21.5 Recoding categories\nYou’ll often want fewer categories, or numbers in categories, that you want to use instead of the original values. This is done in a mutate statement. Don’t forget to save the output to a new data frame (&lt;-), or you won’t have access to it later on.\n\nCreate yes-no categories . This is really “Yes”, “No” or NA, where there is an NA to begin with.\n\n\n    mutate ( corp_yn = if_else  \n                      (str_detect (borrower_type, \n                                   \"Corporation\"), \n                       \"Yes\", \n                       \"No\")\n       )\n\n\nRecode into more than two categories using case_when()\n\n\nThis example introduces str_detect(), which uses regular expressions. We’ll go over that later in the book.\n  mutate (  new_business_type = \n                case_when (  str_like(business_type, \"%non_profit%\") ~ \"Non-profit\",    #1st category\n\n                             business_type %in% \n                               c(\"Independent Contractors\", \n                                \"Sole Proprietorship\", \n                                \"Self-Employed Individuals\", \n                                  \"Single Member LLC\")              ~ \"Individual\",    # 2nd category\n                             \n                             business_type == \"Tribal Concerns\"     ~ \"Tribal concerns\",    #3rd category\n                             \n                             str_detect (business_type, \"LLC|Company|Corporation|Partnership\") ~ \"Companies\",  #4th category\n                             \n                             TRUE ~ \"Other\")         #catchall 5th category\n            )\n\nRecode numbers into categories\n\nIt’s often useful to give them numeric codes in front so they sort properly:\n\n        mutate ( new_type = \n                 case_when  (\n                    amount &lt;= 1000 ~ \"00-Very low\", \n                    amount &lt;= 10000  ~ \"01-Low\", \n                    amount &lt;= 100000 ~ \"03-Medium\", \n                    amount &gt; 100000 ~ \"04-High\")\n              )\n\nThis works because the first one that it finds will be used, so a value of exactly 1,000 would be “Very low”, but a value of 1,001 would be “Low”."
  },
  {
    "objectID": "r-recipes.html#working-with-grouped-data-for-subtotals-changes-percents",
    "href": "r-recipes.html#working-with-grouped-data-for-subtotals-changes-percents",
    "title": "21  Recipes",
    "section": "\n21.6 Working with grouped data for subtotals, changes, percents",
    "text": "21.6 Working with grouped data for subtotals, changes, percents\n\nPercent of total by group\n\n  group_by ( project_county, sector_desc ) |&gt;\n  summarize ( loans = n() , .groups=\"drop_last\") |&gt;\n  mutate ( pct_in_county = loans / sum(loans))\n\nDisplay results as in spreadsheet form\n\nTo see the items across the top, use pivot_wider.\n  group_by ( project_county, new_type) |&gt;\n  summarize ( loan_count = n() ) |&gt;\n  pivot_wider ( names_from = new_type, \n                id_cols = c( project_county), \n                values_from = loan_count)\nYou can add an argument after values_from if you know that any missing values are zero, by using values_fill=0\nYou usually only choose one column to show down the side, one column to spread across the top, and one column to display the value.\n\n\nComplex example: Get the change by year within each county.\nannual_ppp &lt;- mutate ( approve_year = year (approval_date ) ) |&gt; group_by ( project_county, approve_year) |&gt; summarize ( loans = n() , amount = sum( amount, na.rm=T), .groups=“drop_last”)\n\n\nNext, compare them within groups. New functions introduced: complete(), which fills in missing information in a sequence. For example, if there were missing years by county, it would create a row to fill it in. lag() refers to the previous item in a group. First, make a new, summarized data frame with just the columns you nee\n    complete ( project_county, approve_year, \n              fill= list (amount=0, loans =0) )|&gt;\n    mutate ( change_loans = loans - lag(loans), \n             pct_change_loans = change_loans / lag(loans) * 100) \n\n\nPick out the last item in a group, with all of its columns. New verb introduced : slice_tail() . This is particularly useful for chronological events, such as the last thing that happened in a court case, or the most recent complaint against a police officer. This example isn’t a great one, but it gets you the name and other details of the most recent loan for each lender\narrange ( lender, date_approved) |&gt;\ngroup_by ( lender) |&gt;\nslice_tail(n=1)\n\n\nNOTE: Don’t use slice_max(), because it will give you back multiple rows in the event of ties."
  },
  {
    "objectID": "r-recipes.html#joining-tables",
    "href": "r-recipes.html#joining-tables",
    "title": "21  Recipes",
    "section": "\n21.7 Joining tables",
    "text": "21.7 Joining tables\nNew options in the dplyr library that contains the join verb let us use the same operators in joining that you use in filtering: ==, &lt;=, etc. Usually you will use the “==” operator. Requires dplyr 1.1, which was released in February 2023.\nppp_orig |&gt; \n  select ( borrower_name, amount, naics_code) |&gt; \n  inner_join ( naics_codes, \n               join_by (naics_code == naics_code) \n  )"
  },
  {
    "objectID": "r-recipes.html#quarto-document-tips",
    "href": "r-recipes.html#quarto-document-tips",
    "title": "21  Recipes",
    "section": "\n21.8 Quarto document tips",
    "text": "21.8 Quarto document tips\nYAML (front matter)\nThe YAML is very picky about exact casing, spacing and other details. If you try to render and you get a YAML error, it is likely at the top.\nTypical YAML front matter that goes within the three dashes beginning on the very first line:\n\ntitle: \"Name of document\"\nauthor: \"Your name\"\noutput: \n  html: \n    theme: cosmo\n    code-tools: true\n    embed-resources: true\n    toc: true\nexecute: \n   warning: true\n   error: true\nCode chunk options\nThese must be the very first rows in your code chunk, and must start in the first position, with spacing as shown. Use #| label: setup in the first code chunk to run it automatically every time you start up R.\nNothing runs; everything is gray\nYou probably erased the last three back-ticks at the end of the code chunk. You may need to restart R to get it re-set."
  },
  {
    "objectID": "vis.html#in-this-section",
    "href": "vis.html#in-this-section",
    "title": "Visualization",
    "section": "In this section",
    "text": "In this section\nThe following chapters review ways of looking at your data while reporting. We’re leaving publication quality graphic alone – those often depend on using sites like Datawrapper or D3 in Javascript to get high-performance visualizations, while static graphics often depend on using Adobe products to make typography and palettes acceptable to your publication.\nThis chapter is done in R, mainly using the package ggplot2, which is part of the tidyverse. If you want to follow along with with interactive aspects, you’ll want to install the plotly package. There may be others noted in individual sections."
  },
  {
    "objectID": "vis.html#package-installations",
    "href": "vis.html#package-installations",
    "title": "Visualization",
    "section": "Package installations",
    "text": "Package installations\nThere are some packages we’ll use that are not standard for the rest of the book. They are shown in the relevant chapters, but here is a full list:\n\nreacatable and DT for good-looking interactive reports\ngt and gtsummary for static tables\nsf and several others for geographic analysis\nleaflet and plotly for interactive graphics and maps."
  },
  {
    "objectID": "vis.html#visualization-tools",
    "href": "vis.html#visualization-tools",
    "title": "Visualization",
    "section": "Visualization tools",
    "text": "Visualization tools\nYou can use a lot of different types of online and free applications to play around with graphics instead of R. They’re less reproducible, and they often come and go as free options, but they’re sometimes easier:\n\nDatawrapper.de , which is used in a lot of newsrooms. If you want to publish a visualization, it can link directly from R. It’s also easy to use on its own. If you want to eventually publish your visualizations, this is probably the one that is most compatible with newsrooms.\nFlourish (recently purchased by Canva, so who knows? But you can now create private visualizations without paying. )\nRAWGraphs, made for designers to sketch their work before digging deep into Adobe Illustrator. It’s a little hard to use unless your data is in just the right form.\nTableau Public, made mainly for business intelligence, but a free version is available. I haven’t used it for a while for a few reasons: Newsrooms don’t use it much because it doesn’t scale well to mobile; it’s hard to save drafts in the free version; it’s a little hard to get used to the interface for a quick visualization.\nThe underlying D3 language of graphics, which is written in Javascript, is what powers a lot of these products. It’s what the professional visual storyteller use. (Aside: javascript is probably the second language you’d want to learn. It helps with scraping and is used extensively newsrooms because it’s the language of the web and mobile, so there are people to help you. But it’s not easy.)"
  },
  {
    "objectID": "vis-reporting.html#examples",
    "href": "vis-reporting.html#examples",
    "title": "22  Visualization as a reporting tool",
    "section": "22.1 Examples",
    "text": "22.1 Examples\n\n\n\nSize and growth at once\nThis graphic was used for less than five minutes, but helped us see that there was one company that would be a good candidate for further reporting. The details are unimportant, but it showed that this company began quite small and grew quite quickly — the characteristic we were seeking. The others were not as strong candidates.\n\n\n\n\n\n\n\n\nReviewing two data points in a long list\n\n\n\nThis graphic shows the difference between the percent of businesses that got PPP loans in majority Latino zip codes compared to majority white non-Hispanic, based on four different measures. We used it at Reveal to identify places that might be the right place for a story – those where, across a series of measures, the difference was noticable, and the number of loans was large enough to warrant investigating. The team decided to center the story in Los Angeles, though it also reported on Dallas.\n\n\n\nText with graphics\nLooking at a table of numbers is mind-numbing. It’s hard to pick out what’s important. Some of the most imaginative visualizations come in the form of tables. In fact, there’s even a contest among R users to build the best tables. 1\nOne simple example is this analysis of federal prosecutions of gun charges over three administrations. We were curious: which statutes are the ones that Joe Biden is prioritizing compared with previous administrations? And was there a major downturn in prosecutions during the pandemic? These “sparklines” on the data table help show the trends, even when the numbers themselves are very different:\n\n\n\nNetworks of companies, people or programs\nThis is an example of a network analysis of Medicare charges among nephrologists – kidney doctors. We had heard that one consultant was showing doctors how to do procedures in their offices that were traditionally done in hospitals. The procedures had unusually high billing rates in doctors’ offices, but very low ones in hospital settings. These networks looked at the similarity across doctors’ practices by comparing the proportions of billing codes, then clustering them when they matched about 75 percent of the time. The area of red, large circles on the right turned out to be the same consulting practice. Sadly, the reporter who worked on this tip left the paper before we had a chance to publish."
  },
  {
    "objectID": "vis-reporting.html#tips-for-exploratory-visualizations",
    "href": "vis-reporting.html#tips-for-exploratory-visualizations",
    "title": "22  Visualization as a reporting tool",
    "section": "22.2 Tips for exploratory visualizations",
    "text": "22.2 Tips for exploratory visualizations\n\nUse small multiples to quickly orient yourself in a large dataset\n“Small multiples” are repeated images, usually over time or place. This example shows where each round of agricultural disaster payments went, which helped us decide on where to focus our reporting – Kansas and North Dakota.\n\n\n\nLook at your data from all directions\nWhen you’re trying to understand a story or a dataset, there’s no wrong way to look at it; try it every way you can think of, and you’ll get a different perspective. If you’re reporting on crime, you might look at one set of charts with change in violent crimes in a year; another might be the percent change; the other might be a comparison to other cities; and another might be a change over time. Use raw numbers, percentages and indexes.\nLook at them on different scales. Try following the rule that the x-axis must be zero. Then break that rule and see if you learn more. Try out logarithms and square roots for data with odd distributions.\nKeep in mind the research done on visual perception. William Cleveland’s experiments showed that the eye sees change in an image when the average slope is about 45 degrees. This suggests you ignore the admonitions to always start at zero and instead work toward the most insightful graphic. Other research in epidemiology has suggested you find a target level as a boundary for your chart. Each of these ways helps you see the data in different ways. When they’ve stopped telling you anything new, you know you’re done.\n\n\nDon’t assume\nNow that you’ve looked at your data a variety of ways, you’ve probably found records that don’t seem right – you may not understand what they meant in the first place, or there are some outliers that seem like they are typos, or there are trends that seem backwards.\nIf you want to publish anything based on your early exploration or in a published visualization, you have to resolve these questions and you can’t make assumptions. They’re either interesting stories or mistakes; interesting challenges to common wisdom or misunderstanding.\nIt’s not unusual for local governments to provide spreadsheets filled with errors, and it’s also easy to misunderstand government jargon in a dataset.\nFirst, walk back your own work. Have you read the documentation, its caveats and does the problem exist in the original version of the data? If everything on your end seems right, then it’s time to pick up the phone. You’re going to have to get it resolved if you plan to use it, so you might as well get started now.\nThat said, not every mistake is important. In campaign finance records, it’s common to have several hundred postal codes that don’t exist in a database of 100,000 records. As long as they’re not all in the same city or within a candidate, the occasional bad data record just doesn’t matter.\nAsk yourself: if I were to use this, would readers have a fundamentally accurate view of what the data says?\n\n\nAvoid obsessiong over precision and presentation details\nThe flip side of not asking enough questions is obsessing over precision before it matters. Your exploratory graphics should be generally correct, but don’t worry if you have various levels of rounding, if they don’t add up to exactly 100 percent or if you are missing one or two years’ data out of 20. This is part of the exploration process. You’ll still see the big trends and know what you have to collect before it’s time for publication.\nIn fact, you might consider taking away labeling and scale markers, much like the charts above, to even better get an overall sense of the data.\n\n\nCreate chronologies of cases and events\nAt the start of any complex story, begin building chronologies of key events and cases. These are easily done in a spreadsheet or a data collection system like Airtable. You will eventually need one.\n\n\nMeet with designers and graphics editors early and often\nBrainstorm about possible graphics with the artists and designers in your newsroom. They will have good ways to look at your data, suggestions of how it might work interactively, and know how to connect data and stories. It will make your reporting much easier if you know what you have to collect early on, or if you can alert your team that a graphic isn’t possible when you can’t collect it."
  },
  {
    "objectID": "vis-reporting.html#footnotes",
    "href": "vis-reporting.html#footnotes",
    "title": "22  Visualization as a reporting tool",
    "section": "",
    "text": "These are painstakingly built and are meant for publication, but you can see how much they can convey using color, size, shape and other elements within a table of numbers.↩︎"
  },
  {
    "objectID": "vis-tables.html#interactive-tables-with-reactable",
    "href": "vis-tables.html#interactive-tables-with-reactable",
    "title": "23  Report-making in R",
    "section": "23.1 Interactive tables with reactable",
    "text": "23.1 Interactive tables with reactable\nThe reactable library is highly customizable, but it can involve a lot of typing to get a good table. The documentation is excellent and there are great examples in the wild. It was used to produce the table above that contained the sparklines.\nThe basic idea is that you select the columns you want to display, then define their format and other details one by one. There are several useful defaults for the whole table, such as the number format. One way to simplify the typing is to just create the names of the columns you want to see in a select statement, then put a default number format for the dollar amounts. A full list of options is available on the help page for reactable.\n\nppp_orig |&gt; \n1  select (\n    Borrower = borrower_name, \n    City = borrower_city, \n    `Zip code` = borrower_zip, \n    `Loan amount` = amount, \n    `Amt forgiven` = forgiveness_amount\n    ) |&gt; \n  reactable (   \n2     sortable = TRUE,\n     filterable = TRUE,\n     searchable = TRUE,\n     defaultPageSize = 5,\n3     compact = TRUE ,\n     striped=TRUE,\n4     defaultColDef =\n        colDef ( \n                format = \n                   colFormat ( currency=\"USD\", separators = TRUE, digits = 0)\n                )\n     )\n\n\n1\n\nusing the select verb that we’ve already seen, pick out the columns for the table and rename them. Don’t forget the back-ticks if you need something with more than one word.\n\n2\n\nSet the options for sorting, filtering, and searching.\n\n3\n\nI usually use the “compact” style because I’m trying to fit as much in the table as possible.\n\n4\n\nDefine how numbers will show up by default. You can change this for individual columns.\n\n\n\n\n\n\n\n\n\nIt’s a lot of typing for something so simple, but I save it as a code snippet in RStudio and use a shortcut to paste it into a code chunk.\nThere is much, much more that reactable tables can do (like this), but this is a good start toward something readable and presentable to your colleagues. It is also possible to create collapsable rows for large tables, and total rows at the bottom."
  },
  {
    "objectID": "vis-tables.html#crosstabs-with-the-janitor-library",
    "href": "vis-tables.html#crosstabs-with-the-janitor-library",
    "title": "23  Report-making in R",
    "section": "23.2 Crosstabs with the janitor library",
    "text": "23.2 Crosstabs with the janitor library\nWe’ve gone through the exercise of creating a grouping, counting, then computing a percentage of total using our usual verbs. The janitor package provides a utility for doing that.\nHere’s an example with the full PPP dataset:\nThe tabyl function does one and only one thing: Count and compute percentages of totals. It creates an output data frame that you can style any way you want. You can do 1-, 2- or 3-way tables, but no more. This example creates the table, then formats it using a datatable as above.\n\n23.2.1 A simple one-way table\n\nppp |&gt; \n1  tabyl ( lender ) |&gt;\n2  arrange ( desc (percent)) |&gt;\n3  head (5) |&gt;\n  datatable (   \n4    rownames = FALSE\n  ) |&gt; \n5  formatPercentage (\"percent\") |&gt;\n6  formatRound (columns =\"n\",  digits=0)\n\n\n1\n\nCreate a one-way data table with count (n) and percent\n\n2\n\nSort it from highest to lowest\n\n3\n\nKeep only the top 5,\n\n4\n\ncreate our default datatable\n\n5\n\nFormat the percentages\n\n6\n\nFormat the raw numbers\n\n\n\n\n\n\n\n\n\n\nTwo-way table with tabyls\nThat’s good, but we have wanted some 2-way tables, the way we did in the group by chapter. Here’s an example:\n\nppp |&gt; \n  tabyl ( loan_status, draw)  \n\n\n\n  \n\n\n\nThis just created the simple counts. There are some “adorn” functions in the package that let you work with the numbers and percentages.\n\nppp |&gt; \n  tabyl (loan_status, draw) |&gt; \n  adorn_totals (c(\"row\", \"col\")) |&gt; \n1  adorn_percentages(\"col\" ) |&gt;\n  adorn_pct_formatting (digits=0) |&gt; \n  adorn_ns() |&gt; \n  adorn_title () \n\n\n1\n\nChange “col” to “row” if you want it to add to 100% across rather than down; “all” if you want it to be a percent of the grand total.\n\n\n\n\n\n\n  \n\n\n\nThis is not a very well documented or developed package, and it balks at giving the “adorn” commands out of order. So sometimes it’s not all that helpful, but it does create good crosstabs quickly."
  },
  {
    "objectID": "vis-tables.html#static-tables-with-gt",
    "href": "vis-tables.html#static-tables-with-gt",
    "title": "23  Report-making in R",
    "section": "23.3 Static tables with gt",
    "text": "23.3 Static tables with gt\nSection TK."
  },
  {
    "objectID": "vis-demo.html#intro-to-visualization-in-r",
    "href": "vis-demo.html#intro-to-visualization-in-r",
    "title": "24  Visualization demo",
    "section": "\n24.1 Intro to visualization in R",
    "text": "24.1 Intro to visualization in R\nYou’ll need some additional packages installed for this to work:\n\ngapminder - example data that is used throughout, even though it’s a little boring\nplotly - to make interactive charts.\n\nYou can use this command in the Console to install them at the same time:\n    install.packages(c(\"plotly\", \"gapminder\"))\nThen, load your packages, including the new ones you just installed:\n\nlibrary(gapminder)\nlibrary(tidyverse)\nlibrary(ggplot2)\nlibrary(plotly)\n\noptions(digits=2, scipen=99)"
  },
  {
    "objectID": "vis-demo.html#the-grammar-of-graphics",
    "href": "vis-demo.html#the-grammar-of-graphics",
    "title": "24  Visualization demo",
    "section": "\n24.2 The Grammar of Graphics",
    "text": "24.2 The Grammar of Graphics\nThe package we’re going to use for our graphing is called ggplot2, which is part of the tidyverse. Conceptually, it follows the principles in Leland Wilkinson’s “Grammar of Graphics”, written in 1999 as a framework for thinking about visualizations. For our purposes, you just need to understand that any visualization is made up of several fundamental pieces. In ggplot2, they are:\n\n\naesthetics (called “aes”) : What data are you plotting? It can have more than two dimensions, such as x-axis, y-axis, a column used for color and another used for size. These are things we can see on a graphic, including the values.\n\ngeometry refers to the shape each column will take.\n\nscale - any transformation we might make.\n\nfacets - creating small multiples by splitting up one graph into many similar graphs, based on a variable.\n\nlayers - adding multiple geometries on top of one another to reveal new information, or add annoations.\n\nIf you’ve used Photoshop or other Adobe products, this idea of layering data, annotation, style and other elements will be familiar to you.\nOne quirk of ggplot is that instead of the %&gt;% pipe command , it uses + instead. There are technical reasons for this, but it’s not worth getting into…\nThe basic structure of the plot is:\n      ggplot (  data = df_name, \n                aes (\n                  x = column_name,\n                  y = column_name,\n                  fill = color inside color,\n                  color = border color,\n                  size = size if relevant\n                  )\n                ) +\n                a geometry (eg, geom_point, geom_bar, etc.) with options such as color, fill and size +\n                facet_wrap ( column ~ column ) +\n                any scale information\nWe’re going to skip the labeling and annotation parts for now. That would come under layering and legends. In practice, these options can be mixed througout the command."
  },
  {
    "objectID": "vis-demo.html#building-you-graph-in-pieces-using-gapminder",
    "href": "vis-demo.html#building-you-graph-in-pieces-using-gapminder",
    "title": "24  Visualization demo",
    "section": "\n24.3 Building you graph in pieces using gapminder",
    "text": "24.3 Building you graph in pieces using gapminder\nGapminder is a datast made famous in a viral 2010 TED talk. It contains the life expectency and income (GDP per capita) by country for 200 years. The data is in 5-year increments, through 2007.\n\n24.3.1 Subset to just the latest years\nJust pull out the latest year (2007) for our practice\n\n#what is gapminder? Life expectancy by country, only goes to 2007. Take the latest year.\n\n\ngapminder_2007 &lt;-\n  gapminder %&gt;%\n  filter ( year == 2007)\n\nglimpse(gapminder_2007)\n\nRows: 142\nColumns: 6\n$ country   &lt;fct&gt; \"Afghanistan\", \"Albania\", \"Algeria\", \"Angola\", \"Argentina\", …\n$ continent &lt;fct&gt; Asia, Europe, Africa, Africa, Americas, Oceania, Europe, Asi…\n$ year      &lt;int&gt; 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, …\n$ lifeExp   &lt;dbl&gt; 44, 76, 72, 43, 75, 81, 80, 76, 64, 79, 57, 66, 75, 51, 72, …\n$ pop       &lt;int&gt; 31889923, 3600523, 33333216, 12420476, 40301927, 20434176, 8…\n$ gdpPercap &lt;dbl&gt; 975, 5937, 6223, 4797, 12779, 34435, 36126, 29796, 1391, 336…\n\n\n\n24.3.2 The histogram\nOne of the first pieces of information you often want about a dataset is its distribution. Do all of the values cluster around the center? Or do they spread out? Let’s do a histogram of the life expectency variable.\nStart your plot with the commmand ggplot, then add in the aesthetics and geometry:\n\nggplot( \n        data=gapminder_2007,\n        aes (x = lifeExp )\n      ) +\n      geom_histogram()\n\n\n\n\nWe’ll add a few options to this plot to make it a little easier to read\n\n#make it an outline, with smaller piles.\nggplot ( data= gapminder_2007,\n         aes (x= lifeExp)\n        ) +\n        geom_histogram (binwidth=5, color=\"black\", fill=\"white\")   \n\n\n\n\nBut I’m interested in how the different continents look. Try “faceting” by continent.\n\nggplot ( data= gapminder_2007,\n         aes (x= lifeExp)\n        ) +\n        geom_histogram (binwidth=5, color=\"black\", fill=\"white\")   +\n        facet_wrap ( ~ continent)\n\n\n\n\n\n24.3.3 Try a scatter, or dot plot\nSave a plot and add to it\nYou can save your plot to an object rather than print it immediately, making it a little easier to troubleshoot.\n\nmy_plot &lt;-\n  ggplot (\n    data = gapminder_2007,\n    aes (x= gdpPercap , y = lifeExp)\n  )\n#what does this look like?\nmy_plot\n\n\n\n\nIt doesn’t look like anything! The reason is that I didn’t include a geometry, or a shape, for the values. Add a point here:\n\nmy_plot &lt;-\n  my_plot +\n  geom_point()\nmy_plot\n\n\n\n\nThere are some built-in themes that take some best practices for mixes of colors and styles, so I’ll add one in.\n\nmy_plot &lt;-\n  my_plot +\n  theme_minimal()\nmy_plot\n\n\n\n\nLet’s add some color. Remember, we keep adding elements to our existing plot, so we don’t have to start over each time.\n\nmy_plot &lt;- \n  my_plot +\n  aes (color = continent)\nmy_plot\n\n\n\n\nAnd now add population for the size of the country\n\nmy_plot &lt;- \n  my_plot +\n  aes (size=pop)\n    \nmy_plot\n\n\n\n\nLet’s build this from scratch, and then also make sure that the big points don’t overlap the little ones too much. Note that I’ve added scale_x_log10 to make the x-axis go up by factors of 10 rather than 1. (In the age of coronavirus, we’ve gotten used to log scales!)\n\nmy_plot &lt;- \n  ggplot (  data= gapminder_2007 , \n            aes ( x= gdpPercap, \n                  y = lifeExp, \n                  color = continent,\n                  size = pop)\n            ) +\n  geom_point (alpha = 0.7) +\n  theme_minimal() +\n  scale_x_log10()\n  \n  \nmy_plot\n\n\n\n\nFacet\nNow let’s make a little chart for each continent\n\nmy_plot &lt;- \n  my_plot + \n  facet_wrap (~continent)\n\n\nmy_plot\n\n\n\n\n\n24.3.4 Adding interactivity\nGGPLOT2 is not interactive, so we have to install a different library to allow us to hover over the points. In this case, we’re going to use a function called paste, which puts words together, in the column in aes called “text”:\n\n#install.packages(\"plotly\")\nlibrary(plotly)\n\nmy_plot &lt;-\n  ggplot (data = gapminder_2007,\n          aes(text = paste(\"country: \", country),\n              x= gdpPercap ,\n              y = lifeExp,\n              color= continent,\n              size=pop)\n        ) +\n    geom_point( alpha= 0.7) +\n    theme_minimal() +\n    facet_wrap (~continent) +\n    scale_x_log10()\n#We have to make it a ggplotly to get it interactive.\nmy_plot &lt;- ggplotly(my_plot)\n\nmy_plot"
  },
  {
    "objectID": "vis-demo.html#adding-animation",
    "href": "vis-demo.html#adding-animation",
    "title": "24  Visualization demo",
    "section": "\n24.4 Adding animation",
    "text": "24.4 Adding animation\nSo far, we’ve only looked at the year 2007 – what if we wanted to look at it over time, say 50 or so years? Let’s take the years 1957 to 2007:\n\ndf_gap &lt;- \n  gapminder %&gt;%\n  filter (between (year, 1957, 2007))\n# and let's just check it\n\ndf_gap %&gt;% \n  group_by (year) %&gt;%\n  summarise (n() ) %&gt;%\n  arrange (year)\n\n\n\n  \n\n\n\nLet’s just repeat what we did to get the original interactive plot, with one change: The plotly package lets you specify a “frame” aesthetic, which will create animation by whatever column you specify. Here, we’ve specified the year as that frame:\n\nlibrary(plotly)\n#this option forces it to show real numbers, not the 1e things.\noptions (scipen=99)\nmy_plot &lt;-\n  ggplot (data = df_gap,\n          aes(text = paste(\"country: \", country),\n              x= gdpPercap ,\n              y = lifeExp,\n              color= continent,\n              size=pop, \n              frame = year)\n        ) +\n    geom_point( alpha= 0.7) +\n    theme_minimal() +\n    facet_wrap (~continent) +\n    scale_x_log10()\n#We have to make it a ggplotly to get it interactive.\nmy_plot &lt;- ggplotly(my_plot)\nmy_plot"
  },
  {
    "objectID": "vis-practice.html#the-data",
    "href": "vis-practice.html#the-data",
    "title": "25  Visualization exercise",
    "section": "\n25.1 The data",
    "text": "25.1 The data\nWe saw the Hot 100 data at the very beginning of your exploration of R. We’re going to use a slightly different version of it to create the visualizations because an older version was matched to the Spotify database to extract certain information from each of the songs.\nThis data was used as a TidyTuesday dataset in 2021 (scroll down to get the data dictionaries), so it’s a little older than the one we worked on earlier.\nThis data has two tables:\n\nThe Hot 100 from mid-1958 to mid-2021: https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-09-14/billboard.csv\n\nFor any songs that are in Spotify, the characteristicso of the song: https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-09-14/audio-features.csv\n\n\nThe dada dictionary shows the characteristics from the Spotify songs, but it’s a little easier to understand if you take a look at Juan De Dios Santos’ post, asking: “Is my Spotify music boring? An analysis involving music, data, and machine learning”[https://towardsdatascience.com/is-my-spotify-music-boring-an-analysis-involving-music-data-and-machine-learning-47550ae931de]\n\n25.1.1 Examples\nAll of these examples were made with a the version of R and the tidyverse that was used in 2021, so you’ll see a few things in the code that are different, notably the use of %&gt;% instead of |&gt; as the pipe. They are either R scripts (.R extension) or R Markdown (.Rmd extension) , which is the predecessor to Quarto.\nTidyTuesday videos\nDavid Robinson, a data scientist at Heap, often creates live demos of his exploration of TidyTuesday datasets – data he’s never seen before. They’re long (usually about an hour), but you can watch him decide what to do and how to do it live. He made this video for the Hot 100 data. (The second half gets into machine learning / AI to make predictions – skip that part if you watch the video).\nHere are a few screen shots from that video – they’re closer to our exploratory visualization than the polished ones below;\nVisualizing characteristics\nThese are really polished, publication-quality vis examples made in R, but you can take inspiration from these to do draft versions for the purpose of exploration.\nLaurence Horton did a few quick charts to look at the Spotify characteristics.\nLaura Navarroshows us what [annotation can do for a chart]((https://github.com/lau-cloud/TidyTuesdaycode/blob/master/Billboard/script.R) . I’m super surprised at the relatively low showing of hip hop, but …\n\nDanielle Navarro wrote a full tutorial aimed at beginners in R , walking through the data to find and visualize all of Britney Spears’ hits. It has the added feature of explaining how to find her using regular expressions! (Yes, they’re both people named Navarro. I don’t know if they’re the same person.)\nAnd Javier Tamayo-Leiva went a little crazy with colors but found an interesting way to visualize the top hits using two dimensions: Number of weeks at No. 1 and the “energy” of the song. Here is the R code for that chart.\n\n\nhot100"
  },
  {
    "objectID": "vis-practice.html#your-turn",
    "href": "vis-practice.html#your-turn",
    "title": "25  Visualization exercise",
    "section": "\n25.2 Your turn",
    "text": "25.2 Your turn\nYou’ve been through a lot, so let’s review the steps you have to take to make a visualization:\nLoad the data in this case using a read_csv() function. There are two datasets, if you want to use them both.\n\nWrangle the data. You will probably need to filter, group, count or otherwise summarize the data. For example, the “Evolution of Genres” probably starts with a dataset by year and genre.\nDecide on the “geom” that you want to use. We haven’t gone through a lot of these yet, so I’m listing some of the common ones below.\n\nYou might want to change themes and color palettes, which is is a little harder. Get the basic visualization down before you start polishing!\n\nYou might want to use the https://r-graph-gallery.com/ site for inspiration, which always has the packages required and the exact commands you need make it.\n\n\n\n\n\n\nTip\n\n\n\nYou may end up seeing a lot of code in the examples that start with fct_ – these are turning words into categories that are sorted on a particular element, such as the number of times that they show up. It turns words into categories that have numbers underneath the words so that they are always the same and every possible category is defined. These are called factors and we haven’t really dealt with them. But they’re useful. They depend on loading a library of the tidyverse called forcats\n\n\n      ggplot (  data = df_name, \n                aes (\n                  x = column_name,\n                  y = column_name,\n                  fill = column_to_define_the_fill,\n                  color = column_to_define_the_lines_and_borders,\n                  size = column_to_define_the_size\n                  ) \n                ) +\n                geom_something ( aes (`columns that only refer to this geom`) )\n                facet_wrap ( column ~ column ) +\n                extras ()\n  \n\n25.2.1 Common “geoms”\n\ngeom_point()\ngeom_line()\ngeom_bar()\ngeom_area()\n\nOther tutorials and cheat sheets go into much more detail:\n\nThe “ggplot” chapter of Rafael A. Irizarry’s Introduction to Data Science\nThe Posit cheat sheet for ggplot\nKiernan Healy’s “Data visualization: A practical introduction is a whole book on ggplot."
  },
  {
    "objectID": "vis-practice.html#one-quick-plot",
    "href": "vis-practice.html#one-quick-plot",
    "title": "25  Visualization exercise",
    "section": "\n25.3 One quick plot",
    "text": "25.3 One quick plot\nThe very first day we looked at R, I showed you one quick plot based on a Hot 100 dataset that I’d created with just the 21 songs that stayed on the Hot 100 for at least a year list during the 2000s. Now that code may make a little more sense to you\n\nhot100 &lt;- readRDS( \n  url (\"https://cronkitedata.s3.amazonaws.com/rdata/top_songs.RDS\")\n  )\n\n\nhot100 |&gt; \n  ggplot ( \n        aes ( x=chart_date, y=hit, color=this_week ) \n        ) +\n       geom_point(  size= .25) +\n  # label the color variable.\n  labs( color = \"Hot 100 #\") +\n  theme_minimal( ) +\n  theme(axis.title.x = element_blank(),\n          axis.title.y = element_blank(), \n        legend.position= \"bottom\") \n\n\n\n\n\n25.3.1 Other sources to learn about ggplot\n\nggplot2: Elegant Graphics for Data Analysis\nData Visualization: A practical Guide\nCedric Sherer’s list of resources, and his materials for the 2-day workshop at the RStudio Conference 2022"
  },
  {
    "objectID": "vis-maps-begin.html#the-power-of-maps",
    "href": "vis-maps-begin.html#the-power-of-maps",
    "title": "26  Mapping: An introduction",
    "section": "26.1 The power of maps",
    "text": "26.1 The power of maps\nThe most famous use of mapping may be the John Snow map, made in 1854 during a cholera outbreak in London. Officials didn’t know the cause, but Dr. Snow mapped the deaths and quickly saw the common element: The Broad Street water pump.\n\n\n\ncholera map\n\n\nIn data journalism, we use maps to see patterns that would be impossible any other way. Sometimes, they are used to write paragraphs rather than display data.\nIn 2015, we did a story about the tycoons funding the upcoming presidential election. Mapping their locations let us write this paragraph:\n\nNearly all the neighborhoods where they live would fit within the city limits of New Orleans. But minorities make up less than one-fifth of those neighborhoods’ collective population, and virtually no one is Black. Their residents make four and a half times the salary of the average American, and are twice as likely to be college educated.\n\nMapping seems magical and inconceivable until you do it. But it does require a little bit of vocabulary and a few basic concepts before you can accurately and confidently work with maps."
  },
  {
    "objectID": "vis-maps-begin.html#mapping-faq",
    "href": "vis-maps-begin.html#mapping-faq",
    "title": "26  Mapping: An introduction",
    "section": "26.2 Mapping FAQ",
    "text": "26.2 Mapping FAQ\n\n26.2.1 What is GIS?\nGraphical Information Systems are programs and apps built to work with data that have a spatial, or geographic, element to them. In them, data is meant to be worked with in maps or on a spatial plane or globe rather than in columns and rows. Examples of GIS systems are ESRI’s ArcMap, which is used primarily by researchers and government agencies who create the underlying maps we’ll use in journalism. They are relatively hard on a computer, and require more memory and disk space than we’ve used.\nA popular free and open source GIS system is QGIS, which will work on either Windows or Mac machines. There are excellent tutorials available for QGIS in journalism, including a Knight Center course (but the handout links are dead), and Alexandra Kanik’s prerequisite tutorials for a master class in mapping done for NICAR in 2022.\n\n\n26.2.2 What kinds of maps do we use?\n\n“Reference” maps are simply features on a screen or on paper. Think of Google Maps as reference maps. Cartographers take great care in making reference maps readable and useful, from the shape of each line or point to the color of kind of area like a mountain range. Font selection and line types are other elements that cartographers care about, so that it is possible to use the map for navigation or to picture a location.\n“Thematic maps” are the kind that we usually make in journalism: They are designed to illustrate data such as wealth, topography, or crime.\n\nGenerally, your project will begin by finding the right reference map for your work, then layer on top of it thematic elements from your data. Reference maps can come from many places, such as the Census TIGER program, Google Maps ($$$), OpenStreetMap, MapBox, Leaflet or other providers. You don’t have to make them yourself. Turn them into thematic maps by joining data to them or layering data on top.\n\n\n26.2.3 What are longitude and latitude?\nThese are the coordinates that define a spot on the globe. In GIS applications, you will usually get these as “decimal degrees” rather than the degree, minute, second form that you learned in junior high.\n\n\n\nSource: mapschool.io\n\n\nUsually, for local data, you will want the numbers to have at least three numbers after the decimal point. However, agencies often mask the actual locations in data they provide by lopping off decimals. Most coding services provide “rooftop” level positions, which have six numbers after the decimal point. For example, longitude (or X) -73.990593 and latitude (Y) 40.740121 define the position of the front of White House.\nIn the United States, longitude (X) is always negative (except Guam), because it’s in the Western Hemisphere. Latitude (Y) is always positive, because there is no place in the United States in the Southern Hemisphere.\n\n\n26.2.4 What are features?\nEach layer on your map displays a “feature”, such as roads, schools, or Census tracts. At its simplest, a feature layer is one of the following three types:\n\n\n\nSource: mapschool.io\n\n\n\nPoints: The simplest of the types, a point is a place, defined by its longitude and latitude, or its XY position. You can get that information from the data you’re requesting or obtaining from the government, or you can try to figure it out yourself using a process called “geocoding”. We’ll come back to that.\nLines are strings of points smushed together — they don’t have to be straight, but they do not have the concept of an interior or exterior. You can find points along a line, or distances to a line. While there are many line features in reference maps, I have hardly ever used them in my work. People who work with traffic or water flows, however, use them a lot. You can use them to determine patterns on either side of a border, or a distance to a road.\nPolygons: These lines smushed together to form an enclosed area, such as a state, a Census tract or a Zip Code. They often touch one another, and you can always find out which points fall within each polygon using a “spatial join” – one of the most common tasks that we do. You can turn polygons into points by finding their center point, or centroid.\n\n\n\nRaster data and imagery : For simplification, each of the above types are considered “vector” data – they are defined by positions by connecting a whole bunch of points in space. But raster data, like satellite imagery, are just pixels of different colors. You can technically look at them in any program, but when they are imported to GIS systems, they become “georeferenced”, in that their edges are referenced to position on the globe. For now, we are not going to look at raster data.\n\n\n\n\nSource: mapschool.io\n\n\n“Attributes” are the data elements attached to features – columns in a database! Thematic maps use attributes such as income, population, or temperature to determine the size, color or shape of features on a maps.\n\n\n26.2.5 Where do I get map data?\nUnlike other parts of the government, sharing map data is very common in agencies. They are so hard to make, and so useful, that most cities and states have GIS departments whose job it is to organize and document the map data.\nMap data comes in various forms – usually a bundle of files called “shapefiles”, which were originally created by ESRI. More modern systems often have “geojson” files, which are easier to use. Google Earth uses “KML” or “KMZ” data, which is also easy to use. JSON files are less efficient than shapefiles, so they are often much larger.\n\nLocal and state governments: In Arizona, the AZGEO hub (accessible with a free user account) coordinates the map data for many agencies of the state. At ASU, the library has a GIS lab with access to much of the base layer information needed, such as county voting districts. They also have contacts in local government who can help you find the underlying map data you need.\nFederal government: At the federal level, the US Geological Service can sometimes serve as a clearinghouse. The Weather Service, USDA and other agencies often have GIS data for free. The National Map also has many layers that can be used.\nThe Census Bureau has mapped every address and block in the US, and creates TIGER files for counties, voting districts, school districts and other political boundaries.\n\nFor very detailed maps, such as the footprints of property parcels in a county , you may have to buy the information. If you get it directly from the county, it shouldn’t be a lot – maybe $100 – but if you buy it privately, it can cost thousands of dollars.\n\nGetting map data from ESRI / ArcMap\nMany government agencies have turned their GIS applications over to the private company, ESRI, and make them public through that system. It’s often quite confusing to download data from ESRI, but it is often possible. If you don’t see a way to use the data yourself, then call the agency responsible for it and ask – you will usually be able to get them to send it to you or give you instructions on where to find it. We’ll look at an example of getting data from an ESRI map in the next chapter.\n\n\n\n26.2.6 What if my data doesn’t have longitude and latitude?\nThe process of turning addresses into points on a map is called “geocoding”, and it is one of the most expensive and time-consuming processes in data journalism. The reason is that there are so many ways to represent an address, and that addresses change all the time. It’s not unusual to have 95 percent of your addresses map perfectly, but then you have to look at the remaining 5 percent to see whether there are consistent errors. When I used to do a lot of mapping in Washington, DC, there were three types of addresses that routinely failed – anything on North or South Capitol Street; anything on Martin Luther King, Jr. Avenue, and anything on Nannie Helen Burroughs Avenue. That meant that any map I made, if I didn’t deal with these problems, would be misleading because they would be missing those locations. Geocoding New York City addresses in Queens can also be difficult.\nWe’re not the only ones who struggle with geocoding. In Los Angeles, reporters once found that the crime data supplied to the public was wrong – every time its geocoding failed, it put the crime at 1st and Spring Streets, which was the center of the city map. (Data used inside the police department was correct, because it came from a different source – the GPS data sent by police when they made a stop.)\nThis means that whenever you ask the government for data, you should ALWAYS ask for geographic coordinates and ask if they have GIS files (often using shapefiles). They may not give them to you, but it will save days of work and be much more accurate than trying to put them on a map yourself."
  },
  {
    "objectID": "vis-maps-begin.html#a-note-on-projections",
    "href": "vis-maps-begin.html#a-note-on-projections",
    "title": "26  Mapping: An introduction",
    "section": "26.3 A note on projections",
    "text": "26.3 A note on projections\n\nProjections are what we call the mathematical equations that do the trick of turning the world into some flat shape that fits on a printout or a computer screen. It’s a messy task to do, this transformation - there’s no way to smoosh the world onto a screen without distorting it in some way. You either lose direction, or relative size, or come out with something very weird looking.\n-- mapschool.io\n\nThis clip from The West Wing shows how projections can change the way you see the world.\n\nYou can play around with how the standard map distorts size at https://thetruesize.com\nBecause every map has a defined projection, you can’t do anything with one without the maker of the map telling you how it’s been flattened.\n\nGeographic coordinate systems\nGeorgraphic coordinate systems are often used for point features, because they describe posiitons on a globe. They are also often used for reference, or base, maps because they’re easy to use and transform.\nWGS84 with the code ESPG:4326, for World Geodetic System (1984 version) is the standard coordinate system for international data and GPS systems.\nNAD83 or EPSG:4269, is the standard used by the Census Bureau for North American data.\n\n\nProjected coordinate systems\nWhere geographic coordinate systems are measured in degrees, projected coordinate systems use units of measure that we understand – usually feet or meters. They are used more frequently to define direction, distance or shape. Where you would need a lot of geometry to compute the distance between two points on a globe, the distance between two points in a projected system are just the Pythagorean theorem you used in 6th grade: x2 + y2 = distance2\nIf a map is projected, it will usually have the information built into the data file. This is one of the files that makes up the bundle for shapefiles, and the other types have the projection built in. R and other mapping systems will usually recognize it.\nHowever, state and local agencies often leave this part out. In those cases, look for a standard projection used by the state. For Maricopa County, the standard is North American Datum 1983, Arizona State Plane, Central Zone, HARN, in feet (code 2868). For US data, many people use the U.S. national atlas equal area projection, or crs 9311 (especially if you’re only showing the lower 48) or ESRI:102009.\nThere’s a lot of complicated math that goes into flattening the earth into two dimensions for viewing on a screen or a piece of paper. Each of these projections has a number of characteristics, so instead of listing all of them whenever you want to use them, they have codes. You can look up codes using https://spatialreference.org/.\nNow that you have some working knowledge of GIS, we can move onto making maps."
  },
  {
    "objectID": "vis-maps-firstmap.html#using-tmap-vs.-ggplot-and-leaflet",
    "href": "vis-maps-firstmap.html#using-tmap-vs.-ggplot-and-leaflet",
    "title": "27  The first map",
    "section": "\n27.1 Using tmap vs. ggplot and leaflet",
    "text": "27.1 Using tmap vs. ggplot and leaflet\nThere are several approaches to getting maps in R. In general, the heavy lifting is done the same way – through the sf (simple features) library. But displaying the maps can be done many different ways.\nThe tmap library does a little more automatically than using the visualization library ggplot to make maps, so that’s the approach this tutorial will take. Neither is better - tmap is a little easier and requires a little less typing, but is not quite as easy to marry with other Javascript interactive maps or to customize using ggplot."
  },
  {
    "objectID": "vis-maps-firstmap.html#setup",
    "href": "vis-maps-firstmap.html#setup",
    "title": "27  The first map",
    "section": "\n27.2 Setup",
    "text": "27.2 Setup\nYou’ll want to change your typical setup chunk to this when you start using maps:\n\n```{r}\n#| label: setup\n\nlibrary(tidyverse)\nlibrary(tigris)\nlibrary(sf)\nlibrary(tmap)\nlibrary(gt)\n\noptions(tigris_class=\"sf\",\n        tigris_use_cache = TRUE)\n```\n\nThe options make it easier to work with the Census bureau’s maps."
  },
  {
    "objectID": "vis-maps-firstmap.html#the-first-project",
    "href": "vis-maps-firstmap.html#the-first-project",
    "title": "27  The first map",
    "section": "\n27.3 The first project",
    "text": "27.3 The first project\nOur first project involves getting points on a map of Maricopa County, then displaying it based on Census demographics. Here, we’ll use voting locations as the points and Census tract level data for income.\n\n27.3.1 Points\nWe have a list of voting locations that were geocoded by the Arizona Republic last year, courtesy of Caitlin McGlade. The locations aren’t exact – some of the digits were chopped off, and some weren’t found precisely. But they are generally in the right area.\nImport that file using the usual read_csv() method.\n\nlocations &lt;- read_csv(\"https://cronkitedata.s3.amazonaws.com/rdata/maricopa_voting_places.csv\")\n\nglimpse(locations)\n\nRows: 223\nColumns: 7\n$ site_name &lt;chr&gt; \"ASU DOWNTOWN CAMPUS\", \"ASU WEST CAMPUS\", \"AVONDALE CITY HAL…\n$ address   &lt;chr&gt; \"522 N CENTRAL AVE\", \"4701 W THUNDERBIRD RD\", \"11465 W CIVIC…\n$ city      &lt;chr&gt; \"PHOENIX\", \"GLENDALE\", \"AVONDALE\", \"BUCKEYE\", \"QUEEN CREEK\",…\n$ state     &lt;chr&gt; \"AZ\", \"AZ\", \"AZ\", \"AZ\", \"AZ\", \"AZ\", \"AZ\", \"AZ\", \"AZ\", \"AZ\", …\n$ zip       &lt;dbl&gt; 85004, 85306, 85323, 85326, 85142, 85335, 85255, 85234, 8525…\n$ longitude &lt;dbl&gt; -112.0740, -112.1599, -112.3031, -112.5839, -111.6361, -112.…\n$ latitude  &lt;dbl&gt; 33.45377, 33.60733, 33.44517, 33.37083, 33.25029, 33.57322, …\n\n\nThe Republic used a geocoding service that provides the data in the geographic reference WGS84, which is code 4326. There are names, addresses, and coordinates in this dataset.\nHere is how to turn the simple data into a geographic dataset:\n\nlocations_map &lt;- \n    locations |&gt; \n    st_as_sf ( \n               coords = c(\"longitude\", \"latitude\"), \n               crs = 4326)\n\nNow take a look at its structure, using the “str” rather than “glimpse” command, which provides a little more detail:\n\nstr(locations_map)\n\nsf [223 × 6] (S3: sf/tbl_df/tbl/data.frame)\n $ site_name: chr [1:223] \"ASU DOWNTOWN CAMPUS\" \"ASU WEST CAMPUS\" \"AVONDALE CITY HALL\" \"BUCKEYE CITY HALL\" ...\n $ address  : chr [1:223] \"522 N CENTRAL AVE\" \"4701 W THUNDERBIRD RD\" \"11465 W CIVIC CENTER DR 200\" \"530 E MONROE AVE\" ...\n $ city     : chr [1:223] \"PHOENIX\" \"GLENDALE\" \"AVONDALE\" \"BUCKEYE\" ...\n $ state    : chr [1:223] \"AZ\" \"AZ\" \"AZ\" \"AZ\" ...\n $ zip      : num [1:223] 85004 85306 85323 85326 85142 ...\n $ geometry :sfc_POINT of length 223; first list element:  'XY' num [1:2] -112.1 33.5\n - attr(*, \"sf_column\")= chr \"geometry\"\n - attr(*, \"agr\")= Factor w/ 3 levels \"constant\",\"aggregate\",..: NA NA NA NA NA\n  ..- attr(*, \"names\")= chr [1:5] \"site_name\" \"address\" \"city\" \"state\" ...\n\n\nThis is hard to read, but take a careful look: Its type of data includes “sf”, along with data frame and table. The longitude and latitude columns are gone, replaced by a column called geometry.\nWe can check to see what projection R thinks it is in using the st_crs() function:\n\nst_crs( locations_map)\n\nCoordinate Reference System:\n  User input: EPSG:4326 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n        MEMBER[\"World Geodetic System 1984 (Transit)\"],\n        MEMBER[\"World Geodetic System 1984 (G730)\"],\n        MEMBER[\"World Geodetic System 1984 (G873)\"],\n        MEMBER[\"World Geodetic System 1984 (G1150)\"],\n        MEMBER[\"World Geodetic System 1984 (G1674)\"],\n        MEMBER[\"World Geodetic System 1984 (G1762)\"],\n        MEMBER[\"World Geodetic System 1984 (G2139)\"],\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]],\n        ENSEMBLEACCURACY[2.0]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    USAGE[\n        SCOPE[\"Horizontal component of 3D system.\"],\n        AREA[\"World.\"],\n        BBOX[-90,-180,90,180]],\n    ID[\"EPSG\",4326]]\n\n\n\n27.3.2 Using the tmap library to display the map\n\ntm_shape ( locations_map) +\n  tm_dots ( )\n\n\n\n\nFor a static map, there are a lot of extra packages that have to be installed and there are some dependencies that we don’t want to deal with. Instead, we’ll just view it as a dynamic map:\n\ntmap_mode(mode=\"view\")\ntm_shape ( locations_map) +\n  tm_dots ( )\n\n\n\n\n\n# turn it back to plot\ntmap_mode(mode=\"plot\")\n\n\n27.3.3 Adding census tracts\nThe tigris package gets us access to all of the geographic data from the Census Bureau. Among them are Census tracts.\n\nmaricopa_geo &lt;- \n  tigris::tracts(state = \"04\", county=\"013\", year=\"2020\", \n                 cb=TRUE)\n\nTake a look at the projection that this file is in, since it ought to match when putting two maps together:\n\nst_crs(maricopa_geo)\n\nCoordinate Reference System:\n  User input: NAD83 \n  wkt:\nGEOGCRS[\"NAD83\",\n    DATUM[\"North American Datum 1983\",\n        ELLIPSOID[\"GRS 1980\",6378137,298.257222101,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"latitude\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"longitude\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4269]]\n\n\nThis is a different coordinate system.\nIt’s ok, since we really want them both to be in a system designed for this part of the world.\nWe will present our map in the Arizona State Plane projection, 2868:\n\ntm_shape ( maricopa_geo, projection=2868) +\n  tm_polygons () +\ntm_shape ( locations_map, projection = 2868) +\n  tm_dots ( )\n\n\n\n\n\n27.3.4 Adding Census data\nI downloaded some data from the 2018-2021 American Community Survey. You can load it into your environment using this code chunk:\n\nmaricopa_demo &lt;- readRDS(\n                       url (\"https://cronkitedata.s3.amazonaws.com/rdata/maricopa_tract.Rds\")\n)\n\nNow, just like any other data, we can join these two datasets.\n\nmaricopa_demo_map &lt;- \n  maricopa_geo |&gt; \n  left_join ( maricopa_demo, join_by ( GEOID==geoid)) |&gt; \n  select (GEOID, tot_pop:pct_minority )\n  \n\nglimpse (maricopa_demo_map)\n\nRows: 1,009\nColumns: 6\n$ GEOID         &lt;chr&gt; \"04013422102\", \"04013422308\", \"04013103304\", \"0401342070…\n$ tot_pop       &lt;dbl&gt; 4558, 5491, 4164, 5022, 3441, 6215, 4353, 3800, 3990, 58…\n$ nonhisp_white &lt;dbl&gt; 1523, 3237, 1152, 4123, 2540, 3730, 3983, 2371, 3039, 55…\n$ median_inc    &lt;dbl&gt; 34486, 93581, 41853, 110208, 96406, 60598, 141107, 65033…\n$ pct_minority  &lt;dbl&gt; 67, 41, 72, 18, 26, 40, 8, 38, 24, 91, 17, 48, 17, 16, 5…\n$ geometry      &lt;POLYGON [°]&gt; POLYGON ((-111.8746 33.4049..., POLYGON ((-111.8…\n\n\n(You don’t need to select the “geometry” column – it has to be there if it’s a map.)"
  },
  {
    "objectID": "vis-maps-firstmap.html#a-chloropleth-map",
    "href": "vis-maps-firstmap.html#a-chloropleth-map",
    "title": "27  The first map",
    "section": "\n27.4 A chloropleth map",
    "text": "27.4 A chloropleth map\nNow we can use colors to show the percent of each tract that identified as a racial or ethnic minority in the American Community Surveys.\n\ntm_shape ( maricopa_demo_map, \n           projection = 2868) +\n  tm_polygons ( col = \"pct_minority\", \n                style = \"jenks\", \n                palette = \"YlGnBu\", \n                border.col = NULL)\n\n\n\n\nThere are a lot of options for drawing the maps, but these are the most common. Using “jenks” natural breaks to find the groupings for colors. It tries to find a place where big changes in color won’t happen for minor differences, but it sometimes needs to be tweaked.\nColor palettes\nYou may notice I changed the color palette so that the states with a lot of water are in blue and those with little are in yellow! Here are the common palettes used in R, which come from the Color Brewer: color advice for cartography:\n\nRColorBrewer::display.brewer.all()"
  },
  {
    "objectID": "vis-maps-firstmap.html#adding-the-voting-places-and-making-it-interactive",
    "href": "vis-maps-firstmap.html#adding-the-voting-places-and-making-it-interactive",
    "title": "27  The first map",
    "section": "\n27.5 Adding the voting places and making it interactive",
    "text": "27.5 Adding the voting places and making it interactive\n\ntmap_mode(\"view\")\n\ntm_shape ( maricopa_demo_map, \n           projection = 2868) +\n  tm_polygons ( col = \"pct_minority\", \n                style = \"jenks\", \n                palette = \"YlGnBu\", \n                border.col = NULL, \n                alpha = .3) +\ntm_shape ( locations_map) +\n  tm_dots (col = \"red\")\n\n\n\n\n\n\nYou have now made an interactive map of the Census Tracts and voter locations in Maricopa County, from start to finish! It’s not good enough to publish, but it’s good enough for you to explore on your own.\nThis method of making maps doesn’t have very many options, but it’s the simplest way to get started.\nYou can also use the ggplot library, with additional options added with other packages, to create a publishable static or interactive map."
  },
  {
    "objectID": "advanced.html",
    "href": "advanced.html",
    "title": "Special skills",
    "section": "",
    "text": "Introduction\nThis section includes miscellaneous tutorials for special skills, ranging from simple scraping to understanding regular expressions."
  },
  {
    "objectID": "advanced-pdf.html#the-pdf-problem",
    "href": "advanced-pdf.html#the-pdf-problem",
    "title": "28  Working with PDF files",
    "section": "28.1 The PDF problem",
    "text": "28.1 The PDF problem\nMany government agencies distribute data in PDF, or Adobe Portable Document Format. As the full name implies, these are documents, not data. It is geared at getting text and images properly placed on a page, not creating tidy data as we have been dealing with in previous chapters.\nSome software – Excel, Google Sheets, Microsoft Access and others – create PDF’s as one of their output formats. In fact, there is an entire ecosystem of pdf report makers, such as Crystal Reports. But converting them back into a usable dataset is often a challenge because we want columns and rows, not positions of words on a page.\nSome people call the process of returning a PDF to a data format as “scraping”. Others call it “report mining”. People with a lot of money can use automation tools, notable Altria’s Monarch product, to do this at scale with few errors, but it costs at least $2,000 / year / person for software like this, so few reporters have access.\n\n28.1.1 Understanding your pdf\nPDF’s come in two very different types. The first is the more common version: reports generated from other software, such as Quarto, that contain text similar to a formatted Google or Word doc. The other is an image file, which is what is produced by scanning old documents, or sometimes from public records requests in which the agency has printed out a document, redacted it, and scanned it back into an electronic form for distribution.\nIf there are a lot of hand-written annotations on the page, then it is most likely an image. Another test is to try selecting the text on the screen. If you can’t do it (your cursor turns into an image selection tool, or it just selects the whole page), you are really only dealing with pixels and, to the computer, it is nothing different than a picture of your dog. If the selection covers the text and skips around, then it has underlying text and it can be used with most pdf parsing programs.1\n\n\n\n\n\n\n\n(a) selecting text in a pdf\n\n\n\n\n\n\n\n(b) selecting image in a pdf\n\n\n\n\nFigure 28.1: PDF types\n\n\nWhen you have an image, you will need a first step, or more expensive software, to deal with it. Most reporters use Google Pinpoint or DocumentCloud to do the “optical character recognition”, or OCR, necessary to work with them. A full version of Adobe Acrobat (not the reader) will also work. Some of the more expensive products listed below have versions that include OCR. But just know that if you have an image, your ability to parse these could be very difficult.\n\n\n28.1.2 Developing a strategy\nEvery PDF project is different. There are a few strategies you can employ to make it a little more replicable, but it’s always a difficult problem that doesn’t translate well from project to project.\nIf you are going to spend money on a tool for anything in data journalism, this is probably the place to spend it.\nHere are some things to think about:\n\nTry every simple tool and see if anything works. Each of the tools that turn PDFs into data work in a slightly different way, and each one makes different kinds of mistakes. It’s very easy to run a test set of documents through each product and see if any works almost perfectly.\nConsider re-typing! If you have a pdf created from a spreadsheet, you will likely spend less time retyping 100 or so rows if the simple tools don’t work.\nYou may have to use a combination of the tool and a program to get the data you want. If that is the case, try to find a conversion that preserves the position on the page, which is the one thing that’s accurate in the PDF. In that case, you write programs or spreadsheet formulas to look for a pattern like a date in certain columns that can then be used to identify different kinds of lines.\nConsider whether you really need the PDF in data form at all. If, for example, your goal is to see if the same names show up in different documents, Pinpoint or DocumentCloud might do just as well using a different process called entity extraction.\n\n\n\n28.1.3 Example document\nThe document we’ll use for testing is the most recent lobbying report from the city of Phoenix. This is a bare-bones report of 14 pages, which has repeated sections of the names of individual lobbyists underneath the name of the lobbying company and the date filed:\n\n\n\n28.1.4 Work from the goal backwards\nThe goal would be to have one dataset with the following columns:\n\nDate of filing\nName of lobbying organization\nLobbyist name 2\n\nThe filing and organization data would be repeated for each of the lobbyists.\nThis seems so simple! In your head, you can see exactly how that would work. But now you have to spend some time thinking about how you’ll get there.\nOne trick in reversing PDFs is to look for anything with a pattern that distinguishes one KIND of row from another – a heading, an indentation, etc. In this case, it’s the line with the date at the end that will make the biggest difference.\nIn this case, we have to find a way to apply the name of the organization and its most recently updated date to all of the rows of the lobbyist names. The pattern is that there is no date on the lobbyist list, but there is always a date on the organization row. (Sometimes indentations and formatting can help, but not always.)"
  },
  {
    "objectID": "advanced-pdf.html#pdf-conversion-tools",
    "href": "advanced-pdf.html#pdf-conversion-tools",
    "title": "28  Working with PDF files",
    "section": "28.2 PDF conversion tools",
    "text": "28.2 PDF conversion tools\nYou can’t just open a pdf or import it into an R program or Excel. Instead, you’ll need a tool to make the conversions. Here are some of the common ones used in newsrooms.\n\n28.2.1 Tabula\nTabula.technology is a downloadable program that, once unzipped into your applications or document folder, runs in a browser. The most recent version is more than 5 years old, though, so it isn’t being actively updated or refined. Because it’s a Java-based program, it may not be possible to easily use it on all computers. I’m not sure it’s worth fiddling with if it doesn’t work on yours.\nHere’s a quick video of how Tabula works on this document:\n(I cut at least 5 minutes of waiting out of this video!)\n\n\n\n28.2.2 Cometdocs\nUsually, Cometdocs is one of the most reliable conversions. But even after setting up an account, this is what I got:\nAt times, Investigative Reporters and Editors has arranged for free professional accounts. Check if they still have the program if you’re a member.\n\n\n\n28.2.3 zamzar\nZamzar did quite well with this, producing a file that can be used because it kept the concept of two columns and didn’t smush rows together.\n\n\n\n28.2.4 Adobe Acrobat ($)\nEvery ASU student has an automatic account for the full version of Adobe Acrobat. The online version has limited capabilities, but it also allows you to download the full version. But in this instance, it failed miserably:\n\n\n\n\n\n\n\ninput\n\n\n\n\n\n\n\noutput\n\n\n\n\nFigure 28.2: Using Acrobat\n\n\nIt tried to replicate the way the data looks in the page, which smushed together the individual lobbyists even though they’re clearly on separate lines.\n\n\n28.2.5 Able2Extract ($)\nAble2Extract from Invetintech.com is an all-purpose PDF extractor and producer, with the professional version costing $200. It’s got a lot of options for tricky tables, and it also does OCR if necessary before trying to extract any information. (Only Acrobat on the above list does that as well.) It’s the one I use most frequently. In this case, it did nothing different than the free versions, but it also permits you to keep the position on the page instead of converting to an Excel or CSV file, making it easier if you want to manually parse the lines.\n\n\n28.2.6 Google Pinpoint’s Table Extractor\nGoogle Pinpoint is a service available only to journalists. You have to apply for an account and, for the time being, apply for the beta add-on.\nHaving Google Pinpoint is a great option if all you want to know is whether the same entity shows up across documents. It also provides free audio and video transcription, and free OCR of image documents. It’s similar to DocumentCloud, but is geared less at publishing documents and more at managing the collection of material vacuumed up in an investigation.\nFor now, it doesn’t work very well on our sample document. It’s just not the right form for it. It works best on collections of individual forms with headings , where one PDF is one form. An example of a good document for Pinpoint is a collection of “Suspected Illegal Alien Form” documents from AZDPS, where each box has a label and it’s not a table:"
  },
  {
    "objectID": "advanced-pdf.html#finishing-up",
    "href": "advanced-pdf.html#finishing-up",
    "title": "28  Working with PDF files",
    "section": "28.3 Finishing up",
    "text": "28.3 Finishing up\nUsing the csv file produced by Able2Extract, here’s one method for finishing up, using formulas in Google Sheets to figure out how to put together the pages. Here are the steps I took:\n\nRemove all empty rows, so that copying an pasting is easier.\nAd an ID column of sequential numbers before the first column.\nUse a formula to determine if the cell with the “date” is empty: =if (isblank (c2, \"No\", \"Yes\"))\nFor both the company name and the date: if the flag = “Yes”, then use the value on this this row in the appropriate column. If it’s “No”, use the value directly above the current cell. For example, =if( d2 = \"Yes\", b2, e1)\nConvert the formulas to values by copying, then pasting values only through Paste Special after selecting A1.\nRemove some of the extra rows from page headers\nRemove the rows that are company names , since we now have them next to the individuals, and remove the columns I worked off of.\n\n\nThis Google Sheet shows how some of the data was transferred from the converters, and the final spreadsheet that is in “tidy” format."
  },
  {
    "objectID": "advanced-pdf.html#use-a-program-instead",
    "href": "advanced-pdf.html#use-a-program-instead",
    "title": "28  Working with PDF files",
    "section": "28.4 Use a program instead",
    "text": "28.4 Use a program instead\nWe won’t go through all of the methods of using a program to deconstruct PDFs, but you’ll sometimes find that it’s easier to program it than to go through all of the manual steps. This Quarto document shows how you might process our example . There are a number of functions you’ve never seen in here before, since we’re working with vectors and lists to begin with rather than data frames."
  },
  {
    "objectID": "advanced-pdf.html#footnotes",
    "href": "advanced-pdf.html#footnotes",
    "title": "28  Working with PDF files",
    "section": "",
    "text": "Some documents have BOTH actual text and image text. In those cases, you’ll want to force any program to re-recognize it.↩︎\nIn a future chapter, we’ll look at how to split those into first and last.↩︎"
  },
  {
    "objectID": "advanced-regex.html#types-of-regular-expression-patterns",
    "href": "advanced-regex.html#types-of-regular-expression-patterns",
    "title": "29  Regular Expressions for pattern matching",
    "section": "\n29.1 Types of regular expression patterns",
    "text": "29.1 Types of regular expression patterns\n\n29.1.1 Literal strings\nThese are just letters, like “abc” or “Mary”. They are case-sensitive and no different than using text in a filter.\nYou can tell the regex that you want to find your pattern at the beginning or end of a line:\n  ^   = \"Find only at the beginning of a line\"\n  $   = \"Find only at the end of a line\"\n\n29.1.2 Wild cards\nA wild card is a character you use to indicate the word “anything”. Here are some ways to use wild cards in regex:\n    .      = \"any single character of any type\"\n    .?     = \"a possible single character of any type (but it might not exist)\"\n    .*     = \"anything or nothing of any length\"\n    .+     = \"anything one or more times\"\n    .{1,3} = \"anything running between 1 and 3 characters long\"\nRegular expressions also have wild cards of specific types. In R, they are “escaped” using two backslashes. In other languages and in the example https://regex101.com site they only use one backslash:\n      \\\\d   = \"Any digit\"\n      \\\\w   = \"Any word character\"\n      \\\\s   = \"Any whitespace (tab, space, etc.)\"\n      \\\\b   = \"Any word boundary\" (period, comma, space, etc.)\nWhen you upper-case them, it’s the opposite:\n      \\\\D = \"Anything but a digit\"\n\n29.1.3 Character classes\nSometimes you want to tell the regex what characters it is allowed to accept. For example, say you don’t know whether there is an alternative spelling for a name – you can tell the regex to either ignore a character, or take one of several.\nIn R, we saw that there were alternative spellings for words like “summarize” – the British and the American spellings. You could, for example, use this pattern to pick up either spelling:\n        summari[sz]e\nThe bracket tells the regex that it’s allowed to take either one of those characters. You can also use ranges:\n  [a-zA-Z0-9]\nmeans that any lower case, upper case or numeric character is allowed.\n\n29.1.4 Escaping\nBecause they’re already being used for special purposes, some characters have to be “escaped” before you can search for them. Notably, they are parentheses (), periods, backslashes, dollar signs, question marks, dashes and carets.\nThis means that to find a period or question mark, you have to use the pattern\n    \\\\. or\n    \\\\?\nIn the Regex101, this is the biggest difference among the flavors of regex – Python generally requires the least amount of escaping.\n\n29.1.5 Match groups\nUse parentheses within a pattern to pick out pieces, which you can then use over again. The end of this chapter shows how to do this in R, which is a little complicated because we haven’t done much with lists."
  },
  {
    "objectID": "advanced-regex.html#sample-data",
    "href": "advanced-regex.html#sample-data",
    "title": "29  Regular Expressions for pattern matching",
    "section": "\n29.2 Sample data",
    "text": "29.2 Sample data\nHere are three small text files that you can copy and paste from your browser into the regex101.com site. It’s a site that lets you test out regular expressions, while explaining to you what’s happening with them.\n\nA list of phone numbers in different formats\nA list of dates that you need to convert into a different form.\nA list of addresses that are in multiple lines, and you need to pull out the pieces. (Courtesy of IRE)\nA small chunk of the H2B visa applications from Arizona companies or worksites that has been kind of messed up for this demonstration, in tab-delimited format."
  },
  {
    "objectID": "advanced-regex.html#testing-and-examining-patterns-with-regex101",
    "href": "advanced-regex.html#testing-and-examining-patterns-with-regex101",
    "title": "29  Regular Expressions for pattern matching",
    "section": "\n29.3 Testing and examining patterns with Regex101",
    "text": "29.3 Testing and examining patterns with Regex101\nRegex 101 is a website that lets you copy part of your data into a box, then test different patterns to see how they get applied. Regular expressions are very difficult to write and to read, but Regex101 lets you do it a little piece at a time. Just remember that every time you use ‘' in regex101, you will need’\\` in R.\n\n29.3.1 Looking for specific words or characters\nThe easiest regex is one that has just the characters you’re looking for when you know that they are the right case. They’re called literals because you are literally looking for those letters or characters."
  },
  {
    "objectID": "advanced-regex.html#practice-1-extract-date-parts",
    "href": "advanced-regex.html#practice-1-extract-date-parts",
    "title": "29  Regular Expressions for pattern matching",
    "section": "\n29.4 Practice #1: Extract date parts",
    "text": "29.4 Practice #1: Extract date parts\nIn Regex 101, change the “Flavor” to “Python” – otherwise, you have to escape more of the characters.1\nWe want to turn dates that look like this:\n  1/24/2018\ninto something that looks like this:\n 2008-1-24\nCopy and paste these numbers into the regex 101 window:\n9/7/2017\n9/11/1998\n9/11/2017\n9/19/2018\n9/15/2017\n10/13/2019\n11/3/2017\nFirst, you can use any digit using the pattern “. Try to do it in pieces. First, see if you can find one or two digits at the beginning of the line.\n  ^\\d{1,2}\nTry coming up with the rest of it on your own before you type in the answer:\n  ^\\d{1,2}.\\d{1,2}.\\d{4}\n(This works because regular expressions normally are “greedy”. That is, if you tell it “one or two digits”, it will always take two if they exist.)\nPut parentheses around any pieces that you want to use for later:\n\n\n\n\n\nNow each piece has its section, numbered 0 for the whole match, and then 1-3 for the pieces."
  },
  {
    "objectID": "advanced-regex.html#practice-2-extract-pieces-of-phone-numbers",
    "href": "advanced-regex.html#practice-2-extract-pieces-of-phone-numbers",
    "title": "29  Regular Expressions for pattern matching",
    "section": "\n29.5 Practice #2: Extract pieces of phone numbers",
    "text": "29.5 Practice #2: Extract pieces of phone numbers\nHere are some phone numbers in different formats:\n    623-374-1167\n    760.352.5212\n    831-676-3833\n    (831)-676-3833\n    623-374-1167 ext 203\n    831-775-0370\n    (602)-955-0222  x20\n    928-627-8080\n    831-784-1453\nThis is a little more complicated than it looks, so try piecing together what this one says:\n      (\\d{3})[-.\\)]+(\\d{3})[-.]+(\\d{4})\n(This won’t work in the “substitute” area – it would be easier to create a new variable with the results than to replace the originals.)\nAnything within parentheses will be “captured” in a block."
  },
  {
    "objectID": "advanced-regex.html#practice-3-extract-address-pieces",
    "href": "advanced-regex.html#practice-3-extract-address-pieces",
    "title": "29  Regular Expressions for pattern matching",
    "section": "\n29.6 Practice #3: Extract address pieces",
    "text": "29.6 Practice #3: Extract address pieces\nHere are a few lines of the data from Prof. McDonald’s tutorial, which you can copy and paste to go his exercise. (He uses the Javascript version of regular expressions, but for our purposes in this exercise, it doesn’t matter which one you use. If you choose Python, you’ll have one extra step, of putting a slash () before the quotes. The colors work a little better if you leave it on the default PHP method.)\n    \"10111 N LAMAR BLVD\n    AUSTIN, TX 78753\n    (30.370945933000485, -97.6925542359997)\"\n    \"3636 N FM 620 RD\n    AUSTIN, TX 78734\n    (30.377873241000486, -97.9523496219997)\"\n    \"9919 SERVICE AVE\n    AUSTIN, TX 78743\n    (30.205028616000448, -97.6625588019997)\"\n    \"10601 N LAMAR BLVD\n    AUSTIN, TX 78753\n    (30.37476574700048, -97.6903937089997)\"\n    \"801 E WILLIAM CANNON DR Unit 205\n    AUSTIN, TX 78745\n    (30.190914575000477, -97.77193838799968)\"\n    \"4408 LONG CHAMP DR\n    AUSTIN, TX 78746\n    (30.340981111000474, -97.7983147919997)\"\n    \"625 W BEN WHITE BLVD EB\n    AUSTIN, TX 78745\n    (30.206884239000487, -97.7956469989997)\"\n    \"3914 N LAMAR BLVD\n    AUSTIN, TX 78756\n    (30.307477098000447, -97.74169675199965)\"\n    \"15201 FALCON HEAD BLVD\n    BEE CAVE, TX 78738\n    (30.32068282700044, -97.96890311999965)\"\n    \"11905 FM 2244 RD Unit 100\n    BEE CAVE, TX 78738\n    (30.308363203000454, -97.92393357799966)\"\n    \"3801 JUNIPER TRCE\n    BEE CAVE, TX 78738\n    (30.308247975000484, -97.93511531999968)\"\n    \"12800 GALLERIA CIR Unit 101\n    BEE CAVE, TX 78738\n    (30.307996778000472, -97.94065088199966)\"\n    \"12400 W SH 71 Unit 510\n    BEE CAVE, TX 78733\n    (30.330682136000462, -97.86979886299969)\"\n    \"716 W 6TH ST\n    AUSTIN, TX 78701\n    (30.27019732500048, -97.75036306299967)\"\n    \"3003 BEE CAVES RD\n    ROLLINGWOOD, TX 78746\n    (30.271592738000436, -97.79583786499967)\""
  },
  {
    "objectID": "advanced-regex.html#on-your-own",
    "href": "advanced-regex.html#on-your-own",
    "title": "29  Regular Expressions for pattern matching",
    "section": "\n29.7 On your own",
    "text": "29.7 On your own\nThis is a small list of H2A visa applications, which are requests for agricultural and seasonal workers, from companies or worksites in Arizona. Try importing it into Excel, then copying some of the cells to practice your regular expression skills.\nYou might try:\n\nFinding all of the LLC’s in the list (limited liability companies) of names. (You should turn on the case-insensitive flag in Regex 101 or set that flag in your program if you do.)\nSee how far you can get in standardizing the addresses.\nSplit the city, state and zip code of the worksite.\nFind all of the jobs related to field crops such as lettuce or celery."
  },
  {
    "objectID": "advanced-regex.html#footnotes",
    "href": "advanced-regex.html#footnotes",
    "title": "29  Regular Expressions for pattern matching",
    "section": "",
    "text": "Each language implements regular expressions slightly differently – when you begin to learn more languages, this will be one of the first things you’ll need to look up.↩︎"
  },
  {
    "objectID": "advanced-openrefine.html#installing-openrefine",
    "href": "advanced-openrefine.html#installing-openrefine",
    "title": "30  Open refine walkthrough",
    "section": "30.1 Installing OpenRefine",
    "text": "30.1 Installing OpenRefine\nDownload the latest version from the OpenRefine website and follow the instructions there to install.\n\nMac users: Unidentified developer\nFor Mac users, when you try to open it, it may tell you that you can’t because it’s from an unidentified developer. Go to the Applications folder on your computer, and use the CTL button before you click on the OpenRefine diamond. Once you successfully open it once, the program is whitelisted on your computer and you shouldn’t have to do it again.\n\n\nWindows users\nWindows users should take the “Windows kit with embedded Java” rather than trying to install the right version of Java yourself. You may have to go through the Windows Defender settings to set up an exclusion that allows Windows to run it, or get your system administrator to allow you to use it. You should only have to set this up once.\n\n\nLimitations\nOpenRefine works entirely in memory, and will start choking pretty quickly once you reach the 100,000 to 200,000 row range. You might need to partition your data or pull out just the columns you want to work on in order to clean a large dataset.\n\n\nFollowing the walkthrough\nSteps that you should take are shown in bullet points. The rest is explanation."
  },
  {
    "objectID": "advanced-openrefine.html#starting-openrefine",
    "href": "advanced-openrefine.html#starting-openrefine",
    "title": "30  Open refine walkthrough",
    "section": "30.2 Starting OpenRefine",
    "text": "30.2 Starting OpenRefine\nOpenRefine is a Java-based program that runs inside your browser, but lives on your computer instead of the internet. It runs much better in Chrome than in Safari.\n\nFind the OpenRefine app on your computer, and double-click. When you first start it up, it will open with your default browser.\nIf it’s not Chrome, open a Chrome window and type the local address into its address bar: localhost:3333 or 127.0.0.1:3333\n\nOnce it’s open in your browser, you’ll see something that looks like this:\n\n\n\nfirst screen"
  },
  {
    "objectID": "advanced-openrefine.html#importing-data",
    "href": "advanced-openrefine.html#importing-data",
    "title": "30  Open refine walkthrough",
    "section": "30.3 Importing data",
    "text": "30.3 Importing data\nOpenRefine works best on comma- or tab-delimited data. To create a dataset like that from R, use the function write_csv(\"path-to-csv-file.csv\") , which can be used like any other verb after a continuation pipe.\n\nTo follow along with this tutorial, download the sample data file and save it into your R project folder .\nIn OpenRefine, look on the left of the screen and choose Create Project-&gt;Choose files, and navigate to the folder where you saved it. Choose the file you just saved, and consider changing the name of the project to something other than the file name. I called mine “ppp refined”.1\n\n\n\n\nimport screen\n\n\nUsually, the default selections at the bottom work. They’re pretty self-explanatory, but if your data looks weird when it is imported, take a look for some options here.\nI usually keep everything as “text” because OpenRefine doesn’t work as well with dates as numbers as it does with text. In this case, I’ve removed the amounts and dates from the data that we’re working with.\n\nClick the “Create Project” button to continue.\n\n\nReturning to your project\nYou can also use that startup screen to re-open a project you’ve previously worked on. You don’t need to save it – OpenRefine saves it for you in the background. Use the Open tab to find your projects. If you need to move your project to another computer, you can use the Export options once it’s open.\n\n\nRename or copy columns\nEventually, you’ll want to re-import the results of your cleaning to your R or other programming environment, and it will cause you no end of trouble if you can’t match it up with the original data, or if columns have the same names.\n\nBefore you do any work on a column, be sure to either rename it or copy it into a new column. Someday you’ll thank me for this.\n\nTo rename something that is relatively simple to clean, such as the project_county in the PPP data, use the dropdown menu, and choose Edit column-&gt;Rename this column . I usually call it whatever the column name started as with a suffix _refined.\n\nRename the columns project_county and project_state now.\n\nTo make a copy, use the dropdown menu Edit column-&gt;Add column based on this column and give it a name."
  },
  {
    "objectID": "advanced-openrefine.html#facets",
    "href": "advanced-openrefine.html#facets",
    "title": "30  Open refine walkthrough",
    "section": "30.4 Facets",
    "text": "30.4 Facets\nFor many text columns, you can use facets to edit your data. Under your newly named project_state_refined, choose Facet-&gt;Text facet to get a menu on the left. It will then show you the values it found in that column, and the number of times each one appears, much like at group_by query.\nOpenRefine only acts on rows that are selected, which makes using facets and filtering so powerful. You never have to worry that you’re changing something that you don’t see.\n\n\n\nfacet\n\n\n\nTo edit one by one, click on the state name you want to change, and choose the Edit option. You might combine all of the other states into an “OTHER” state.\n\nA faster way to change everything that is selected at once is through the column’s menu.\n\nSelect “AZ” from the facet list, then choose invert from the top of the box to select everything except AZ.\nUnder the column dropdown, choose Facet-&gt;Edit Cells-&gt;Transform, and type “OTHER” (with the quotes) into the value box. (If you forget the quotes, you’ll see it come up with Null as an answer because it’s looking for a variable called other, not the word “other”)\nWith the same selection on, change the county name to “OUT OF STATE” using the same method."
  },
  {
    "objectID": "advanced-openrefine.html#clustering",
    "href": "advanced-openrefine.html#clustering",
    "title": "30  Open refine walkthrough",
    "section": "30.5 Clustering",
    "text": "30.5 Clustering\nOne reason a lot of reporters use OpenRefine is to take advantage of its fuzzy-matching to clean items like names and addresses. It provides about a dozen different algorithms that provide suggestions on ways to change unstandardized values in a column that often make a lot of sense.\nThis walkthrough will work on the city name.\n\nMake a copy of the city and call it borrower_city_refined by using the dropdown Edit column-&gt;Add column based on this column . Otherwise you risk over-writing things incorrectly, and you’ll have to try to figure out where you went wrong.\n\n\n\n\nadd column\n\n\n\nNow create a facet on this new column.\n\nYou should see all of the bad values that were entered into that column by lenders and applicants. No one cared whether it was a valid city name.\n\nClustering details\nYou’ll often use many of the clustering approaches, then finish up with some other filters and facets when the clustering doesn’t work.\nSome algorithms work better than others – some don’t catch natural clusters, and others find a lot of things to cluster that shouldn’t be combined. It’s unimportant for us what they actually do behind the scenes. Insetad, just know that they are different methods to find near-exact matches among character values.\nOne might look for all words that have the same letters but in any order, another might look for everything that matches the shortest phrase, and another might look for any 2 words in common. The order suggested by OpenRefine generally goes from the most strict to the most forgiving method, and from the easiest on your computer to the most resource-intensive. 2\n\nOn the facet, press the button that says “Cluster”. The first one chosen, called “key collision” by “fingerprint”, doesn’t come up with any suggestions.\nUse the dropdown menu in the Keying Function box to choose the next option, “ngram-fingerprint”, and leave the option at 2.\n\n\n\n\ncluster\n\n\nNow you can see how close some of the choices are.\n\nLook through your choices, and select any that you want to combine. OpenRefine will change the least popular entry to the most popular, but you can change what you want it to be in the box provided. (At first, you’ll probably “Select all” and then just un-select the bad ones.)\nKeep going with other clustering methods, turning off the ones you’re not sure should be combined and editing the value you want it to be. After exploring all of the options, I often end by going back to the ngram-fingerprint method and changing it to Ngram size of 1. That often catches the last remnants of one-word cities.\n\n\n\n\nngram\n\n\n\nSpend about 10-15 minutes cleaning up the cities, and see how close you can get to a good list.\n\n\nPro tip: Don’t try to do everything through clustering. You can’t really fine-tune the choices, so just stop when it’s getting close. You can then do the remaining things you care about manually. Try not to get too obsessed with getting it perfect. You’ll spend days on things that won’t matter, especially in early stages of your reporting when you don’t know what you care about.\n\n\n\nFacet for long entries\nIn this list, though, there are addresses that are listed as cities. We may just want to remove those city names entirely, since we don’t really know what they are. There are several ways you might do this:\n\nUse the Facet-&gt;Customized facets-&gt;Text length facet menu item to create a facet by string length. Use the scrollbar to choose, say, more than 20 or 25 characters.\nGo through the list and select the ones that should not be changed, then\nInvert the selection and use the Transform menu to change the city to “Unknown”.\n\nThat got rid of most of them. You can go back to the original facet and select the ones at the top and change them as well.\nThe list isn’t perfect, but it’s much better than what we started with."
  },
  {
    "objectID": "advanced-openrefine.html#filtering",
    "href": "advanced-openrefine.html#filtering",
    "title": "30  Open refine walkthrough",
    "section": "30.6 Filtering",
    "text": "30.6 Filtering\nEven after fixing all of the cities we can through clustering and faceting, there are usually some bad entries left over.\n\n30.6.1 Simple filter\n\nInstead of a Text Facet, choose Text filter from the dropdown menu. Generally, I use regular expressions in this box so I can control where in the column my target word or letters falls.\nTry filtering for ^Phoe after checking the “regular expression” box, and you’ll see a few stray entries for Phoenix that you can change in the facet window.\n\nI tend to do this for anything I really care about getting right, such as larger cities or towns that I am going to report on. It’s often not worth the time to get a large list 100% accurate.\n\n\nComplex filter\nA complex filter will help you tag items for later use. One example is to tag items that contain apartment numbers, suite numbers or floor numbers after the address. Eventually, we may want to split the address column in two – one piece for the street address, and one piece for the detailed location.\nFiltering for them first ensures that you won’t inadvertently split something that hasn’t met your condition in the first place.\nRegular expressions work here the same way they did in str_detect in R, except that there is one backslash rather than two for special characters.\n\nHere is an example of how to find anything that has the word Suite or Ste after at least 10 other characters: .{10,}\\bS(ui)?te\\b\n\n\n\n\nexample regex\n\n\nUsing these filters, we can start splitting the values into their pieces.\n\n\nSplit by regex\n\nChoose Edit column-&gt;Split into several columns… from the dropdown menu, then use the regular expression as the “split” character. Make sure to un-check the “Guess cell type” and “Remove this column” boxes.\n\nYou can go back and look for entries that have “floor” or “apt” the same way, and split them in subsequent steps.\n\n\nSplit using OpenRefine programming language\nThat took care of the ones that had Suite numbers in them. Now we have to get the ones that have Apartment numbers in them. Use a regular expression to filter for the apartment numbers, and a Customized Facet-&gt;Facet by null to pick out the ones that haven’t already been split by our previous step.\nOpenRefine has its own special language called GREL, which is really hard to use. But we’ll have to use it for this set because we’ve already split something else. This time, we have to put a value in the two columns based on pieces of a regular expression.\n\nWith your filter on, choose borrower_address_refined_2’s Transform menu. I’ll just show you how to do this, since it’s hard to explain:\n\n-In the “Expression” box, copy and paste this code:\ncells[\"borrower_address_refined\"].value.match(/(.+)?\\b(Apt .*)\\b$/)[1]\nThis tells OpenRefine to extract two pieces from the original address column: The beginning (.+)?, the word “Apt” followed by anything at the end. The [1] tells OpenRefine to take the 2nd of those (its counting starts at zero, not one) and put it in the same column that we used for the Suite numbers. (NOTE: The GREL regular expressions are indicated by the two slashes at the beginning and end of the phrase (/). This is typical for regular expressions, and it distinguishes them from plain text.)\n\nRepeat the process, in the borrower_address_refined_1 column’s transformation, and use the index [0] at the end to get the cleaned street address."
  },
  {
    "objectID": "advanced-openrefine.html#finishing-up",
    "href": "advanced-openrefine.html#finishing-up",
    "title": "30  Open refine walkthrough",
    "section": "30.7 Finishing up",
    "text": "30.7 Finishing up\n\nTry using the clustering and other transformation options to clean up the borrower names. Only change the ones you are sure should be combined.\n\nOnce you’re done, export the project to a new .csv file, and then import it into R. You can then select the cleaned up columns and the loan_id , then join it back to the original PPP data frame. Now you have a good set of cities, better ways to look at popular addresses, etc.\nIf you want to try another exercise, here is an old workshop I did for IRE in 2016."
  },
  {
    "objectID": "advanced-openrefine.html#footnotes",
    "href": "advanced-openrefine.html#footnotes",
    "title": "30  Open refine walkthrough",
    "section": "",
    "text": "Note: It lives in a different place than your folder on your computer. It’s actually a little hard to find, but you shouldn’t have to unless you’re moving between computers. You can always export all of the steps so that you can do them over on a new computer.↩︎\nThere is something called “reconciliation” in OpenRefine that tries to find matches in OpenCorporates lists of companies, or in a list that you provide. We’re not getting into that.↩︎"
  },
  {
    "objectID": "advanced-scrape1.html#where-reporters-get-data",
    "href": "advanced-scrape1.html#where-reporters-get-data",
    "title": "31  Scraping without programming",
    "section": "31.1 Where reporters get data",
    "text": "31.1 Where reporters get data\nReporters can get data from people, using FOIA, asking nicely or by finding a whistleblower to leak it. But we often also get data from publicly published sources, usually on the web.\nThere are three ways to get data from the web:\n\nDownload it, or use an API1. In these cases, the makers of the data have specifically offered it up for your use in a useful format. We’ll cover API’s later, but don’t forget to study the site for a download link or option. If there isn’t one on a government site, you might call the agency and ask that they add one. They might just do it. We’ve been using downloadable data throughout this book.\nFind it on your browser. Often the person making the website delivers structured data to your browser as a convenience. It’s easier for them to make interactive items on their page by using data they’ve already delivered in visualizations and tables. It also reduces the loads on their servers. These are usually in JSON format. You might be able to find it right on your computer. It’s a miracle!\nScrape it. This set of chapters goes over how to scrape content that is delivered in HTML form – a web page. There would be other methods to scrape PDFs, which can be easy or hard."
  },
  {
    "objectID": "advanced-scrape1.html#a-json-miracle-walkthrough",
    "href": "advanced-scrape1.html#a-json-miracle-walkthrough",
    "title": "31  Scraping without programming",
    "section": "31.2 A json miracle walkthrough",
    "text": "31.2 A json miracle walkthrough\nThis walkthrough shows you how to find some json in your browser. Use the Chrome browser for this - Firefox and Safari also have similar features, but they look different.\nHere is a simple page that will show you what the json looks like and how to extract it. This is what a human sees:\n\nThe table of presidents is actually produced using a small javascript program inside the HTML that walks through each item and lists it as a row.\n\nOpen the page in Chrome, then right-click anywhere on the page and choose “Inspect”. It may appear as just two items - the “head” and the “body”. But notice the little arrows - they show you that there is more content underneath. For now, we’ll ignore this, but it will be important later.\nChoose the Network tab, then re-load the page.\n\n\n\n\ninspect network\n\n\nThis shows you everything that the browser is attempting to load into your browser. (You may not see the “favicon” item. I have no idea why it’s showing up on mine - it’s not been requested!)\nYou can ignore most of this. Importantly, the “simple-page.html” is the actual page, and the “simple.json” is the data! Click on the simple.json row, then choose the “Response” tab:\n\n\n\nsimple json\n\n\nThat’s what json looks like - a list of rows within an item called “presidents”, each identified by the name of the column they’ll become.2\n\nRight-click on the simple.json file name, and you’ll see a lot of options. Choose the one that says Copy-&gt;Copy link address.\nGo to a new browser window and search for “json to csv”. This one is one that I often see first.\nPaste your copied link in the tab that says, “Enter URL” and press “Load URL”. You’ll see an option to copy the result as a csv file!\n\n\n\n\njson to csv\n\n\n\n31.2.1 A harder example\nThat was easy! But it’s also trivial. However, this method can often save you from having to page through results of a page. One example is the Maricopa County nightly list of mugshots, which may have several hundred new entries each day. Here’s what today’s looked like on a desktop browser (it looks different on a smaller screen).3:\n\n\n\nmcso list\n\n\nIt looks like you’d have to go through each of the five pages to get all of the names of people who were booked into jail that night, but often a json file contains all of them – they’re just showing you one page at a time.\n\nThis page won’t let you right-click to get the inspector. Instead, on a Mac, press Opt-Cmd-C to open the inspector window. (I think it’s Shft-Ctl-C on Windows, but I’m not sure.)\n\nThis looks like a mess! Don’t worry. Switch to the Network tab, and re-load the page. This time, there are dozens of different things that get loaded on your page, and none of them are obviously json. You have a few strategies to find it.\n\nPress the “Fetch/XHR” tab to see if it shows up there. Use the “Preview” tab to look at what each of them is, and, miracle of miracles, it’s the third one on the list! Even better, it has all 425 entries! (It looks like they’re split into groups of 100, but they really aren’t.)\n\n\n\n\nmiracle 1\n\n\n\nRight-click on the name of the file, and choose Copy-&gt;Copy link, and repeat the process above to convert it to a CSV file.\n\n\n\n\n\n\n\nNote\n\n\n\nIn 2022, the county began limiting the number of results to some random list of 300. It appears that searching for an inmate only checks those first 300 results. (It could have been a coincidence that there were exactly 300 inmate on Jan 3, 2023, but I doubt it.)\n\n\n\n\n31.2.2 An even harder example\nThe New York Times maintains a map with the vaccination rates for various demographic groups by county on its website. At first, the Times didn’t provide a Github repo for the data. How can we extract the data from this map?\nThe easiest way would be to see if it contains a json miracle!\n\nOpen your inspector panel\nCopy and paste the link to the map page, and open it in your Chrome browser with the inpsectors showing.\nSwitch to the network tab. (If you opened the map before opening the inspector, reload it now. )\n\nYikes! The “Fetch /XHR” button doesn’t help us much here. There are too many different json files to check. We could look one by one and see if they’re right, but sometimes that’s just too hard. Instead,\n\nOpen the “Search” button on your inspector (it’s different from the Filter), and type in a county name (this one is “Maricopa”). You should see only a few of them. The most promising is the “doses_county.json”, so try that one first:\n\n\n\n\nnyt example\n\n\nThis time, it’s hard to find the item in the list of files in the browser. Instead, right-click in the “Preview” area, and copy the object. You can paste that into the box in the JSON to csv converter instead of entering a URL."
  },
  {
    "objectID": "advanced-scrape1.html#no-json-no-problem-maybe",
    "href": "advanced-scrape1.html#no-json-no-problem-maybe",
    "title": "31  Scraping without programming",
    "section": "31.3 No json? No problem (maybe)",
    "text": "31.3 No json? No problem (maybe)\nYou may not be able to find a json file – either it’s too hard to find, or it’s not useful, or it doesn’t exist. For a simple page, there’s no problem getting the data in Google Sheets. (This is one area where Excel lags behind Google Sheets.) We’ll go into HTML tags in more depth in the next chapter, but if your data is held in a table or structured list, you can import it directly into Google sheets.\nNote that this trick is really only useful if your page doesn’t change a lot, or if you just want a one-time snapshot. It doesn’t automatically update, and I don’t know how to capture changes – it would involve a Google scripting program, which I don’t know how to do. I’ve never learned because I usually only gather data for my own use, and it’s easier to program it than to finagle Google Sheets.\nThe trick to using Google Sheets is to find a table tag (&lt;table&gt;) or a list tag (&lt;ul&gt; or &lt;ol&gt;) that contains the data you want.\nHere’s an example, taken from a previous year’s MAIJ cohort: Reporters wanted to know whether Scottsdale was relatively unique in its city council structure, which has no districts. All members are at-large. Some research suggests that this disempowers non-white or less wealthy areas, because more privileged residents are often more active in local politics.\nThe reporters knew it was rare, but one question nagged at them: Was Scottsdale the largest city in the nation with a purely at-large council? That would make a nice tidbit for the story, but it wasn’t worth a major data collection endeavor.\nBallotpedia, a crowdsourced website with information on local governments, had collected a page of city council officials in the 100 largest cities in the US. Extracting this information into a structured table, then using regular expressions, could help make that a relatively simple job. This could even be done in Google Sheets, which also has a regular expression implementation. Because it’s so rare, just getting a list of cities that had no district or ward membership would give them a place to start looking up populations.\nThis information is stored in an HTML table, identified by the “\n\n” element.\nRight-click on the page, and open your inspector. It looks like a mess, but you can search for tables using a simple “Find” using Cmd (or Ctl) -F.\nYou may notice it says you can find by string, selector or XPath.\nIn the box, enter “&lt;table” (with the opening “&lt;”, but no closing one.). You should see “1 of 12” in the result box. As you go through the list, the currently selected table will be highlighted. When you hit “3 of 12”, you’ll notice that the browser has selected the table you want. That’s the information we need.\nOpen a Google Sheet, and copy the page URL to cell A1. This just makes it easier to construct the formula to extract the table.\nIn cell A3, enter the following formula:\n      \n      =ImportHTML(A1, \"table\", 3)That means, “Go to the web address listed in cell A1, look for”table” tags, then return whatever is in the third one.”\n\n\ngooglesheet\n\nWhen you hit “enter” the whole table will populate on your Google Sheet. Unfortunately, you can’t get the link to the city from this method, which means you don’t have a good way to extract a city name. We’ll come back to this when we go to scraping in R. (There is a way to get this in Google Sheets, but it’s not very reliable – it will choke as soon as it encounters a missing URL.)But if you just need the text of a table or list in a spreadsheet, this is an easy way to get it. (To get a list from an “ol” or “ul” (ordered and unordered lists) tag, use “list” instead of “table”.)\n31.4 Recap\nSometimes – especially on modern websites that create interactive elements on the fly – the data you need is already sitting on your computer. In fact, it’s quite hard to scrape those in other ways because the HTML is created when it’s loaded into your browser.\nBut when it’s not, there may be another simple way to get the content.\nThe problem is that getting the content without programming can leave you unsatisfied because you can only get the text, not any of the underlying information. The next chapter shows you one method of getting more information from a web page using CSS selectors.\nI sometimes use a Chrome extension called “Chrome Scraper” to get slightly more complex information out of a website, which uses a language called XPath to parse a web page. It’s harder than the CSS selector method, though, so I’m skipping it for now.\n\n\n\n\n\n“application programming interface”↩︎\nIn R, our style was to name columns in lower case with words separated by underscores. In Javascript, the custom is usually called “camel case”, with words smushed together and the first letter of each upper cased. It’s just a custom, not a rule.↩︎\nI’m hiding names of people to the extent possible, and won’t list them in text here - they’ll only be in the images. Instead, I’ll show pictures of how to find the json when a name is necessary. Although this book is probably not indexed by Google, it’s possible that it could be some day, and I don’t want their names to show up in a Google search.↩︎\n\n\n  \n      \n         30  Open refine walkthrough\n                \n  \n  \n      \n        32  Introduction to scraping in R \n      \n  \n\n  \n    Data reporting for investigative journalism, Spring 2023 was written by Sarah Cohen   \n    \n       \n    \n    Produced with Quarto"
  },
  {
    "objectID": "advanced-scrape1.html#recap",
    "href": "advanced-scrape1.html#recap",
    "title": "31  Scraping without programming",
    "section": "31.4 Recap",
    "text": "31.4 Recap\nSometimes – especially on modern websites that create interactive elements on the fly – the data you need is already sitting on your computer. In fact, it’s quite hard to scrape those in other ways because the HTML is created when it’s loaded into your browser.\nBut when it’s not, there may be another simple way to get the content.\nThe problem is that getting the content without programming can leave you unsatisfied because you can only get the text, not any of the underlying information. The next chapter shows you one method of getting more information from a web page using CSS selectors.\nI sometimes use a Chrome extension called “Chrome Scraper” to get slightly more complex information out of a website, which uses a language called XPath to parse a web page. It’s harder than the CSS selector method, though, so I’m skipping it for now."
  },
  {
    "objectID": "advanced-scrape1.html#footnotes",
    "href": "advanced-scrape1.html#footnotes",
    "title": "31  Scraping without programming",
    "section": "",
    "text": "“application programming interface”↩︎\nIn R, our style was to name columns in lower case with words separated by underscores. In Javascript, the custom is usually called “camel case”, with words smushed together and the first letter of each upper cased. It’s just a custom, not a rule.↩︎\nI’m hiding names of people to the extent possible, and won’t list them in text here - they’ll only be in the images. Instead, I’ll show pictures of how to find the json when a name is necessary. Although this book is probably not indexed by Google, it’s possible that it could be some day, and I don’t want their names to show up in a Google search.↩︎"
  },
  {
    "objectID": "advanced-scrape2.html#understanding-a-web-page-and-its-structure",
    "href": "advanced-scrape2.html#understanding-a-web-page-and-its-structure",
    "title": "32  Introduction to scraping in R",
    "section": "\n32.1 Understanding a web page and its structure",
    "text": "32.1 Understanding a web page and its structure\nWeb pages are written in HTML, even if they don’t have “html” at the end of the file name.\nHTML is like an upside-down tree. It has a trunk, which is an &lt;html&gt; tag, then two main branches: &lt;head&gt; and &lt;body&gt;. The content of the page branches out from the body tag:\n\n\nDatacamp html tree\n\nAll of HTML is just text. The tags tell your browser how to render each element, while attributes give them extra information, like the URL of a link, or a formatting class.\nWe can navigate the tree using RVest.\n\n\nOpen or create a project in RStudio, and create a new document. You can do this as a new markdown document, or as an R Script.\nThe code to load two libraries:\n\n\n#| label: setup-scrape2\n#| message: false \n#| warning: false\n#| echo: true\n\nlibrary(tidyverse)\nlibrary(rvest) \n\n\nAnd run your setup chunk.\n\n\nThe library rvest splits up the tree into its distinct elements, retaining the structure of the tree. The read_html() function takes a chunk of text, a page saved on your computer, or a page on the internet and parses it into its pieces.\nWe’re going to parse the page using “css selectors”, which tells the program how to navigate the page. The css selector can use the tag , an attribute, or both to find elements on the page. In this case, there is only one table, so we can just find one element using the “table” tag.\nThis method of scraping doesn’t work if the page was created on the fly by executing a Javascript program on your browser, the way that the simple page in the last chapter did. Those pages usually have a json dataset that you can grab more easily.\nHere’s what the page looks like when rendered, with the full tree shown on the right.\n\n\nfull page\n\nThis code parses the simple page at the address shown into its pieces, and save the result as my_htmlYou may notice that I’ve broken up the code to do one thing at a time. First, it saves the address in a variable called “url”. Then it uses the same piping we used in data work.1\n\n# label: readpres\n# echo: true\n# eval: false\n\nurl &lt;- \"https://cronkitedata.s3.amazonaws.com/docs/presidents.html\"\n\nmy_html &lt;-\n  url |&gt;  \n  read_html()\n\n\nprint(my_html)\n\n{html_document}\n&lt;html&gt;\n[1] &lt;head&gt;\\n&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8 ...\n[2] &lt;body&gt;\\n   &lt;h1&gt;A heading&lt;/h1&gt;\\n   &lt;p class=\"intro\"&gt; This is  a paragraph  ...\n\n\nThis is a complex object, and you’re only seeing the beginning of it – the two elements that are at the top of the tree. You’ll notice that there is a new object that is a data type called a list rather than a data frame in you environment. Lists are used to store complicated structures that don’t fit neatly into rectangle.\nTo find any element, like the table, use its tag in an html_node() . To find all of the elements of a type, make it plural, like html_nodes().2\nUse the tag name or CSS selector to get just a piece of the page.\n\nmy_html |&gt;\n html_element(\"body\") \n\n{html_node}\n&lt;body&gt;\n[1] &lt;h1&gt;A heading&lt;/h1&gt;\n[2] &lt;p class=\"intro\"&gt; This is  a paragraph with italic&lt;/p&gt;\n[3] &lt;div&gt;\\n     &lt;p&gt; This is a simple table&lt;/p&gt;\\n     &lt;table&gt;\\n&lt;thead&gt;&lt;tr&gt;\\n&lt;t ...\n\n\nTo get all of the paragraphs, make the command plural. Note how you now get the HTML of the selected elements in their entirety.\n\nmy_html |&gt;\n  html_elements (\"p\")\n\n{xml_nodeset (2)}\n[1] &lt;p class=\"intro\"&gt; This is  a paragraph with italic&lt;/p&gt;\n[2] &lt;p&gt; This is a simple table&lt;/p&gt;\n\n\nAnd to get everything with a class of “intro”, use a period to indicate a class, and convert it to text using the html_text function, asking R to remove extra whitespace with the “trim” argument.\n\nmy_html |&gt;\n  html_elements (\".intro\") |&gt;\n  html_text (trim=T)\n\n[1] \"This is  a paragraph with italic\"\n\n\nA special type: table\nTables are so commonly scraped that rvest has special way to extract the values, just as we did in Google Sheets, which puts it right into a data frame:\n\nmy_html |&gt;\n  html_element (\"table\")  |&gt;\n  html_table ()\n\n\n\n  \n\n\n\nThe singular version of html_element() picks out the first piece that matches the selector. The plural version would result in a list of all of them, from which you can select the number you want using the odd syntax .[[n]], where “n” is the table number.\nA harder example: Ballotpedia\nHere’s an example using the ballotpedia page we used in the last section:\n\nurl &lt;-\"https://ballotpedia.org/List_of_current_city_council_officials_of_the_top_100_cities_in_the_United_States\"\n\nballotpedia &lt;- \n  url |&gt;\n  read_html() |&gt;\n  html_elements(\"table\")\n\nprint (ballotpedia)\n\n{xml_nodeset (12)}\n [1] &lt;table class=\"infobox\" style=\"text-align: center; width:200px\"&gt;&lt;tbody&gt;\\n ...\n [2] &lt;table class=\"bptable sortable collapsible collapsed\" style=\"background: ...\n [3] &lt;table class=\"bptable gray sortable\" id=\"officeholder-table\" style=\"widt ...\n [4] &lt;table class=\"wikitable;\" style=\"width=100%\"&gt;&lt;tbody&gt;\\n&lt;tr&gt;\\n&lt;th colspan= ...\n [5] &lt;table class=\"navbox\" cellspacing=\"0\" style=\";\"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=\"pa ...\n [6] &lt;table cellspacing=\"0\" class=\"nowraplinks collapsible autocollapse\" styl ...\n [7] &lt;table class=\"navbox\" cellspacing=\"0\" style=\";\"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=\"pa ...\n [8] &lt;table cellspacing=\"0\" class=\"nowraplinks collapsible autocollapse\" styl ...\n [9] &lt;table class=\"navbox\" cellspacing=\"0\" style=\";\"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=\"pa ...\n[10] &lt;table cellspacing=\"0\" class=\"nowraplinks collapsible autocollapse\" styl ...\n[11] &lt;table class=\"navbox\" cellspacing=\"0\" style=\";\"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=\"pa ...\n[12] &lt;table cellspacing=\"0\" class=\"nowraplinks collapsible autocollapse\" styl ...\n\n\nLooking at this, we have several ways to get at the proper table. We can pick the third element that we just got:\n\nballotpedia[[3]]\n\n{html_node}\n&lt;table class=\"bptable gray sortable\" id=\"officeholder-table\" style=\"width:auto; border-bottom:1px solid #bcbcbc;\"&gt;\n[1] &lt;thead&gt;&lt;tr colspan=\"5\" style=\"background:#4c4c4c!important;color:#fff!imp ...\n[2] &lt;tbody&gt;\\n&lt;tr&gt;\\n&lt;td style=\"padding-left:10px;\"&gt;&lt;a href=\"https://ballotpedi ...\n\n\nor, you might notice that it has an “id” attribute called ‘officeholder-table’.\n\noffice_holders &lt;-\n  url |&gt;\n  read_html() |&gt;\n  html_node(\"#officeholder-table &gt; tbody\")\n\nIf you print it, you’ll see something like this:\n\n\noffice image\n\n\n32.1.1 Getting the link\nBefore, in Google Sheets, we had no way to pick up the list of links that would tell us what city each member was in. That’s also true when we use the html_table() function to turn it into a data frame:\n\noffice_table &lt;- \n  url |&gt;\n  read_html() |&gt;\n  html_node(\"#officeholder-table\") |&gt;  # keep the whole table to get headings \n  html_table()\n\nBut now we can get a list of the names of cities by extracting an “attribute” from the tag. (This is a little harder than I’d intended because not every row has a link, meaning we have to rejigger the formula to create empty rows when the link doesn’t exist.)\n\ncity_links &lt;-\n  ballotpedia[[3]] |&gt;  # the third table in our list\n  html_nodes (\"tbody &gt; tr\") |&gt;  # all rows\n  html_node (\"td &gt; a\") |&gt;  # justlink tag in the first column \n  html_attr(\"href\")  # the URL\n  \n\ntail(city_links)\n\n[1] \"https://ballotpedia.org/Barbara_Hanes_Burke\"         \n[2] \"https://ballotpedia.org/Jeff_MacIntosh\"              \n[3] \"https://ballotpedia.org/John_Larson_(North_Carolina)\"\n[4] \"https://ballotpedia.org/James_Taylor,_Jr.\"           \n[5] \"https://ballotpedia.org/Kevin_Mundy\"                 \n[6] \"https://ballotpedia.org/Robert_C._Clark\"             \n\n\nWe’ve never done this before, but we can add this list as a column to the data frame using the tidyverse add_column() function of the tidyverse . At the same time, you can put your regular expression muscles to work by “extracting” rather than “detecting” a pattern3:\n\noffice_table |&gt;\n  add_column (city=city_links, .before=\"Office\") |&gt;\n  mutate (city_extracted = str_extract(city, \"ballotpedia.org\\\\/(.*)$\", group=1) , .after=\"city\") |&gt;\n  sample_n(20)\n\n\n\n  \n\n\n\n(The str_extract () function matches everything after the last slash , because we put parentheses around the last part, which is a a capture group. This capability used to be very difficut in R – now it’s a bit easier. )\nIt doesn’t work perfectly, but it generally gets us a bit closer to a city name."
  },
  {
    "objectID": "advanced-scrape2.html#your-turn",
    "href": "advanced-scrape2.html#your-turn",
    "title": "32  Introduction to scraping in R",
    "section": "\n32.2 Your turn",
    "text": "32.2 Your turn\nA lot of people use IMDB pages as practice for scraping because its HTML is a little primitive. Try extracting the name, year, rating, and rank of each item in this list https://www.imdb.com/chart/toptv/?ref_=nv_tvv_250\nHints:\n\nIf you right-click on the table, you’ll see the table has an attribute of class=\"chart full-width\" . That means you can use the class selector .chart &gt; table . If you use plural, it will be a list with one item in it. If you use singular, it will be the table itself.\nTo get three columns in a data frame of text, html_table(trim=T)\nThe year is held in a span element with a class of “secondaryInfo” in the first column. See if you can figure out how to get at it. 4\nTo extract title and its link, use the a tag\nTo get the full information from the rating column, including the number of votes that it’s based on, use the strong tag then the title attribute. See if you can figure that one out.\nTo put them all together, use the add_column() verb"
  },
  {
    "objectID": "advanced-scrape2.html#cheat-sheet",
    "href": "advanced-scrape2.html#cheat-sheet",
    "title": "32  Introduction to scraping in R",
    "section": "\n32.3 Cheat sheet",
    "text": "32.3 Cheat sheet\nHTML tags / elements\nEach tag has an opening and closing it. This is what a “p” open and close tag looks like, with the text inside it shown on the page:\n&lt;p&gt; This is a paragraph &lt;/p&gt;\n\nHere is a list of common tags you’ll use in scraping:\n\n\n\n\n\n\ntag\ndescription\n\n\n\np\nor a paragraph\n\n\ndiv\na block of text , or division of the page.\n\n\nspan\nAn area within a div or p element that is treated specially without it breaking into a new line.\n\n\na\na link. It should always have an attribute of href, which is the URL to the link.\n\n\n\nh1 through h6\n\nwhich are headline levels. “h1” is the headline, “h2” is a sub-head, and so on.\n\n\n\nModern websites might have these sections, which are used instead of the “div” tag:\n\n\ntag\ndescription\n\n\n\nnav\na navigational menu\n\n\nmain\nthe main block of the page with the content\n\n\naside\na sidebar\n\n\nfooter\nthe stuff at the bottom.\n\n\n\nTables are structured like this:\n\n\n\n\n\n\ntag\ndescription\n\n\n\ntable\nthe main container.\n\n\n\nthead and tbody\n\nA heading area and the body area. These are always just below the table element\n\n\nth\nthe row that contains the headings . These are the first row within the body\n\n\ntr\nall of the content rows. These are subsequent rows within tbody\n\n\ntd\nall of the cells (columns). These are always WITHIN a tr or th element.\n\n\n\nAny of these can be nested within any others. Typically, a page starts with an “h1” tag, then has “div” tags for different sections, such as the sidebar or the main content. An “a” tag is typically nested within others.\nStandalone tags:\nA few tags don’t have opening and closing versions - they just stand alone:\nimg - an image to show. It would have a src attribute for the link, and an alt attribute for text to show for accessibility. example: &lt;img src=\"path-to-my-image\" alt=\"This is a picture of...\"&gt;\nbr - A hard line break.\nCommon attributes for tags\n\n\n\n\n\n\ntag\ndescription\n\n\n\nhref\nthe URL of a link within an a tag.\n\n\nsrc\nthe path to an image, within an img tag.\n\n\nclass\na reference to a CSS class. More than one class can be identified, separated with a space.\n\n\nid\na unique name for this element using CSS\n\n\n\nPeople can also make up their own attributes - they’re arbitrary.\nRvest functions\n\n\n\n\n\n\nfunction\ndescription\n\n\n\nread_html()\nto parse the page. Start with a file name or URL.\n\n\nhtml_elements\nto get ALL elements that match your query. It always gives back a list of objects, even if it’s empty. To pluck one by number, use [[n]]. You might see it as html_nodes(), which is from an older version of the rvest library\n\n\nhtml_element\nthe FIRST element that matches your query. Always returns a single object. (You might see html_node())\n\n\nhtml_table()\nconvert a table to a data frame with just its text\n\n\nhtml_text(trim=T)\nget the text within an element.\n\n\nhtml_attr (attr_name)\nget the value of an attribute. Commonly, this is used as httr_attr(\"href\") to get the link inside an a link element.\n\n\nadd_column\nappend columns to the end of a dataframe from lists/vectors. They must be in the same order, and there have to be the same number of items as there are rows.\n\n\nadd_row\nto append rows at the bottom. These can be by name or position. There can’t be any columns in the row you want to add that aren’t in the one you’re adding to.\n\n\n\n(You’ll often see these operations as cbind and rbind - they’re similar. Our way is just the tidyverse way.)\nExamples of common CSS selectors\nThis uses an example assuming the tag “p” , class “myclass” and id “myid” are used. You substitute the tags, classes, and id’s you want. See https://www.scraperapi.com/blog/css-selectors-cheat-sheet/ for a more in-depth cheat sheet.\n\n\n\n\n\n\nselector\ndescription\n\n\n\np\na “p” element. Replace with the element you want to capture.\n\n\n.myclass\nany element with class=“myclass”\n\n\np .myclass\n“p” element with a class of “myclass”.\n\n\np &gt; .myclass\nevery child element of p with a class of ‘myclass’ regardless of the tag. Must be a direct child.\n\n\n#myid\nAny element with “id=‘myid’”\n\n\nbody &gt; div &gt; table .content-table &gt; tbody &gt; tr\nA row within a table classed “content-table” within a div.\n\n\n\nYou have to go through the whole path to an element if you need it, which is why you have to look in the inspector section of your browser or use the CSS Selector Gadget (a chrome extension that I’ve never been able to work properly!)"
  },
  {
    "objectID": "advanced-scrape2.html#going-further",
    "href": "advanced-scrape2.html#going-further",
    "title": "32  Introduction to scraping in R",
    "section": "\n32.4 Going further",
    "text": "32.4 Going further\nThe CSS selectors shown in this chapter are a little limiting – you’ll find times when the information you’re seeking isn’t defined using those selectors. That’s when the XPATH selectors we saw in the last chapter are used. It’s beyond the scope of this tutorial, but ask for some help or try to find XPATH examples if you can’t figure out how to get to a part of the page with your css selections – it’s pretty common for this to happen."
  },
  {
    "objectID": "advanced-scrape2.html#footnotes",
    "href": "advanced-scrape2.html#footnotes",
    "title": "32  Introduction to scraping in R",
    "section": "",
    "text": "We glossed over this before, but any time you use a pipe, whatever comes above a command is used as the first argument of the current command. So this code is the same as read_html(url). Sometimes you need it as something other than the first argument, in which case you reference it using a period.↩︎\nA newer version of rvest prefers the use of html_element() instead of node. For us, they mean the same thing and both work. The newer syntax throws a warning in your RStudio environment that I can’t troubleshoot, so I’m waiting for an update to the rvest package to switch.↩︎\nstr_extract changed in December 2022. Make sure your packages are up to date.↩︎\n html_elements (\"tbody &gt; tr &gt; .titleColumn &gt; .secondaryInfo\") |&gt; html_text(trim=T)↩︎"
  },
  {
    "objectID": "appendix-math.html#the-pers-fractions-rates-percents-and-per-capita",
    "href": "appendix-math.html#the-pers-fractions-rates-percents-and-per-capita",
    "title": "Appendix A — Newsroom numbers cheat sheet",
    "section": "A.1 The PERS: Fractions, rates, percents and per capita",
    "text": "A.1 The PERS: Fractions, rates, percents and per capita\nYou can usually simplify your story if you can re-jigger your numbers into a rate, a ratio or a percentage. “One out of four” is a fraction, or a rate. “Forty percent” is another ratio or rate. And 235 deaths per 100,000 people is another.\nPercents and fractions are used to scale of very large or very small numbers while putting them into perspective.\nRates are also used to level the playing field – they compare two items that have a different base.\nWhen you see a lot of numbers in copy, examine them to see if a simple rate – “one of four” or 25 percent – would simplify your story.\n\nA.1.1 Fractions and percents\nRepeat this: “Percents are fractions. Fractions are percents.” Remembering this all the time will keep you focused on the key element of percentages: They’re ratios, or rates, expressed as a fraction of 100.\n\nFiguring a percent:\nStep 1: Know your base. Think of the words “out of.” It’s the total of all the groups.\nStep 2: Divide the category you care about by the base.\nRemember that a fraction sign (/) means “divided by” (÷).\nStep 3: Move the decimal point two places to the right (or multiply by 100) to get the rate per hundred, or percent.\nStep 4: Round the answer to no more than one decimal place. Better\nyet, look for an easier fraction your readers will understand.\n\nFormula\nStep 1: Total = The base\nStep 2: (Category / Total) = Proportion\nStep 3: Proportion x 100 = Percent\nStep 4: Round and simplify.\n\nExample\nIf 58 people say they will vote in an upcoming election and 92 say they won’t, this is how to compute the percent of people who claim they will vote:\nStep 1: Base = number of people asked = 92 + 58 = 150\nStep 2: Rate = 58 out of 150 = 58/150 = .386666..\nStep 3: Percent = .38666… x 100 = 38.666666….\nStep 4: Round and simplify: = nearly 40 percent\n\n\n\nFrom fractions to percents and back\n\n\n\nYou probably know that 1 out of 4 is one-quarter, and that it’s also 25 percent. But you may not know how to get from one to another.\nFrom fractions to percents:\n1/4 = 1 ÷ 4 = 0.25. Move the decimal place over two places, or multiply by 100, to get 25%\nFrom percents to fractions:\n\nWrite your percent as a fraction: 25/100\nTry to find a “least common denominator:” 25 in this case goes into both the top and the bottom. You might want to round off either number to come out to a simple denominator.\nSimplify: (25 / 25) / (100 / 25) = 1 / 4\n\nTo get “One out of “ numbers:\n\nExpress your percentage as a proportion by dividing by 100, so 25% is 0.25.\nNow divide one by that number: 1 / .25 = 4, so your answer is one-fourth.\n\nTip for spreadsheet users: Excel allows you to format a number as a fraction or a percent. Play around with formats to see how the number is most easily described.\n\n\n\n\n\nA.1.2 Rates and per capita\nAs with percentages, per person or per capita rates are used to level the playing field.\nThey’re often used when you need to compare two dissimilar places or events: Crimes in cities with different populations, deaths from various diseases or Gross Domestic Product across countries.\nRates also are often used with very big or very small numbers to change them into something we can understand.\nSometimes, though, a rate makes things more complicated, especially when events are rare and there is a consensus that they shouldn’t ever happen. Some examples include the 32 crashes attributed to GM’s faulty ignition switch, or the 64 deaths that the Centers for Disease Control associated with pharmacy compounding errors in 2012.\nOne rule of thumb is to use raw numbers when they are under 100, and revert to some kind of fraction or rate when they grow bigger.\n\nRates for large numbers\nA raw per-person figure is an average and should usually be used with very big numbers.\nA Gross Domestic Product of $17 trillion is hard to digest. So we reduce it to a number we can understand. If we divide it by 317 million, we get about $54,000 for every man, woman and child in the country. It doesn’t mean that each person earned $54,000 – in fact, almost half of all families earned less than that altogether at this writing. Instead, it includes all of the income that is generated by companies as well as people.\nBut the device turns an incomprehensible number into something we can picture. It also helps if we want to compare countries – it levels the playing field by adjusting for the size of the country.\n\n\nRates for small numbers - crime, death, and other rare events\nRates such as 23 per 1,000 people or something like it – are the same as percentages, but you multiply by something bigger than 100 or move the decimal place further to the right. Use these for very small numbers.\nIf 2.5 million people die in this country every year, then the percentage of people who die is a really small number: 0.789 per 100, or percent.\nA number that little is hard to digest. So experts up the ante and express the figure as 789 deaths per 100,000 people.\n\n\n\n\n\n\nSmall numbers warning\n\n\n\nBe careful about rates based on very small numbers. One example is the number of police shootings per 100,000 people. Most police departments in the country are very small and are more likely to serve only about 5,000 people. This means that just one shooting in the department can lift them from one of the lowest rates in the nation to one of the highest. Expect rates based on very small numbers to be unstable and potentially misleading.1\n\n\n\nFiguring a rate\nStep 1: Choose your base. This is often difficult. In reporting on fatalities by make of car, should you use the number of cars on the road, the number sold, or the total miles driven each year? You’ll have to decide.\nStep 2: Divide the number you care about by the base. Choosing the numerator can also be tricky. Going back to the automobile fatality example, would you use the total number of deaths or the number of driver deaths? Take a hint using other reports you see on the topic. Experts have often come to an informal agreement about what the most telling number is.\nStep 3: Multiply by a nice round number, such as 1,000, 100,000 or 1 million.\nStep 4: Round the answer and simplify.\n\nFormula\nStep 1: Choose the base, or “total”\nStep 2: (Category / Total) = Proportion or Rate\nStep 3: Proportion x 1,000 = Rate per thousand\nStep 4: Round to zero decimal places\n\nExample\nAccording to the FBI Crime in the United States for 2012, there were 13,000 violent and property crimes in Pittsburgh out of a population of 312,000. There were 8,870 crimes in Tucson out of a population of 531,000. Figuring a rate per thousand residents lets you compare the two cities:\n\n\n\n\n\n\n\nPittsburgh\nTucson\n\n\n\n\nStep 1: Base= 312,000 people\nStep 1: Base = 531,000 people\n\n\nStep 2: 13,000 crimes / 312,000 people = 0.041\nStep 2: 8,870 / 531,000 people = 0.017\n\n\nStep 3: 0.041 x 1,000 = 41 crimes per thousand\nStep 3: .017 * 1,000 = 17 crimes per thousand\n\n\n\nSo the crime rate for Pittsburgh was nearly 2 1/2 times that of Tucson that year , or 47/17 = 2.4\n\n\n\nSelecting your multiplier\n\n\n\nSome people feel that changing their multiplier from 100 to something bigger is cheating.\nAfter all, a 0.2 percent rate becomes a big number – 200 – when you change the base from 100 to 100,000!\nIn practice, though, there’s nothing magical about using a base of 100 (or percent). Instead, use the number that makes sense for the comparison you’re making.\n\nChoose a round number – 1,000, 1 million or 100,000.\nChoose the same number that the experts use: Crimes per 1,000 people, deaths per 100,000, or crashes per million miles driven, for example.\nChoose a base that will give you an easy way to express it to your readers. This is one that results in a number generally between 1 and 1,000 or so.\nTry to avoid using an outrageously large base. For instance, avoid expressing a local number in terms of 1 million people. Only a handful of cities have more than a million people.\nKeep the same base throughout your story. Don’t shift from 100,000 to 1,000 in crime statistics, for instance, when you move from murders to total crime rates.\n\nYou will often have to balance these rules of thumb against each other to come up with a compromise that allows you to write gracefully while keeping the sense of scale appropriate for the comparisons you’re making."
  },
  {
    "objectID": "appendix-math.html#measuring-change",
    "href": "appendix-math.html#measuring-change",
    "title": "Appendix A — Newsroom numbers cheat sheet",
    "section": "A.2 Measuring change",
    "text": "A.2 Measuring change\nWe often write about change or difference, usually as a difference between place or time.\n\nA.2.1 Simple differences\nA simple difference is just the result of subtracting one number from another. If you are measuring differences in time, it’s the newer number minus the older number.\nOne time to use a simple difference is when the number is understandable without any calculations. Prices of common household goods, salaries and home prices are examples of numbers that needn’t always be put into perspective using percentage changes.\nIn the end, we work in news. That means that sometimes you’ll use a raw number when it’s more newsworthy. This doesn’t necessarily mean the number is more alarming – just more meaningful.\n\nFiguring a difference:\nSubtract the older number from the newer number.\nThis is not the same as subtracting the little number from the big number.\nIf a number has fallen you get a negative number. If a number has risen you get a positive number.\nFormula\nNew – Old.\nExample An executive made $2.4 million last year. She made $2.9 million this year.\nHer raise was: $2.9 – $2.4 = 0.5 million, or $500,000, or half a million dollars."
  },
  {
    "objectID": "appendix-math.html#percent-change-percent-difference",
    "href": "appendix-math.html#percent-change-percent-difference",
    "title": "Appendix A — Newsroom numbers cheat sheet",
    "section": "A.3 Percent change / Percent difference",
    "text": "A.3 Percent change / Percent difference\nThe most butchered form of newsroom math is the percent difference, or the percent change.\nPart of the problem is that some folks have found five or six different ways to compute them. Unfortunately, only two of them work every time. I’ll show you both because sometimes – especially when you want to compare rates – one is easier than the other.\nNote that these methods work whether or not the number is going up or going down. If the number has fallen, you’ll get a negative answer. If the number has risen, you’ll get a positive one. And it still comes out right if the increase is bigger than 100 percent.2\nIn practice, I use Method 1 when I’m working in spreadsheets because I can look at the simple difference in one column and then use it in the formula for the percentage difference. I use Method 2 when I want to compare to percent changes to one another or when working with annual rates.\n\n\n\n\n Method 1: Subtract then divide\n\n\n\n Method 2: Divide then subtract\n\n\n\n\n\n\n\nFiguring a percent change\n\n\n\n\n Step 1: Get the simple difference between the numbers by subtracting the older number from the newer number. It doesn’t matter which one is bigger!\nStep 2: Divide the answer by the older number.\nStep 3: Multiply by 100, or move the decimal point two places to the right.\nStep 4: Round off and simplify.\n\n\n\n Step 1: Get the proportion of the new number compared to the old number. This is the same as the percent of total above, except the old number is the base.\nStep 2: Subtract 1 from that ratio\nStep 3: Multiply by 100, or move the decimal point two places to the right.\nStep 4: Round off and simplify.\n\n\n\n\n\n\n\n\n\nFormula\n\n\n\n\n Step 1: New – Old = Difference\nStep 2: Difference / Old = Decimal answer\nStep 3: Decimal x 100 = percentage difference\nStep 4: Round off.\n\n\n\n Step 1: New / Old = Ratio\nStep 2: Ratio - 1 = Decimal answer\nStep 3: Decimal x 100 = percentage difference\nStep 4: Round off.\n\n\n\n\n\n\n\n\nExample\n\nAn executive made $2.4 million last year. They made $2.9 million in this year.\n\n\nStep 1: Difference = 2.9 – 2.4 = 0.5\nStep 2: Difference / Original number =  0.5 / 2.4 = .208\nStep 3: Move the decimal point = 20.8%\nStep 4: Round off and simplify:  21% = 21 / 100 = about 20 / 100 = or about one-fifth.\n\n\n\nStep 1: Ratio = 2.9/2.4 = 1.208\nStep 2: Decimal answer = 1.208 - 1 = .208\nStep 3: Move the decimal point = 20.8%\nStep 4: Round off and simplify:  21% = 21 / 100 = about 20 / 100 = or about one-fifth.\n\n\nSo the executive got a raise equivalent to one-fifth of their original salary.\n\n\n\n\n\n\n\n\nReversing or predicting a percent change\n\n\n\nRemember that a number can grow many times, but it can only fall 100 percent to zero. This is a rough concept until you think it through. If you double a price of $20, increasing it by 100%, it’s $40. If you triple it, it’s $60. But if you reduce the $40 back to $20, it’s a 50 percent drop, to one-half the level, not a 100 percent decrease. In other words, percent changes can’t be reversed.\nThis means that the ads claiming you’ll use three times less detergent or a food contains three times less salt are wrong and impossible. What they probably mean is that it would be three times as much if you used the other brand or ate the other food, or the brand is one third as much. Here are two ways this makes a difference:\nYou need two of three numbers to reverse or predict a percent change:\n\nWhere the number started\nWhere it ended\nWhat the percent change would (or will) be\n\nAny two of those will give you what you need. It’s easiest if we use Method 2 above to get there. The example above assumes you know where it started and where it ended. Here’s how to do it if you you have either of the other two:\nWhere it starts and the percent change\nExample: You started with $100 and it grew by a total of 12%. Or, you started with $100 and it fell by a total of 12% (the percent change was -12%)\nStep 1: Convert the percent change to a ratio by moving the decimal place back : .12 (up) or -.12 (down)\nStep 2: Add 1, resulting in 1.12 (up) or .88 (down)\nStep 3: Multiply the beginning number by that amount : $100 x 1.12 = $112 (up), or $100 x .88 = $88 (down)\nWhere it ends and the total percent change\nFor example, say your house is worth $330,000, and it had appreciated by a total of 15% over the past few years. Here’s how to figure out where it started:\nStep 1: Convert the percent change to a decimal, as above: 0.15\nStep 2: Divide the current value by that amount = $330 / .15 = $287\nThis isn’t intuitive, but it differs because you’re starting from a bigger base. 15 percent of 330 isn’t the same as 15 percent of 287.\n\n\n\n\n\n\n\nGoing further with percents and rates\nThere are three common problems in changes and rates you will probably encounter that aren’t part of this guide. You should get help or look it up when these situations come up: 3\n\nRelative risk: That’s the technical term for dividing two percentages. If the mortgage denial rate for Black homeowners was 10 percent, and the denial rate of white homeowners was 5 percent, it means that Black homeowners are twice as likely to be denied a loan. This can be used with both rates and with changes.\nAnnual rates: When you know that something has grown, say, 2 percent a year for 10 years, it’s not the same thing as 20 percent. You have to annualize it.\nAdjusting for inflation: Comparing values across two points in time – especially today – means putting them on the same footing. Generally, you want to convert old values to their buying power today. For example, it’s hard to compare salaries for teachers today with those 50 years ago, because our money isn’t worth as much today."
  },
  {
    "objectID": "appendix-math.html#average-and-typical-values",
    "href": "appendix-math.html#average-and-typical-values",
    "title": "Appendix A — Newsroom numbers cheat sheet",
    "section": "A.4 Average and typical values",
    "text": "A.4 Average and typical values\nAverages4 are just summaries. If a quote sums up an event, or an anecdote sums up a person using their actions instead of words, an average sums up a human condition of some kind – money, congestion, death or disease – in a single number.\nChoosing your average carefully or deciding there may be another number or method to sum up a situation can mean the difference between accurately and inaccurately describing your story.\nUnderstanding different kinds of “measures of central tendency” – what they tell us and what they don’t – is the first thing you learn in basic statistics classes. If an it doesn’t describe your data well, it’s not very productive to move forward into many other kinds of analysis.\nTrying to compare populations over time is particularly tricky using averages because of giant demographic shifts. Between the Baby Boom and the Millennials came what some people call the Baby Bust. Getting average spending on education, for example, across these generations is really misleading – it will boom, then bust, them boom again and no one number will describe that pattern.5\nTwo types of averages are reviewed here. Consult an introductory statistics book if your work depends on an average.\n\nA.4.1 The average or mean\nA “mean” is what people mean when they say the word “average”.\nIt’s most descriptive when it summarizes numbers that don’t vary too much at either the top or bottom ends. These averages will often be misleading when they refer to items measured in dollar amount like incomes, housing costs and the like.\n\nFiguring a simple average or mean\nStep 1: Add up a list of numbers.\nStep 2: Divide the answer by the number of numbers you’ve added up.\nFormula\nStep 1: Sum of numbers\nStep 2: Sum / Count of numbers\nFor spreadsheet users: =AVERAGE(list of numbers)\nExample\nHere are six home prices on a block:\n$275,000          $1,200,000\n$275,000            $500,000\n$200,000            $395,000\n\nStep 1: 275 + 275 + 200 + 1,200 + 500 + 395 = 2,845 or $2,845,000\nStep 2: $2,845,000 / 5 = $569,000.\nSo the average home price is more than all but one on the list.\n\n\n\nA.4.2 The median\nMedians are often used to summarize the value of things measured in dollars, especially home prices and incomes. They are not sensitive to one or two unusually high or low values the way the average in the previous example is.\nBut it’s harder to get a median because you need a list of all values. For example, if you know the total income of a metropolitan area and the number of people in that area, you can compute the average – or per capita income – but not the median.\nOne way to express the median is to call it the “typical” value. Another way is to say that it’s the “middle” value.\n\nFiguring a median:\nStep 1: List all of your numbers in order, beginning with the lowest and ending with the highest.\nStep 2: Count how many numbers you have and divide by two.\nStep 3: Add 0.5. If that comes out to a whole number (like 13), count up the list that many values.\nIf it’s not (like 12.5), take the average of the two numbers surrounding the number. 6\nIn other words, this is the closest you can get to the middle of the list. This is a sorting and counting job, not a calculator job.\nIn a spreadsheet, use the =MEDIAN() function.\nExample:\nStep 1:\nThe same list, but listed from lowest to highest, with an extra expensive home\n1.    $200,000\n2.    $275,000      \n3.    $275,000      \n4.    $395,000\n5.    $500,000\n6.  $1,200,000\nStep 2: 6/2 = 3\nStep 3: 3 + .5 = 3.5\nStep 4: Average the 3rd and 4th items on the list: (275 + 395) / 2 = $335,000\n\nAs a rule of thumb, the median will be more telling than the average when they’re very different as in this example. But the word “median” sounds very technical to some readers and the average encompasses all of the values in a list, so we use it when they’re not too different."
  },
  {
    "objectID": "appendix-math.html#footnotes",
    "href": "appendix-math.html#footnotes",
    "title": "Appendix A — Newsroom numbers cheat sheet",
    "section": "",
    "text": "Note the disclaimer in this story on police shootings by The Washington Post, in which changes in the rates of police shootings may just be random.↩︎\nIt’s impossible for a number to fall more than 100 percent. That would mean it went below zero and then no formula works. There’s no good way to show a percent change when a figure like annual company earnings goes from profit to loss.↩︎\nThey are part of the “Numbers in the Newsroom” book from which this guide is derived.↩︎\nI’m using the term “average” freely here. Technically, a simple average and median are measures of central tendency, but I’ll treat them as different types of averages for simplicity sake.↩︎\nThis is sort of an example of “Simpson’s paradox” in that an average hides meaningful trends among sub-populations.↩︎\nIn statistical programs like R, there are various ways to specify how to deal with medians when there are ties like this. This is the most common way, but it may not be the way your program handles it.↩︎"
  },
  {
    "objectID": "appendix-program.html#building-blocks",
    "href": "appendix-program.html#building-blocks",
    "title": "Appendix B — A gentle intro to programming",
    "section": "B.1 Building blocks",
    "text": "B.1 Building blocks\nOnce you learn to program in one language, learning others is much simpler. That’s because you have the basic concepts down: How to assign values to variables, how to loop through lists, or how to import data. This chapter walks through some of the more universal concepts in programming.\n\nVariables\nVariables are just containers with names. Variables an be simple, such as a variable that holds the value, “Sarah”. Or they can be quite complex, such as a multi-level data frame containing details from a Spotify playlist. Some people call them objects.1\n\nLiterals\nThe most basic kind of object is a single variable that contains a single value of a specific type:\n \"Sarah\"\n 1.0\n TRUE\n 2017-01-24\nThese are called “literals”, which usually include text, numeric, logical (usually true/false but sometimes yes/no or 1/0) and date or date/time. When you want to use the actual letters of some text, enclose them in quotes. When you want to use the named variable, don’t enclose it in quotes. 2\nLists / arrays / vectors\nMost languages have some concept of a list of items called an array, vector or dictionary. In R, you create a vector using the “c” operator, short for “combine”. Once you have your items in a list or a vector, you can apply the same function across all of them or work on them in order.\nc(1, 2, 3, 4, 5) \n  creates a vector of the values 1 through 5 in R\nData frames or tables\nA data frame is a special version of a list, and is equivalent to a spreadsheet: tabular, rectangular data with columns and rows. You don’t need to know much about this yet, but just understand that it will become an important part of your vocabulary.\n\n\n\nOperators & assignment\nOperators are simple arithmetic or similar operations, like adding, subtracting, dividing and multiplying. Some common operators are:\n   Arithmethic: add (+), subtract (-), multiply (*), or divide (/).\n\n   Comparison: Greater than (&gt;) , less than (&lt;), \n                equal to (often == ),\n                not equal to (often !=).\n“Assignment” means pushing a value into a variable name using “&lt;-”. It’s amazing how many different ways there are to think of this. Some might call “naming a value”, others might consider it “setting a variable”.\n  my_name &lt;- \"Sarah\"\n  my_value &lt;- 1.0\n\n\nFunctions\nA function is a set of instructions. To use a function, you use its name, followed by some parentheses. If it requires information from you, those arguments go inside the parentheses.\nIf you think of it as a sentence, the function is the verb, and the arguments are the nouns. You used a function in Excel:\n=SUM(A1:A15)\nFunctions are usually categorized by the type of data element that they act upon. An example in R is the function tolower(), which converts a text or character variable inside the parentheses to lower case.\nMany of the functions we use are already built into R, or are in libraries that we borrow – someone else has already written, tested and packaged them up for you.\nExamples include:\n\nimporting text or Excel data\ncalculating the average or sum\ncounting\nfinding phrases within text\n\n\n\nLoops\nA loop is a way to repeat your instructions over and over without having to re-write them every time. They usually work by stepping through some kind of a list, like a directory of files, or by using a counter, such as every year between 2005 and 2018.\nExcel and Google Sheets don’t really have loops, unless you learn the more complicated programming language behind them. This is why many people move to a programming langugate – to get the power of loops.\nOne type of loop commonly used in programs is a “for loop”, which says, “for every one of something, follow these instructions”:\n\n\nFor loops aren't always scary monsters. Conceptual intro (no, this code won't run…) to for loops. Thanks @ChelseaParlett for brainstorming w/ me on this one! pic.twitter.com/TySFHogG2d\n\n— Allison Horst (@allison_horst) August 4, 2020\n\n\nCommon tasks that reporters do with loops include combining annual spreadsheets from a government website or downloading and importing many files at once; and scraping web pages that require clicking into each link one by one. We’ll get to this at the end of the semester.\n\n\n\nIngredients by Katie Smith via Unsplash"
  },
  {
    "objectID": "appendix-program.html#an-algorithm-to-make-an-omelet",
    "href": "appendix-program.html#an-algorithm-to-make-an-omelet",
    "title": "Appendix B — A gentle intro to programming",
    "section": "B.2 An algorithm to make an omelet",
    "text": "B.2 An algorithm to make an omelet\nAlgorithms are just instructions that get followed in order. If you brush your teeth the same way every morning, you can probably write out the steps as an algorithm.\nSuppose you want to make an omelet. Before you even start, you need to know at least two things: which ingredients you have on hand, and what kind of omelet you want to make.\nA function or algorithm that creates an omelet might look something like this. The first row creates a function called make_omelet(), which requires the two pieces of information as arguments. Once you’ve made the function, you can refer to that set of instruction by its name by giving it the arguments it needs.\n(All of these examples are called “pseudo-code”. They won’t actually work in any program, but they lay out the logic that has to be translated into the specific computer language you’re using.)\nfunction make_omelet (ingredients_on_hand, what_kind) {\n\n     check for necessary ingredients (are all elements of what_kind in ingredients_on_hand?)\n         quit now if you don't have them all.\n         return the error message\n\n     prepare the ingredients for (what_kind)\n\n     whisk the eggs\n\n     melt some butter in a pan\n\n     pour in the eggs\n\n     add ingredients for what_kind\n\n     flip the omelet\n\n     remove from pan\n\n     give me the omelet \n\n}\nNow, when you want to make an omelet, you can just make your list of ingredients and the kind of omelet you want, and execute the function:\nHere are the ingredients I already have:\ningredients &lt;-\n        c(\"butter\", \"eggs\", \"cheese\", \"spinach\", \"tomatoes\")\nI want a spinach and cheese omelet:\nkind &lt;-\n        c(\"spinach\", \"cheese\")\nNow, use the function we created to make it using those two lists as the required arguments:\nmake_omelet (ingredients, kind)\nWhen you use a built-in function in R, it will show you the arguments that are both required and optional as you type.\n\nOpen a restaurant with loops\nNow, you’d have to repeat this over and over if you had a restaurant. It might look like this:\n  make_omelet (ingredients,kind)\n  ** make a new list of ingredients left and the kind**\n  make_omelet (ingredients2, kind2)\n  ** make a new list...**\n  make_omelet (ingredients3, kind3)\n  ... and so on.\nYou’d have a program hundreds of lines long – one for each customer. Instead, you could loop through the customers and do the same thing:\ncustomers &lt;- c(\"Bob\", \"Jamal\", \"Christine\", \"Lauren\")\n\nfor each customer in the list of customers {\n  request what kind they want\n  make_omelet (ingredients_on_hand, kind_this_customer_wants)\n  give omelet to customer\n  update your ingredients list if you ran out of something or went shopping\n}"
  },
  {
    "objectID": "appendix-program.html#more-resources",
    "href": "appendix-program.html#more-resources",
    "title": "Appendix B — A gentle intro to programming",
    "section": "B.3 More resources",
    "text": "B.3 More resources\n\n“Beyond Binary, Lesson 1 from a Google engineer’s drag queen persona named Anna Lytical. This video gives you a good handle on what a computer program does."
  },
  {
    "objectID": "appendix-program.html#footnotes",
    "href": "appendix-program.html#footnotes",
    "title": "Appendix B — A gentle intro to programming",
    "section": "",
    "text": "Technically, these are different things to the innards of the computer, but that difference isn’t important to us right now.↩︎\n There are two special types that we’ll deal with later, but can cause a lot of headaches: NA values and factors. You don’t have to deal with them yet.↩︎"
  },
  {
    "objectID": "appendix-ppp.html#sources",
    "href": "appendix-ppp.html#sources",
    "title": "Appendix C — Documentation for PPP data chapters",
    "section": "C.1 Sources",
    "text": "C.1 Sources\nAll data used in this book was downloaded as of December 2022 from the SBA data site at https://data.sba.gov/dataset/ppp-foia , last updated in October.\nThe data dictionary is distributed at that same site at https://data.sba.gov/dataset/ppp-foia/resource/aab8e9f9-36d1-42e1-b3ba-e59c79f1d7f0 in an Excel spreadsheet.\nHere is some other background information on the program: https://www.sba.gov/funding-programs/loans/covid-19-relief-options/paycheck-protection-program\nThe data was downloaded using a program to concatenate all of the files into one, large data frame. Only minimal standardization and cleaning was done:\n\nAll recipient names were converted to upper case and punctuation were removed.\nAll city names are in proper case. (Casa Grande, not CASA GRANDE)\n\nPPP loans have two geographic locations included: The location of the borrower, and the city, county, state and congressional district of the project that is being funded. This is especially important for construction and similar trades that have work done on sites.\nUnder the rules, most businesses had to apply for forgiveness within about a year of getting the loans. There were two choices: Apply for forgiveness, or begin paying it back after about 10 months. As of October 2022, 98 percent of the loans given in 2020 had been forgiven, and about 85 percent of the 2021 loans had been forgiven. In SBA parlance, this means they have been “remitted” or “disbursed” to the original lending institution. The Wikipedia page on the program provides a pretty detailed discussion of the details."
  },
  {
    "objectID": "appendix-ppp.html#data-used-in-the-tutorials",
    "href": "appendix-ppp.html#data-used-in-the-tutorials",
    "title": "Appendix C — Documentation for PPP data chapters",
    "section": "C.2 Data used in the tutorials",
    "text": "C.2 Data used in the tutorials\nThe data extracted from this textbook contains loans in Arizona if either the borrower or the project was in the state. It contains 169,259 loans.\nThe columns were renamed and then a selection of those columns were used in the tutorials.\nHere is the record layout as used in these tutorials:\n\n\n\n\n\n\n\n\n\nColumn name\nType\nDescription\n\n\n\n\nloan_id\nnumeric\nThe original, unique loan number that was provided by SBA\n\n\ndate_approved\ndate\n\n\n\ndraw\nchr\n“First” draw was April 2020-May 2020. “Second” draw was Jan 2021 to May 2021.\n\n\nborrower_name\nchr\nAll upper-case name of the borrower, with punctuation removed.\n\n\nborrower_address\nchr\nAll proper-case, punctuation removed - may include suite or apartment numbers.\n\n\nborrower_city\nchr\nAll proper-case, punctuation removed but not standardized, so there are a lot of variations of city names.\n\n\nborrower_state\nchr\n2-character upper case postal code\n\n\nborrower_zip\nchr\nfive-digit zip code of the borrower\n\n\nfranchise_name\nchr\nA “franchise” is a licensed outlet of a larger corporation, such as a McDonald’s store. This was not standardized and can be upper, lower or mixed case with punctuation..\n\n\nloan_status\nchr\n“Paid in Full”, “Active Un-Disbursed” , “Charged Off”, or “Exemption 4”. . Exemption 4 means that it is still active and has time to apply for forgiveness or payback. So far, there are no “Charged off” loans, but there are those with “Paid in Full” with no forgiveness\n\n\nloan_status_date\ndate\nthe last time the loan status was updated\n\n\namount\nnumeric\nThe most recent amount approved by the SBA for this loan\n\n\nforgiveness_amount\nnumeric\nThe amount forgiven in the loan (paid by taxpayers, not the business). This is NA if it has not been forgiven.\n\n\nforgiveness_date\ndate\nthe date the loan was forgiven. NA if it has not been forgiven.\n\n\nlender\nchr\nThe name of the original lender. It might have been transferred to another company for further servicing.\n\n\nrural_urban\nchr\n“U” = Urban, “R” = “Rural” The federal governemnt prioritizes loans to rural areas.\n\n\nlow_income_area\nchr\n“Y” or “N”. These are areas that are considered low-to-moderate income communities that are priorities for the federal government to help finance.\n\n\nproject_county\nchr\nupper-case name of the county that the project is in.\n\n\nproject_state\nchr\n2-character postal abbreviation for the project city\n\n\nproject_cong_dist\nchr\na 5-character congressional district indicator, such as “AZ-04”. These are districts as of early 2020, and do not reflect redistricting done after that.\n\n\nemployees\nnum\nThe number of employees used to compute the loan.\n\n\nbusiness_type\nchr\nOne of 24 categories of business, such as “501(c)3 - Non Profit” or “Corporation” or “Sole Proprietership”\n\n\nnaics_code\nchr\nA 6-digit code indicating the North American Industry Classification code of the recipient or project. This will be translated into words using another data set.\n\n\n\n\nThere were other columns in the original data set, but many of them were almost never filled in, or were shown to be inaccurate estimates.\nFor example, out of nearly 170,000 loans, 120,000 of them had no information on race or ethnicity of the business owner. None were marked as veteran-owned or had an owner’s gender filled out. Some other columns, such as the current lender (as opposed to the one that made the loan) added complexity without adding much for our purposes."
  },
  {
    "objectID": "appendix-ppp.html#other-data-for-use-in-with-ppp-data",
    "href": "appendix-ppp.html#other-data-for-use-in-with-ppp-data",
    "title": "Appendix C — Documentation for PPP data chapters",
    "section": "C.3 Other data for use in with PPP data",
    "text": "C.3 Other data for use in with PPP data\n\nThe NAICS code, a standardized code created by the Office of Management and Budget and used widely by the federal government, will be turned into words in the chapter on joining data.\nThe business Zip Code is the mailing address. I mapped them to actual physical address Zip Codes and downloaded some Census data to attach to each loan. This is rough estimate, and not a great representation of neighborhoods, but it is useful for us to get a sense of the demographics during the join part of the R training.\nReveal worked with https://geocod.io to add latitude and longitude to each loan, allowing them to match it to Census tracts instead of Zip Codes, a much better way to look at neighborhoods. We will look at that data in the mapping / geography portion of the course"
  }
]