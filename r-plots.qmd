# Intro to visualization in R

You'll need some additional packages installed for this to work: 

* gapminder  - example data that is used throughout, even though it's a little boring
* plotly - to make interactive charts.

You can use this command in the Console to install them at the same time:

        install.packages(c("plotly", "gapminder"))


Then, load your packages. 

```{r message=FALSE,  warning=FALSE}

library(gapminder)
library(tidyverse)
library(ggplot2)
library(plotly)
#we're also adding two options - one rounds everything to 2 digits, the other 
#prevents printing numbers in scientific notation (1e...)
options(digits=2, scipen=99)

```


## The Grammar of Graphics

The package we're going to use for our graphing is called `ggplot2`, which is part of the tidyverse. Conceptually, it follows the principles in Leland Wilkinson's  "Grammar of Graphics", written in 1999 as a framework for thinking about visualizations.    For our purposes, you just need to understand that any visualization is made up of several fundamental pieces. In `ggplot2`, they are:

* *aesthetics* (called "aes") : What *data* are you plotting? It can have more than two dimensions, such as x-axis, y-axis, a variable used for color and another used for size. These are things we can see on a graphic, including the values. 
* *geometry*  refers to the shape each variable will take.
* *scale* - any transformation we might make.
* *facets* - creating small multiples by splitting up one graph into many similar graphs, based on a variable.
* *layers* - adding multiple geometries on top of one another to reveal new information, or add annoations.

One quirk of ggplot is that instead of the `%>%` pipe command , it uses `+` instead.  There are technical reasons for this, but it's not worth getting into...


The basic structure of the plot is: 


      ggplot (  data = df_name, 
                aes (
                  x = variable_name,
                  y = variable_name,
                  fill = color inside color,
                  color = border color,
                  size = size if relevant
                  )
                ) +
                a geometry (eg, geom_point, geom_bar, etc.) with options such as color, fill and size +
                facet_wrap ( variable ~ variable ) +
                any scale information

We're going to skip the labeling and annotation parts for now. That would come under layering and legends. In practice, these options can be mixed througout the command. 

### Good resources

* [R Graphics Cookbook](http://www.cookbook-r.com/Graphs/) , done entirely in ggplot2.

* The data visualization entries from [R for Data Science](https://r4ds.had.co.nz/data-visualisation.html), by Hadley Wickham

* [Data Visualization, A Practical Introduction](https://socviz.co/index.html), by Kiernan Healy


## Building you graph in pieces using gapminder

Gapminder is a datast made famous in a viral 2010 TED talk. It contains the life expectency and income (GDP per capita) by country for 200 years. The data is in 5-year increments, through 2007. 


### Subset to just the latest years


Just pull out the latest year (2007) for our practice

```{r}
#what is gapminder? Life expectancy by country, only goes to 2007. Take the latest year.
gapminder_2007 <-
  gapminder %>%
  filter ( year == 2007)
glimpse(gapminder_2007)
```


### The histogram

One of the first pieces of information  you often want about a dataset is its *distribution*. Do all of the values cluster around the center? Or do they spread out? Let's do a histogram of the life expectency variable. 


Start your plot with the commmand *ggplot*, then add in the aesthetics and geometry: 

```{r}
ggplot( 
        data=gapminder_2007,
        aes (x = lifeExp )
      ) +
      geom_histogram()
      
```

We'll add a few options to this plot to make it a little easier to read

```{r}
#make it an outline, with smaller piles.
ggplot ( data= gapminder_2007,
         aes (x= lifeExp)
        ) +
        geom_histogram (binwidth=5, color="black", fill="white")   
       
```


But I'm interested in how the different continents look. Try "faceting" by continent. 

```{r}
ggplot ( data= gapminder_2007,
         aes (x= lifeExp)
        ) +
        geom_histogram (binwidth=5, color="black", fill="white")   +
        facet_wrap ( ~ continent)
```

### Try a scatter, or dot plot

#### Save a plot and add to it

You can save your plot to an object rather than print it immediately, making it a little easier to troubleshoot. 


```{r}
my_plot <-
  ggplot (
    data = gapminder_2007,
    aes (x= gdpPercap , y = lifeExp)
  )
#what does this look like?
my_plot
```

It doesn't look like anything! The reason is that I didn't include a geometry, or a shape, for the values.
Add a point here:

```{r}
my_plot <-
  my_plot +
  geom_point()
my_plot
```

There are some built-in themes that take some best practices for mixes of colors and styles, so I'll add one in.


```{r}
my_plot <-
  my_plot +
  theme_minimal()
my_plot
```

Let's  add some color. Remember, we keep adding elements to our existing plot, so we don't have to start over each time.  

```{r}
my_plot <- 
  my_plot +
  aes (color = continent)
my_plot
```


And now add population for the size of the country

```{r}
my_plot <- 
  my_plot +
  aes (size=pop)
    
my_plot
```

Let's build this from scratch, and then also make sure that the big points don't overlap the little ones too much. Note that I've added `scale_x_log10` to make the x-axis go up by factors of 10 rather than 1. (In the age of coronavirus, we've gotten used to log scales!)


```{r}
my_plot <- 
  ggplot (  data= gapminder_2007 , 
            aes ( x= gdpPercap, 
                  y = lifeExp, 
                  color = continent,
                  size = pop)
            ) +
  geom_point (alpha = 0.7) +
  theme_minimal() +
  scale_x_log10()
  
  
my_plot
```

#### Facet

Now let's make a little chart for each continent

```{r}
my_plot <- 
  my_plot + 
  facet_wrap (~continent)


my_plot
```

#### Scale

It's hard to see because the gdp is so skewed. Again, fix the scale to log10

```{r message=FALSE}

my_plot + 
  scale_x_log10()

```

### Adding interactivity

GGPLOT2 is not interactive, so we have to install a different library to allow us to hover over the points. In this case, we're going to use a function called paste, which puts words together, in the variable in aes called "text":

```{r}
#install.packages("plotly")
library(plotly)

my_plot <-
  ggplot (data = gapminder_2007,
          aes(text = paste("country: ", country),
              x= gdpPercap ,
              y = lifeExp,
              color= continent,
              size=pop)
        ) +
    geom_point( alpha= 0.7) +
    theme_minimal() +
    facet_wrap (~continent) +
    scale_x_log10()
#We have to make it a ggplotly to get it interactive.
my_plot <- ggplotly(my_plot)

my_plot

```



## Adding animation

So far, we've only looked at the year 2007 -- what if we wanted to look at it over time, say 50 or so years? 
Let's take the years 1957 to 2007: 

```{r}

df_gap <- 
  gapminder %>%
  filter (between (year, 1957, 2007))
# and let's just check it

df_gap %>% 
  group_by (year) %>%
  summarise (n() ) %>%
  arrange (year)

```


Let's just repeat what we did to get the original interactive plot, with one change: The plotly package lets you specify a "frame" aesthetic, which will create animation by whatever variable you specify. Here, we've specified the year as that frame:

```{r}
library(plotly)
#this option forces it to show real numbers, not the 1e things.
options (scipen=99)
my_plot <-
  ggplot (data = df_gap,
          aes(text = paste("country: ", country),
              x= gdpPercap ,
              y = lifeExp,
              color= continent,
              size=pop, 
              frame = year)
        ) +
    geom_point( alpha= 0.7) +
    theme_minimal() +
    facet_wrap (~continent) +
    scale_x_log10()
#We have to make it a ggplotly to get it interactive.
my_plot <- ggplotly(my_plot)
my_plot
```
