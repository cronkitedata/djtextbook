---
title: "Untitled"
editor: visual
---

## Exercise

If you feel comfortable, consider trying to create a markdown program that accomplishes the same thing that was done with the Washington Post shooting database that you did in Excel lessons.

Skip the pivot table exercise with ethnicities in rows and years in columns - we'll get back to that later.

There are three changes you'll have to make because the data begins as an Excel file rather than a comma-separated text file (csv):

1.  Add a library to your setup chunk : `library(readxl)` and **be sure to run that chunk again** (or you'll get an error).
2.  [Download the file](%22https://cronkitedata.s3.amazonaws.com/xlfiles/wapo-shootings-pivot.xlsx%22) and save it into your project. (The readxl package doesn't let you read data from a web address.)
3.  Use the `read_excel()` function to import it instead of read_csv():

```{r readxl_to-copy, eval=FALSE, error=TRUE}

wapo_data <- read_excel("wapo-shootings-pivot.xlsx")

```

```{r readwapo, include=FALSE, message=FALSE, warning=FALSE}

download.file("https://cronkitedata.s3.amazonaws.com/xlfiles/wapo-shootings-pivot.xlsx", "wapo-shootings-pivot.xlsx")
wapo_data <- read_excel ("wapo-shootings-pivot.xlsx")
file.remove("wapo-shootings-pivot.xlsx")
              

```

### Answers {.unnumbered}

1.  Sort by state, then date, this time only picking a few columns:

```{r wapo-select, eval=FALSE, results="hide", echo=TRUE}

wapo_data |>
  arrange ( state, date) |>
  select (name, date, armed, ethnicity, city, state)



```

2.  Find fatalities from a Taser:

```{r wapo-taser, eval=FALSE, results="hide", echo=TRUE}


wapo_data |>
  filter ( manner_of_death == "shot and Tasered")

```

3.  Unarmed suspects in cars

```{r wapo-unarmed, eval=FALSE, results="hide", echo=TRUE}

wapo_data |>
  filter (armed == "unarmed" & flee=="Car")
  


```

4.  Fatalities by ethnicity

```{r wapo-ethnicity, results="hide", eval=FALSE, echo=TRUE}

wapo_data |>
  group_by ( ethnicity ) |>
  summarise ( count = n() ) |>
  arrange ( desc ( count ) )


```

5.  Fatalities by ethnicity and year

You should skip this one for now -- we'll learn later about how to flip the answer on its head to get something that looks like the pivot table.

6.  Fatalities by city

```{r wapo-cities, results="asis", echo=TRUE}

wapo_data |>
  group_by ( city, state) |>
  summarise ( fatalities = n() ) |>
  arrange (desc (fatalities)) |>
  head (10)



```

## It's worth noting that most of the top 10 cities are west of the Mississippi.

### Get an overview of your data with \`skimr\` {-}

Get an overview of the data using the \`skimr\` package that I suggested that you install earlier in the book. If you haven't yet (or if you're on Cronkite computers), install it now in the Console using the command \`install.packages("skimr")\`. 

This command uses the package without loading it in the first chunk by naming the package (\`skimr\`) and a function or action that comes with that package (\`skim\`). Sometimes you'll do that when you're only using it once, or when you want to indicate to your readers which package contributes the function. 

\`\`\`{r skimppp, eval=FALSE, echo=TRUE}

skimr::skim(ppp_orig)


\`\`\`

!\[\](assets/images/r-groupby-skim.png){width=100%}

Using the \`skimr\` package is an easy way to get a very detailed overview of your data without having to examine each column.\^\[It can take some time to run on very large datasets. Go get some tea and come back in 5 minutes if that happens. Also, the image above was run on a data frame slightly different than the one you have. Your answers might be slightly different.\]
